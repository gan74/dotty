[0m[[0minfo[0m] [0mLoading project definition from /mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/project/project[0m
[0m[[0minfo[0m] [0mLoading project definition from /mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/project[0m
[0m[[0minfo[0m] [0mResolving key references (15124 settings) ...[0m
[0m[[0minfo[0m] [0mSet current project to dotty (in build file:/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/)[0m
[0m[[0minfo[0m] [0mPassed: Total 0, Failed 0, Errors 0, Passed 0[0m
[0m[[0minfo[0m] [0mNo tests to run for dotty-interfaces/test:testOnly[0m
[0m[[0minfo[0m] [0mCleaning the dotty-sbt-bridge cache[0m
[0m[[0minfo[0m] [0m[34mTest run started[0m[0m
[0m[[0minfo[0m] [0mTest dotty.[33mShowTests[0m.[36mwithoutShow[0m started[0m
[0m[[0minfo[0m] [0mTest dotty.[33mShowTests[0m.[36mshowFloat[0m started[0m
[0m[[0minfo[0m] [0mTest dotty.[33mShowTests[0m.[36mshowOptions[0m started[0m
[0m[[0minfo[0m] [0mTest dotty.[33mShowTests[0m.[36mshowChar[0m started[0m
[0m[[0minfo[0m] [0mTest dotty.[33mShowTests[0m.[36mshowMaps[0m started[0m
[0m[[0minfo[0m] [0mTest dotty.[33mShowTests[0m.[36mshowDouble[0m started[0m
[0m[[0minfo[0m] [0mTest dotty.[33mShowTests[0m.[36mpartialShow[0m started[0m
[0m[[0minfo[0m] [0mTest dotty.[33mShowTests[0m.[36mshowString[0m started[0m
[0m[[0minfo[0m] [0mTest dotty.[33mShowTests[0m.[36mshowCar[0m started[0m
[0m[[0minfo[0m] [0m[34mTest run finished: [0m[34m0 failed[0m[34m, [0m[34m0 ignored[0m[34m, 9 total, 0.45s[0m[0m
[0m[[0minfo[0m] [0mPassed: Total 9, Failed 0, Errors 0, Passed 9[0m
[0m[[33mwarn[0m] [0mMultiple main classes detected.  Run 'show discoveredMainClasses' to see the list[0m
[0m[[0minfo[0m] [0mPassed: Total 0, Failed 0, Errors 0, Passed 0[0m
[0m[[0minfo[0m] [0mNo tests to run for dotty/test:testOnly[0m
[0m[[33mwarn[0m] [0mMultiple main classes detected.  Run 'show discoveredMainClasses' to see the list[0m
[0m[[0minfo[0m] [0mExtractUsedNamesSpecification[0m
[0m[[0minfo[0m] [0m[0m
[0m[[0minfo[0m] [0m[32m+[0m imported name[0m
[0m[[0minfo[0m] [0m[32m+[0m names in type tree[0m
[0m[[0minfo[0m] [0m[32m+[0m symbolic names[0m
[0m[[0minfo[0m] [0m[32m+[0m extract names in the types of trees[0m
[0m[[0minfo[0m] [0m[32m+[0m used names from the same compilation unit[0m
[0m[[0minfo[0m] [0m[32m+[0m names of constants[0m
[0m[[0minfo[0m] [0m[36m*[0m names from method calls on Dynamic Call to Dynamic is desugared in type checker so Select nodes is turned into string literal.. Pending until fixed[0m
[0m[[0minfo[0m] [0m[0m
[0m[[0minfo[0m] [0m[0m
[0m[[0minfo[0m] [0mTotal for specification ExtractUsedNamesSpecification[0m
[0m[[0minfo[0m] [0m[36mFinished in 4 seconds, 758 ms[0m[0m
[0m[[0minfo[0m] [0m[36m[0m[36m7 examples, 0 failure, 0 error, 1 pending[0m[0m
[0m[[0minfo[0m] [0m[0m
[0m[[0minfo[0m] [0mDependencySpecification[0m
[0m[[0minfo[0m] [0m[0m
[0m[[0minfo[0m] [0m[32m+[0m Extracted source dependencies from public members[0m
[0m[[0minfo[0m] [0m[32m+[0m Extracted source dependencies from private members[0m
[0m[[0minfo[0m] [0m[32m+[0m Extracted source dependencies with trait as first parent[0m
[0m[[0minfo[0m] [0m[0m
[0m[[0minfo[0m] [0m[0m
[0m[[0minfo[0m] [0mTotal for specification DependencySpecification[0m
[0m[[0minfo[0m] [0m[36mFinished in 611 ms[0m[0m
[0m[[0minfo[0m] [0m[36m[0m[36m3 examples, 0 failure, 0 error[0m[0m
[0m[[0minfo[0m] [0m[0m
[0m[[0minfo[0m] [0mExtractAPISpecification[0m
[0m[[0minfo[0m] [0m[0m
[0m[[0minfo[0m] [0mExistential types in method signatures should[0m
[0m[[0minfo[0m] [0m  [32m+[0m have stable names[0m
[0m[[0minfo[0m] [0m[32m+[0m Self variable and no self type[0m
[0m[[0minfo[0m] [0m[32m+[0m Self type[0m
[0m[[0minfo[0m] [0m[0m
[0m[[0minfo[0m] [0m[0m
[0m[[0minfo[0m] [0mTotal for specification ExtractAPISpecification[0m
[0m[[0minfo[0m] [0m[36mFinished in 830 ms[0m[0m
[0m[[0minfo[0m] [0m[36m[0m[36m3 examples, 0 failure, 0 error[0m[0m
[0m[[0minfo[0m] [0m[0m
[0m[[0minfo[0m] [0m[34mTest run started[0m[0m
[0m[[0minfo[0m] [0mTest dotty.tools.dottydoc.[33mPackageStructure[0m.[36mmultiplePackages[0m started[0m
[0m[[0minfo[0m] [0mTest dotty.tools.dottydoc.[33mPackageStructure[0m.[36mmultipleCompilationUnits[0m started[0m
[0m[[0minfo[0m] [0m[34mTest run finished: [0m[34m0 failed[0m[34m, [0m[34m0 ignored[0m[34m, 2 total, 2.411s[0m[0m
[0m[[0minfo[0m] [0m[34mTest run started[0m[0m
[0m[[0minfo[0m] [0mTest dotty.tools.dottydoc.[33mMarkdownTests[0m.[36mhandleNestedLists[0m started[0m
[0m[[0minfo[0m] [0mTest dotty.tools.dottydoc.[33mMarkdownTests[0m.[36mabsoluteLink[0m started[0m
[0m[[0minfo[0m] [0mTest dotty.tools.dottydoc.[33mMarkdownTests[0m.[36mhandleCodeBlock[0m started[0m
[0m[[0minfo[0m] [0mTest dotty.tools.dottydoc.[33mMarkdownTests[0m.[36mrelativeLink[0m started[0m
[0m[[0minfo[0m] [0mTest dotty.tools.dottydoc.[33mMarkdownTests[0m.[36mdocstringSummary[0m started[0m
[0m[[0minfo[0m] [0mTest dotty.tools.dottydoc.[33mMarkdownTests[0m.[36mhandleCodeBlockJavaDocstring[0m started[0m
[0m[[0minfo[0m] [0mTest dotty.tools.dottydoc.[33mMarkdownTests[0m.[36msimpleMarkdown[0m started[0m
[0m[[0minfo[0m] [0mTest dotty.tools.dottydoc.[33mMarkdownTests[0m.[36mhandleLists[0m started[0m
[0m[[0minfo[0m] [0mTest dotty.tools.dottydoc.[33mMarkdownTests[0m.[36mouterLink[0m started[0m
[0m[[0minfo[0m] [0mTest dotty.tools.dottydoc.[33mMarkdownTests[0m.[36mdocstringSummaryWithImage[0m started[0m
[0m[[0minfo[0m] [0m[34mTest run finished: [0m[34m0 failed[0m[34m, [0m[34m0 ignored[0m[34m, 10 total, 1.284s[0m[0m
[0m[[0minfo[0m] [0m[34mTest run started[0m[0m
[0m[[0minfo[0m] [0mTest dotty.tools.dottydoc.[33mJavaConverterTest[0m.[36mentityConversions[0m started[0m
[0m[[0minfo[0m] [0m[34mTest run finished: [0m[34m0 failed[0m[34m, [0m[34m0 ignored[0m[34m, 1 total, 0.053s[0m[0m
[0m[[0minfo[0m] [0m[34mTest run started[0m[0m
[0m[[0minfo[0m] [0mTest dotty.tools.dottydoc.[33mUsecaseTest[0m.[36msimpleTparamUsecase[0m started[0m
[0m[[0minfo[0m] [0mTest dotty.tools.dottydoc.[33mUsecaseTest[0m.[36mcheckIterableLike[0m started[0m
[0m[[0minfo[0m] [0mTest dotty.tools.dottydoc.[33mUsecaseTest[0m.[36mcheckIterator[0m started[0m
[0m[[0minfo[0m] [0mTest dotty.tools.dottydoc.[33mUsecaseTest[0m.[36msimpleUsecaseAddedArg[0m started[0m
[0m[[0minfo[0m] [0mTest dotty.tools.dottydoc.[33mUsecaseTest[0m.[36mexpandColl[0m started[0m
[0m[[0minfo[0m] [0mTest dotty.tools.dottydoc.[33mUsecaseTest[0m.[36mcheckStripping[0m started[0m
[0m[[0minfo[0m] [0mTest dotty.tools.dottydoc.[33mUsecaseTest[0m.[36msimpleUsecase[0m started[0m
[0m[[0minfo[0m] [0m[34mTest run finished: [0m[34m0 failed[0m[34m, [0m[34m0 ignored[0m[34m, 7 total, 2.99s[0m[0m
[0m[[0minfo[0m] [0m[34mTest run started[0m[0m
[0m[[0minfo[0m] [0mTest dotty.tools.dottydoc.[33mTestSimpleComments[0m.[36msimpleComment[0m started[0m
[0m[[0minfo[0m] [0m[34mTest run finished: [0m[34m0 failed[0m[34m, [0m[34m0 ignored[0m[34m, 1 total, 0.03s[0m[0m
[0m[[0minfo[0m] [0m[34mTest run started[0m[0m
[0m[[0minfo[0m] [0mTest dotty.tools.dottydoc.[33mTestWhitelistedCollections[0m.[36marrayAndImmutableHasDocumentation[0m started[0m
[0m[[0minfo[0m] [0m[34mTest run finished: [0m[34m0 failed[0m[34m, [0m[34m0 ignored[0m[34m, 1 total, 20.78s[0m[0m
[0m[[0minfo[0m] [0m[34mTest run started[0m[0m
[0m[[0minfo[0m] [0mTest dotty.tools.dottydoc.staticsite.[33mPageTests[0m.[36mhtmlPageHasNoYaml[0m started[0m
[0m[[0minfo[0m] [0mTest dotty.tools.dottydoc.staticsite.[33mPageTests[0m.[36millegalYamlFrontMatter[0m started[0m
[0m[[0minfo[0m] [0mTest dotty.tools.dottydoc.staticsite.[33mPageTests[0m.[36myamlPreservesLiquidTags[0m started[0m
[0m[[0minfo[0m] [0mTest dotty.tools.dottydoc.staticsite.[33mPageTests[0m.[36msimpleHtmlPage[0m started[0m
[0m[[0minfo[0m] [0mTest dotty.tools.dottydoc.staticsite.[33mPageTests[0m.[36mmdHas1Key[0m started[0m
[0m[[0minfo[0m] [0m[34mTest run finished: [0m[34m0 failed[0m[34m, [0m[34m0 ignored[0m[34m, 5 total, 0.498s[0m[0m
[0m[[0minfo[0m] [0m[34mTest run started[0m[0m
[0m[[0minfo[0m] [0mTest dotty.tools.dottydoc.staticsite.[33mTemplateErrorTests[0m.[36mnonExistingTag[0m started[0m
[0m[[0minfo[0m] [0mTest dotty.tools.dottydoc.staticsite.[33mTemplateErrorTests[0m.[36mmissingEndif[0m started[0m
[0m[[0minfo[0m] [0mTest dotty.tools.dottydoc.staticsite.[33mTemplateErrorTests[0m.[36munclosedTag[0m started[0m
[0m[[0minfo[0m] [0m[34mTest run finished: [0m[34m0 failed[0m[34m, [0m[34m0 ignored[0m[34m, 3 total, 0.083s[0m[0m
[0m[[0minfo[0m] [0m[34mTest run started[0m[0m
[0m[[0minfo[0m] [0mTest dotty.tools.dottydoc.[33mCommentCleanerTest[0m.[36mmultilineFirstThreeSpaces[0m started[0m
[0m[[0minfo[0m] [0mTest dotty.tools.dottydoc.[33mCommentCleanerTest[0m.[36mmultilineWorse[0m started[0m
[0m[[0minfo[0m] [0mTest dotty.tools.dottydoc.[33mCommentCleanerTest[0m.[36mmultiline[0m started[0m
[0m[[0minfo[0m] [0mTest dotty.tools.dottydoc.[33mCommentCleanerTest[0m.[36msimpleOneliner[0m started[0m
[0m[[0minfo[0m] [0mTest dotty.tools.dottydoc.[33mCommentCleanerTest[0m.[36mmultilineFirstNoSpace[0m started[0m
[0m[[0minfo[0m] [0mTest dotty.tools.dottydoc.[33mCommentCleanerTest[0m.[36mmultilineFirstTwoSpaces[0m started[0m
[0m[[0minfo[0m] [0mTest dotty.tools.dottydoc.[33mCommentCleanerTest[0m.[36mmultilineBad[0m started[0m
[0m[[0minfo[0m] [0m[34mTest run finished: [0m[34m0 failed[0m[34m, [0m[34m0 ignored[0m[34m, 7 total, 0.002s[0m[0m
[0m[[0minfo[0m] [0m[34mTest run started[0m[0m
[0m[[0minfo[0m] [0mTest dotty.tools.dottydoc.staticsite.[33mSiteTests[0m.[36mrenderMultipleTemplates[0m started[0m
[0m[[0minfo[0m] [0mTest dotty.tools.dottydoc.staticsite.[33mSiteTests[0m.[36msiteStructure[0m started[0m
[0m[[0minfo[0m] [0mTest dotty.tools.dottydoc.staticsite.[33mSiteTests[0m.[36mrenderHelloInMainLayout[0m started[0m
[0m[[0minfo[0m] [0mTest dotty.tools.dottydoc.staticsite.[33mSiteTests[0m.[36mhasCorrectLayoutFiles[0m started[0m
[0m[[0minfo[0m] [0mTest dotty.tools.dottydoc.staticsite.[33mSiteTests[0m.[36mpreservesPageYaml[0m started[0m
[0m[[0minfo[0m] [0mTest dotty.tools.dottydoc.staticsite.[33mSiteTests[0m.[36minclude[0m started[0m
[0m[[0minfo[0m] [0m[34mTest run finished: [0m[34m0 failed[0m[34m, [0m[34m0 ignored[0m[34m, 6 total, 0.211s[0m[0m
[0m[[0minfo[0m] [0m[34mTest run started[0m[0m
[0m[[0minfo[0m] [0mTest dotty.tools.dottydoc.[33mConstructors[0m.[36mmultipleConstructorsCC[0m started[0m
[0m[[0minfo[0m] [0mTest dotty.tools.dottydoc.[33mConstructors[0m.[36mmultipleArgumentListsForConstructor[0m started[0m
[0m[[0minfo[0m] [0mTest dotty.tools.dottydoc.[33mConstructors[0m.[36msingleClassConstructor[0m started[0m
[0m[[0minfo[0m] [0mTest dotty.tools.dottydoc.[33mConstructors[0m.[36mtraitParameters[0m started[0m
[0m[[0minfo[0m] [0mTest dotty.tools.dottydoc.[33mConstructors[0m.[36mmultipleConstructors[0m started[0m
[0m[[0minfo[0m] [0mTest dotty.tools.dottydoc.[33mConstructors[0m.[36mconstructorPlusImplicitArgList[0m started[0m
[0m[[0minfo[0m] [0m[34mTest run finished: [0m[34m0 failed[0m[34m, [0m[34m0 ignored[0m[34m, 6 total, 0.217s[0m[0m
[0m[[0minfo[0m] [0m[34mTest run started[0m[0m
[0m[[0minfo[0m] [0mTest dotty.tools.dotc.classpath.[33mZipAndJarFileLookupFactoryTest[0m.[36mcacheInvalidation[0m started[0m
[0m[[0minfo[0m] [0m[34mTest run finished: [0m[34m0 failed[0m[34m, [0m[34m0 ignored[0m[34m, 1 total, 1.092s[0m[0m
[0m[[0minfo[0m] [0m[34mTest run started[0m[0m
[0m[[0minfo[0m] [0mTest dotty.tools.[33mShowClassTests[0m.[36mloadDotty[0m started[0m
[0m[[0minfo[0m] [0m[34mTest run finished: [0m[34m0 failed[0m[34m, [0m[34m0 ignored[0m[34m, 1 total, 1.237s[0m[0m
[0m[[0minfo[0m] [0m[34mTest run started[0m[0m
[0m[[0minfo[0m] [0mTest dotty.tools.[33mStdLibSources[0m.[36mcheckWBLists[0m started[0m
[0m[[0minfo[0m] [0m[34mTest run finished: [0m[34m0 failed[0m[34m, [0m[34m0 ignored[0m[34m, 1 total, 0.324s[0m[0m
[0m[[0minfo[0m] [0m[34mTest run started[0m[0m
[0m[[0minfo[0m] [0mTest dotty.tools.dotc.[33mCompilationTests[0m.[36mtestOptimised[0m started[0m
[                                       ] completed (0/940, 0s)[                                       ] completed (0/940, 0s)[                                       ] completed (0/940, 0s)[                                       ] completed (0/940, 0s)[                                       ] completed (0/940, 0s)[                                       ] completed (0/940, 0s)[                                       ] completed (0/940, 0s)[                                       ] completed (0/940, 0s)[                                       ] completed (0/940, 0s)[                                       ] completed (0/940, 0s)[                                       ] completed (0/940, 1s)[                                       ] completed (0/940, 1s)[                                       ] completed (0/940, 1s)[                                       ] completed (0/940, 1s)[                                       ] completed (0/940, 1s)[                                       ] completed (0/940, 1s)[                                       ] completed (0/940, 1s)[                                       ] completed (0/940, 1s)[                                       ] completed (0/940, 1s)[                                       ] completed (0/940, 1s)[                                       ] completed (0/940, 2s)[                                       ] completed (0/940, 2s)[                                       ] completed (0/940, 2s)[                                       ] completed (0/940, 2s)[                                       ] completed (0/940, 2s)[                                       ] completed (0/940, 2s)[                                       ] completed (0/940, 2s)[                                       ] completed (0/940, 2s)[                                       ] completed (0/940, 2s)[                                       ] completed (0/940, 3s)[                                       ] completed (7/940, 3s)[                                       ] completed (7/940, 3s)[                                       ] completed (7/940, 3s)[                                       ] completed (7/940, 3s)[                                       ] completed (8/940, 3s)[                                       ] completed (10/940, 3s)[                                       ] completed (11/940, 3s)[                                       ] completed (11/940, 3s)[                                       ] completed (12/940, 3s)inlining null
[                                       ] completed (13/940, 4s)[                                       ] completed (13/940, 4s)[                                       ] completed (15/940, 4s)[                                       ] completed (16/940, 4s)[                                       ] completed (16/940, 4s)[                                       ] completed (16/940, 4s)[                                       ] completed (19/940, 4s)inlining {
  def $anonfun(_$1: Throwable): Int = 2
  closure($anonfun)
}
inlining {
  def $anonfun(b: Int): Throwable => Int = 
    {
      def $anonfun(_$2: Throwable): Int = b
      closure($anonfun)
    }
  closure($anonfun)
}
exception while typing {
  def $anonfun(_$1: Throwable): Int = 2
  closure($anonfun)
} of class class dotty.tools.dotc.ast.Trees$Block # 23388
exception while typing {
  def $anonfun(_$1: Throwable): Int = 2
  closure($anonfun)
}: (Throwable => Int) of class class dotty.tools.dotc.ast.Trees$Typed # 23390
exception while typing (
  {
    def $anonfun(_$1: Throwable): Int = 2
    closure($anonfun)
  }
: (Throwable => Int)).apply of class class dotty.tools.dotc.ast.Trees$Select # 23392
exception while typing (
  {
    def $anonfun(_$1: Throwable): Int = 2
    closure($anonfun)
  }
: (Throwable => Int)).apply(ex$) of class class dotty.tools.dotc.ast.Trees$Apply # 23397
exception while typing try 
  {
    ???
    1
  }
 catch 
  {
    case ex$ @ _ => 
      (
        {
          def $anonfun(_$1: Throwable): Int = 2
          closure($anonfun)
        }
      : (Throwable => Int)).apply(ex$)
  } of class class dotty.tools.dotc.ast.Trees$Try # 23400
exception while typing def foo2: Int = 
  try 
    {
      ???
      1
    }
   catch 
    {
      case ex$ @ _ => 
        (
          {
            def $anonfun(_$1: Throwable): Int = 2
            closure($anonfun)
          }
        : (Throwable => Int)).apply(ex$)
    } of class class dotty.tools.dotc.ast.Trees$DefDef # 23515
exception while typing @scala.annotation.internal.SourceFile(
  "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/tryTyping.scala"
) final module class tryTyping() extends Object() { 
  def foo: Int = 
    try 
      {
        ???
        1
      }
     catch 
      {
        case e @ _: Exception => 2
      }
  def foo2: Int = 
    try 
      {
        ???
        1
      }
     catch 
      {
        case ex$ @ _ => 
          (
            {
              def $anonfun(_$1: Throwable): Int = 2
              closure($anonfun)
            }
          : (Throwable => Int)).apply(ex$)
      }
  def foo3: Int = 
    try 
      {
        ???
        1
      }
     catch 
      {
        case ex$ @ _ => 
          (
            {
              def $anonfun(b: Int): (Throwable => Int) = 
                {
                  def $anonfun(_$2: Throwable): Int = b
                  closure($anonfun)
                }
              closure($anonfun)
            }
          : (Int => Throwable => Int)).apply(3).apply(ex$)
      }
} of class class dotty.tools.dotc.ast.Trees$TypeDef # 23614
[                                       ] completed (19/940, 4s)exception while typing package <empty> {
  final lazy module val tryTyping: tryTyping = new tryTyping()
  @scala.annotation.internal.SourceFile(
    "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/tryTyping.scala"
  ) final module class tryTyping() extends Object() { 
    def foo: Int = 
      try 
        {
          ???
          1
        }
       catch 
        {
          case e @ _: Exception => 2
        }
    def foo2: Int = 
      try 
        {
          ???
          1
        }
       catch 
        {
          case ex$ @ _ => 
            (
              {
                def $anonfun(_$1: Throwable): Int = 2
                closure($anonfun)
              }
            : (Throwable => Int)).apply(ex$)
        }
    def foo3: Int = 
      try 
        {
          ???
          1
        }
       catch 
        {
          case ex$ @ _ => 
            (
              {
                def $anonfun(b: Int): (Throwable => Int) = 
                  {
                    def $anonfun(_$2: Throwable): Int = b
                    closure($anonfun)
                  }
                closure($anonfun)
              }
            : (Int => Throwable => Int)).apply(3).apply(ex$)
        }
  }
} of class class dotty.tools.dotc.ast.Trees$PackageDef # 23615
*** error while checking /mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/tryTyping.scala after phase arrayConstructors ***
[                                       ] completed (20/940, 4s)[                                       ] completed (21/940, 4s)[                                       ] completed (21/940, 5s)[                                       ] completed (21/940, 5s)[                                       ] completed (22/940, 5s)[                                       ] completed (23/940, 5s)[>                                      ] completed (25/940, 5s)[>                                      ] completed (25/940, 5s)inlining <empty>
inlining <empty>
[>                                      ] completed (26/940, 5s)[>                                      ] completed (27/940, 5s)[>                                      ] completed (29/940, 6s)[>                                      ] completed (29/940, 6s)[>                                      ] completed (29/940, 6s)[>                                      ] completed (29/940, 6s)[>                                      ] completed (29/940, 6s)[>                                      ] completed (30/940, 6s)[>                                      ] completed (32/940, 6s)[>                                      ] completed (32/940, 6s)[>                                      ] completed (32/940, 6s)[>                                      ] completed (33/940, 6s)[>                                      ] completed (34/940, 7s)[>                                      ] completed (34/940, 7s)[>                                      ] completed (34/940, 7s)[>                                      ] completed (34/940, 7s)[>                                      ] completed (34/940, 7s)[>                                      ] completed (36/940, 7s)[>                                      ] completed (36/940, 7s)[>                                      ] completed (37/940, 7s)[>                                      ] completed (38/940, 7s)[>                                      ] completed (39/940, 8s)[>                                      ] completed (41/940, 8s)[>                                      ] completed (41/940, 8s)[>                                      ] completed (41/940, 8s)[>                                      ] completed (42/940, 8s)[>                                      ] completed (44/940, 8s)[>                                      ] completed (44/940, 8s)[>                                      ] completed (44/940, 8s)[>                                      ] completed (44/940, 8s)[>                                      ] completed (46/940, 8s)[=>                                     ] completed (47/940, 9s)[=>                                     ] completed (47/940, 9s)[=>                                     ] completed (48/940, 9s)[=>                                     ] completed (48/940, 9s)[=>                                     ] completed (51/940, 9s)[=>                                     ] completed (51/940, 9s)[=>                                     ] completed (54/940, 9s)[=>                                     ] completed (55/940, 9s)[=>                                     ] completed (55/940, 9s)[=>                                     ] completed (57/940, 9s)[=>                                     ] completed (57/940, 10s)[=>                                     ] completed (59/940, 10s)[=>                                     ] completed (62/940, 10s)[=>                                     ] completed (62/940, 10s)[=>                                     ] completed (65/940, 10s)[=>                                     ] completed (65/940, 10s)[=>                                     ] completed (68/940, 10s)[==>                                    ] completed (71/940, 10s)[==>                                    ] completed (71/940, 10s)[==>                                    ] completed (75/940, 10s)[==>                                    ] completed (76/940, 11s)[==>                                    ] completed (76/940, 11s)inlining "yyyy should appear twice"
[==>                                    ] completed (76/940, 11s)[==>                                    ] completed (78/940, 11s)[==>                                    ] completed (78/940, 11s)inlining <empty>
inlining <empty>
inlining <empty>
inlining <empty>
[==>                                    ] completed (80/940, 11s)inlining <empty>
inlining <empty>
[==>                                    ] completed (80/940, 11s)[==>                                    ] completed (81/940, 11s)[==>                                    ] completed (83/940, 11s)[==>                                    ] completed (83/940, 11s)[==>                                    ] completed (84/940, 12s)[==>                                    ] completed (85/940, 12s)[==>                                    ] completed (85/940, 12s)[==>                                    ] completed (87/940, 12s)[==>                                    ] completed (89/940, 12s)[==>                                    ] completed (90/940, 12s)[==>                                    ] completed (92/940, 12s)[==>                                    ] completed (92/940, 12s)[==>                                    ] completed (92/940, 12s)[===>                                   ] completed (94/940, 13s)[===>                                   ] completed (95/940, 13s)[===>                                   ] completed (97/940, 13s)[===>                                   ] completed (97/940, 13s)[===>                                   ] completed (100/940, 13s)[===>                                   ] completed (102/940, 13s)[===>                                   ] completed (102/940, 13s)[===>                                   ] completed (104/940, 13s)inlining x5
[===>                                   ] completed (104/940, 13s)[===>                                   ] completed (107/940, 13s)[===>                                   ] completed (107/940, 14s)[===>                                   ] completed (108/940, 14s)[===>                                   ] completed (109/940, 14s)[===>                                   ] completed (112/940, 14s)[===>                                   ] completed (113/940, 14s)[===>                                   ] completed (114/940, 14s)[===>                                   ] completed (115/940, 14s)[===>                                   ] completed (115/940, 14s)[===>                                   ] completed (117/940, 14s)[====>                                  ] completed (119/940, 14s)[====>                                  ] completed (119/940, 15s)[====>                                  ] completed (119/940, 15s)[====>                                  ] completed (121/940, 15s)[====>                                  ] completed (121/940, 15s)[====>                                  ] completed (123/940, 15s)[====>                                  ] completed (123/940, 15s)[====>                                  ] completed (123/940, 15s)[====>                                  ] completed (125/940, 15s)[====>                                  ] completed (127/940, 15s)[====>                                  ] completed (128/940, 15s)[====>                                  ] completed (128/940, 16s)[====>                                  ] completed (129/940, 16s)[====>                                  ] completed (131/940, 16s)[====>                                  ] completed (131/940, 16s)[====>                                  ] completed (132/940, 16s)[====>                                  ] completed (134/940, 16s)[====>                                  ] completed (135/940, 16s)[====>                                  ] completed (135/940, 16s)[====>                                  ] completed (136/940, 16s)[====>                                  ] completed (137/940, 16s)[====>                                  ] completed (137/940, 17s)[====>                                  ] completed (140/940, 17s)[====>                                  ] completed (140/940, 17s)[=====>                                 ] completed (141/940, 17s)[=====>                                 ] completed (142/940, 17s)[=====>                                 ] completed (144/940, 17s)[=====>                                 ] completed (144/940, 17s)[=====>                                 ] completed (146/940, 17s)[=====>                                 ] completed (148/940, 17s)[=====>                                 ] completed (150/940, 17s)[=====>                                 ] completed (151/940, 18s)[=====>                                 ] completed (153/940, 18s)[=====>                                 ] completed (153/940, 18s)[=====>                                 ] completed (156/940, 18s)[=====>                                 ] completed (156/940, 18s)[=====>                                 ] completed (158/940, 18s)[=====>                                 ] completed (160/940, 18s)[=====>                                 ] completed (162/940, 18s)[=====>                                 ] completed (163/940, 18s)[======>                                ] completed (165/940, 18s)[======>                                ] completed (165/940, 19s)[======>                                ] completed (167/940, 19s)[======>                                ] completed (167/940, 19s)[======>                                ] completed (169/940, 19s)[======>                                ] completed (171/940, 19s)[======>                                ] completed (172/940, 19s)[======>                                ] completed (173/940, 19s)[======>                                ] completed (173/940, 19s)[======>                                ] completed (174/940, 19s)[======>                                ] completed (176/940, 19s)inlining null
inlining null
[======>                                ] completed (177/940, 20s)[======>                                ] completed (179/940, 20s)[======>                                ] completed (180/940, 20s)[======>                                ] completed (181/940, 20s)[======>                                ] completed (181/940, 20s)[======>                                ] completed (183/940, 20s)[======>                                ] completed (184/940, 20s)[======>                                ] completed (186/940, 20s)[======>                                ] completed (187/940, 20s)[=======>                               ] completed (188/940, 20s)[=======>                               ] completed (189/940, 21s)[=======>                               ] completed (190/940, 21s)[=======>                               ] completed (190/940, 21s)[=======>                               ] completed (192/940, 21s)[=======>                               ] completed (193/940, 21s)[=======>                               ] completed (194/940, 21s)inlining <empty>
inlining <empty>
[=======>                               ] completed (194/940, 21s)[=======>                               ] completed (196/940, 21s)[=======>                               ] completed (198/940, 21s)[=======>                               ] completed (198/940, 21s)[=======>                               ] completed (199/940, 22s)inlining <empty>
inlining <empty>
[=======>                               ] completed (200/940, 22s)[=======>                               ] completed (202/940, 22s)[=======>                               ] completed (202/940, 22s)[=======>                               ] completed (204/940, 22s)[=======>                               ] completed (205/940, 22s)[=======>                               ] completed (206/940, 22s)[=======>                               ] completed (207/940, 22s)[=======>                               ] completed (208/940, 22s)[=======>                               ] completed (210/940, 22s)[=======>                               ] completed (211/940, 23s)[=======>                               ] completed (211/940, 23s)[========>                              ] completed (212/940, 23s)[========>                              ] completed (212/940, 23s)[========>                              ] completed (214/940, 23s)[========>                              ] completed (216/940, 23s)[========>                              ] completed (216/940, 23s)[========>                              ] completed (219/940, 23s)[========>                              ] completed (220/940, 23s)[========>                              ] completed (223/940, 23s)[========>                              ] completed (224/940, 24s)[========>                              ] completed (226/940, 24s)[========>                              ] completed (226/940, 24s)[========>                              ] completed (226/940, 24s)[========>                              ] completed (227/940, 24s)inlining {
  def $anonfun(x: Int, s: String): String = s.+(x)
  closure($anonfun)
}
inlining {
  def $anonfun(a: Int, str: String): String = "a: ".+(a).+(", str: ").+(str)
  closure($anonfun)
}
exception while typing {
  def $anonfun(x: Int, s: String): String = s.+(x)
  closure($anonfun)
} of class class dotty.tools.dotc.ast.Trees$Block # 314425
exception while typing {
  def $anonfun(x: Int, s: String): String = s.+(x)
  closure($anonfun)
}: ((Int, String) => String) of class class dotty.tools.dotc.ast.Trees$Typed # 314427
exception while typing test1.g[Int](
  {
    def $anonfun(x: Int, s: String): String = s.+(x)
    closure($anonfun)
  }: ((Int, String) => String)
) of class class dotty.tools.dotc.ast.Trees$Apply # 314428
exception while typing test1.g[Int](
  {
    def $anonfun(x: Int, s: String): String = s.+(x)
    closure($anonfun)
  }: ((Int, String) => String)
).apply of class class dotty.tools.dotc.ast.Trees$Select # 314429
exception while typing test1.g[Int](
  {
    def $anonfun(x: Int, s: String): String = s.+(x)
    closure($anonfun)
  }: ((Int, String) => String)
).apply(1) of class class dotty.tools.dotc.ast.Trees$Apply # 314430
exception while typing println(
  test1.g[Int](
    {
      def $anonfun(x: Int, s: String): String = s.+(x)
      closure($anonfun)
    }: ((Int, String) => String)
  ).apply(1)
) of class class dotty.tools.dotc.ast.Trees$Apply # 314431
exception while typing {
  println(
    test1.g[Int](
      {
        def $anonfun(x: Int, s: String): String = s.+(x)
        closure($anonfun)
      }: ((Int, String) => String)
    ).apply(1)
  )
  ()
} of class class dotty.tools.dotc.ast.Trees$Block # 314432
exception while typing def main(args: Array[String]): Unit = 
  {
    println(
      test1.g[Int](
        {
          def $anonfun(x: Int, s: String): String = s.+(x)
          closure($anonfun)
        }: ((Int, String) => String)
      ).apply(1)
    )
    ()
  } of class class dotty.tools.dotc.ast.Trees$DefDef # 314442
[========>                              ] completed (229/940, 24s)exception while typing @scala.annotation.internal.SourceFile(
  "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/t2913.scala"
) final module class test1() extends Object() { 
  case class Foo[T, T2](f: (T, T2) => String) extends Object() with (((Foo.this.T, Foo.this.T2)) => String) with Product
     
  { 
    @scala.annotation.unspecialized() def compose[A](g: A => (Foo.this.T, Foo.this.T2)): A => String = 
      super[Function1].compose[A](g)
    @scala.annotation.unspecialized() def andThen[A](g: String => A): ((Foo.this.T, Foo.this.T2)) => A = 
      super[Function1].andThen[A](g)
    override def toString(): String = super[Function1].toString()
    def productIterator: Iterator[Any] = super[Product].productIterator
    private type T
    private type T2
    <accessor> def f: (Foo.this.T, Foo.this.T2) => String
    def apply(t: Foo.this.T): Foo.this.T2 => String = 
      {
        def $anonfun(s: Foo.this.T2): String = Foo.this.f.apply(t, s)
        closure($anonfun)
      }
    def apply(p: (Foo.this.T, Foo.this.T2)): String = Foo.this.f.apply(p._1, p._2)
    def copy[T, T2](f: (T, T2) => String): test1.Foo[T, T2] = new test1.Foo[T, T2](f)
    def copy$default$1[T, T2]: (Foo.this.T, Foo.this.T2) => String = 
      Foo.this.f: => ((Foo.this.T, Foo.this.T2) => String)(Foo.this.f) @uncheckedVariance
    def _1: (Foo.this.T, Foo.this.T2) => String = this.f
    override def hashCode(): Int = 
      {
        val valify2: Int = scala.runtime.Statics#mix(678416733, scala.runtime.Statics#anyHash(Foo.this.f))
        scala.runtime.Statics#finalizeHash(valify2, 1)
      }
    override def equals(x$0: Any): Boolean = 
      this.eq(x$0.asInstanceOf[Object]).||(
        if x$0.$isInstanceOf$[test1.Foo[Foo.this.T, Foo.this.T2]] then 
          {
            case val x3: test1.Foo[Foo.this.T, Foo.this.T2] = x$0.asInstanceOf[test1.Foo[Foo.this.T, Foo.this.T2]]
            this.f.==(x3.f)
          }
         else 
          if x$0.$isInstanceOf$[Any] then 
            {
              x$0.asInstanceOf[Any]
              false
            }
           else throw new MatchError(x$0)
      )
    override def canEqual(that: Any): Boolean = that.isInstanceOf[test1.Foo[Foo.this.T, Foo.this.T2]]
    override def productArity: Int = 1
    override def productPrefix: String = "Foo"
    override def productElement(n: Int): Any = 
      if 0.==(n) then this._1 else throw new IndexOutOfBoundsException(n.toString())
  }
  final lazy module val Foo: test1.Foo = new test1.Foo()
  final module class Foo() extends Object() { 
    def apply[T, T2](f: (T, T2) => String): test1.Foo[T, T2] = new test1.Foo[T, T2](f)
    def unapply[T, T2](x$1: test1.Foo[T, T2]): test1.Foo[T, T2] = x$1
  }
  implicit def g[T](f: (T, String) => String): test1.Foo[T, String] = 
    {
      this.Foo
      new test1.Foo[T, String](f)
    }
  def main(args: Array[String]): Unit = 
    {
      println(
        test1.g[Int](
          {
            def $anonfun(x: Int, s: String): String = s.+(x)
            closure($anonfun)
          }: ((Int, String) => String)
        ).apply(1)
      )
      ()
    }
} of class class dotty.tools.dotc.ast.Trees$TypeDef # 314450
exception while typing package <empty> {
  @scala.annotation.internal.SourceFile(
    "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/t2913.scala"
  ) class A() extends Object() { 
    def foo(a: Int): Int = 0
  }
  @scala.annotation.internal.SourceFile(
    "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/t2913.scala"
  ) class RichA() extends Object() { 
    def foo(a: String): Int = 0
    def foo(a: String, b: String): Int = 0
    def foo(): Int = 0
  }
  final lazy module val TestNoAutoTupling: TestNoAutoTupling = new TestNoAutoTupling()
  @scala.annotation.internal.SourceFile(
    "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/t2913.scala"
  ) final module class TestNoAutoTupling() extends Object() { 
    implicit def AToRichA(a: A): RichA = new RichA()
    <accessor> def a: A = new A()
    TestNoAutoTupling.AToRichA(TestNoAutoTupling.a).foo()
    TestNoAutoTupling.a.foo(1)
    TestNoAutoTupling.AToRichA(TestNoAutoTupling.a).foo("")
    TestNoAutoTupling.AToRichA(TestNoAutoTupling.a).foo("a", "b")
  }
  final lazy module val test1: test1 = new test1()
  @scala.annotation.internal.SourceFile(
    "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/t2913.scala"
  ) final module class test1() extends Object() { 
    case class Foo[T, T2](f: (T, T2) => String) extends Object() with (((Foo.this.T, Foo.this.T2)) => String) with 
      Product
     { 
      @scala.annotation.unspecialized() def compose[A](g: A => (Foo.this.T, Foo.this.T2)): A => String = 
        super[Function1].compose[A](g)
      @scala.annotation.unspecialized() def andThen[A](g: String => A): ((Foo.this.T, Foo.this.T2)) => A = 
        super[Function1].andThen[A](g)
      override def toString(): String = super[Function1].toString()
      def productIterator: Iterator[Any] = super[Product].productIterator
      private type T
      private type T2
      <accessor> def f: (Foo.this.T, Foo.this.T2) => String
      def apply(t: Foo.this.T): Foo.this.T2 => String = 
        {
          def $anonfun(s: Foo.this.T2): String = Foo.this.f.apply(t, s)
          closure($anonfun)
        }
      def apply(p: (Foo.this.T, Foo.this.T2)): String = Foo.this.f.apply(p._1, p._2)
      def copy[T, T2](f: (T, T2) => String): test1.Foo[T, T2] = new test1.Foo[T, T2](f)
      def copy$default$1[T, T2]: (Foo.this.T, Foo.this.T2) => String = 
        Foo.this.f: => ((Foo.this.T, Foo.this.T2) => String)(Foo.this.f) @uncheckedVariance
      def _1: (Foo.this.T, Foo.this.T2) => String = this.f
      override def hashCode(): Int = 
        {
          val valify2: Int = scala.runtime.Statics#mix(678416733, scala.runtime.Statics#anyHash(Foo.this.f))
          scala.runtime.Statics#finalizeHash(valify2, 1)
        }
      override def equals(x$0: Any): Boolean = 
        this.eq(x$0.asInstanceOf[Object]).||(
          if x$0.$isInstanceOf$[test1.Foo[Foo.this.T, Foo.this.T2]] then 
            {
              case val x3: test1.Foo[Foo.this.T, Foo.this.T2] = x$0.asInstanceOf[test1.Foo[Foo.this.T, Foo.this.T2]]
              this.f.==(x3.f)
            }
           else 
            if x$0.$isInstanceOf$[Any] then 
              {
                x$0.asInstanceOf[Any]
                false
              }
             else throw new MatchError(x$0)
        )
      override def canEqual(that: Any): Boolean = that.isInstanceOf[test1.Foo[Foo.this.T, Foo.this.T2]]
      override def productArity: Int = 1
      override def productPrefix: String = "Foo"
      override def productElement(n: Int): Any = 
        if 0.==(n) then this._1 else throw new IndexOutOfBoundsException(n.toString())
    }
    final lazy module val Foo: test1.Foo = new test1.Foo()
    final module class Foo() extends Object() { 
      def apply[T, T2](f: (T, T2) => String): test1.Foo[T, T2] = new test1.Foo[T, T2](f)
      def unapply[T, T2](x$1: test1.Foo[T, T2]): test1.Foo[T, T2] = x$1
    }
    implicit def g[T](f: (T, String) => String): test1.Foo[T, String] = 
      {
        this.Foo
        new test1.Foo[T, String](f)
      }
    def main(args: Array[String]): Unit = 
      {
        println(
          test1.g[Int](
            {
              def $anonfun(x: Int, s: String): String = s.+(x)
              closure($anonfun)
            }: ((Int, String) => String)
          ).apply(1)
        )
        ()
      }
  }
  final lazy module val Main: Main = new Main()
  @scala.annotation.internal.SourceFile(
    "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/t2913.scala"
  ) final module class Main() extends Object() { 
    def main(args: Array[String]): Unit = 
      {
        implicit def fx[T](f: (T, String) => String): T => String = 
          {
            def $anonfun(x: T): String = f.apply(x, null)
            closure($anonfun)
          }
        println(
          fx[Int](
            {
              def $anonfun(a: Int, str: String): String = "a: ".+(a).+(", str: ").+(str)
              closure($anonfun)
            }: ((Int, String) => String)
          ).apply(1)
        )
        ()
      }
  }
  final lazy module val TestWithAutoTupling: TestWithAutoTupling = new TestWithAutoTupling()
  @scala.annotation.internal.SourceFile(
    "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/t2913.scala"
  ) final module class TestWithAutoTupling() extends Object() { 
    implicit def AToRichA(a: A): RichA = new RichA()
    <accessor> def a: A = new A()
    TestWithAutoTupling.AToRichA(TestWithAutoTupling.a).foo()
    TestWithAutoTupling.a.foo(1)
    TestWithAutoTupling.AToRichA(TestWithAutoTupling.a).foo("")
    TestWithAutoTupling.AToRichA(TestWithAutoTupling.a).foo("a", "b")
  }
} of class class dotty.tools.dotc.ast.Trees$PackageDef # 314547
*** error while checking /mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/t2913.scala after phase arrayConstructors ***
[========>                              ] completed (230/940, 24s)[========>                              ] completed (232/940, 24s)[========>                              ] completed (232/940, 24s)[========>                              ] completed (233/940, 24s)[=========>                             ] completed (236/940, 25s)[=========>                             ] completed (237/940, 25s)[=========>                             ] completed (238/940, 25s)inlining <empty>
inlining <empty>
[=========>                             ] completed (239/940, 25s)[=========>                             ] completed (239/940, 25s)[=========>                             ] completed (239/940, 25s)[=========>                             ] completed (240/940, 25s)[=========>                             ] completed (243/940, 25s)[=========>                             ] completed (243/940, 25s)[=========>                             ] completed (244/940, 25s)[=========>                             ] completed (246/940, 26s)[=========>                             ] completed (246/940, 26s)[=========>                             ] completed (248/940, 26s)[=========>                             ] completed (248/940, 26s)[=========>                             ] completed (249/940, 26s)[=========>                             ] completed (250/940, 26s)[=========>                             ] completed (251/940, 26s)[=========>                             ] completed (252/940, 26s)[=========>                             ] completed (254/940, 26s)[=========>                             ] completed (255/940, 26s)[=========>                             ] completed (255/940, 27s)[=========>                             ] completed (257/940, 27s)[=========>                             ] completed (258/940, 27s)[=========>                             ] completed (258/940, 27s)[==========>                            ] completed (259/940, 27s)[==========>                            ] completed (261/940, 27s)[==========>                            ] completed (261/940, 27s)[==========>                            ] completed (262/940, 27s)[==========>                            ] completed (263/940, 27s)[==========>                            ] completed (263/940, 28s)[==========>                            ] completed (263/940, 28s)[==========>                            ] completed (263/940, 28s)[==========>                            ] completed (266/940, 28s)[==========>                            ] completed (266/940, 28s)[==========>                            ] completed (266/940, 28s)[==========>                            ] completed (267/940, 28s)[==========>                            ] completed (267/940, 28s)[==========>                            ] completed (267/940, 28s)[==========>                            ] completed (267/940, 28s)[==========>                            ] completed (268/940, 29s)[==========>                            ] completed (268/940, 29s)[==========>                            ] completed (268/940, 29s)[==========>                            ] completed (271/940, 29s)[==========>                            ] completed (271/940, 29s)[==========>                            ] completed (271/940, 29s)[==========>                            ] completed (272/940, 29s)[==========>                            ] completed (274/940, 29s)[==========>                            ] completed (274/940, 29s)[==========>                            ] completed (274/940, 29s)[==========>                            ] completed (274/940, 30s)[==========>                            ] completed (275/940, 30s)[==========>                            ] completed (277/940, 30s)[==========>                            ] completed (277/940, 30s)[==========>                            ] completed (277/940, 30s)[==========>                            ] completed (278/940, 30s)[==========>                            ] completed (279/940, 30s)[==========>                            ] completed (279/940, 30s)[==========>                            ] completed (279/940, 30s)[==========>                            ] completed (281/940, 30s)[===========>                           ] completed (282/940, 31s)[===========>                           ] completed (283/940, 31s)[===========>                           ] completed (285/940, 31s)[===========>                           ] completed (285/940, 31s)inlining <empty>
inlining <empty>
[===========>                           ] completed (285/940, 31s)[===========>                           ] completed (285/940, 31s)[===========>                           ] completed (286/940, 31s)[===========>                           ] completed (288/940, 31s)[===========>                           ] completed (289/940, 31s)[===========>                           ] completed (290/940, 31s)[===========>                           ] completed (290/940, 32s)[===========>                           ] completed (292/940, 32s)[===========>                           ] completed (293/940, 32s)[===========>                           ] completed (294/940, 32s)[===========>                           ] completed (295/940, 32s)[===========>                           ] completed (295/940, 32s)[===========>                           ] completed (297/940, 32s)[===========>                           ] completed (297/940, 32s)[===========>                           ] completed (297/940, 32s)[===========>                           ] completed (300/940, 32s)[===========>                           ] completed (301/940, 33s)[===========>                           ] completed (301/940, 33s)[===========>                           ] completed (301/940, 33s)[===========>                           ] completed (303/940, 33s)[===========>                           ] completed (304/940, 33s)[===========>                           ] completed (305/940, 33s)[============>                          ] completed (306/940, 33s)[============>                          ] completed (307/940, 33s)[============>                          ] completed (308/940, 33s)[============>                          ] completed (308/940, 33s)[============>                          ] completed (311/940, 34s)[============>                          ] completed (311/940, 34s)[============>                          ] completed (312/940, 34s)[============>                          ] completed (313/940, 34s)[============>                          ] completed (313/940, 34s)[============>                          ] completed (314/940, 34s)[============>                          ] completed (316/940, 34s)[============>                          ] completed (318/940, 34s)[============>                          ] completed (319/940, 34s)[============>                          ] completed (319/940, 34s)[============>                          ] completed (319/940, 35s)[============>                          ] completed (320/940, 35s)[============>                          ] completed (322/940, 35s)[============>                          ] completed (322/940, 35s)[============>                          ] completed (324/940, 35s)[============>                          ] completed (326/940, 35s)[============>                          ] completed (328/940, 35s)[=============>                         ] completed (329/940, 35s)[=============>                         ] completed (331/940, 35s)[=============>                         ] completed (332/940, 35s)[=============>                         ] completed (333/940, 36s)[=============>                         ] completed (334/940, 36s)[=============>                         ] completed (337/940, 36s)[=============>                         ] completed (338/940, 36s)[=============>                         ] completed (341/940, 36s)[=============>                         ] completed (342/940, 36s)[=============>                         ] completed (343/940, 36s)inlining 1.+(e)
[=============>                         ] completed (345/940, 36s)[=============>                         ] completed (346/940, 36s)[=============>                         ] completed (347/940, 37s)[=============>                         ] completed (349/940, 37s)[=============>                         ] completed (349/940, 37s)inlining <empty>
inlining <empty>
[=============>                         ] completed (349/940, 37s)[=============>                         ] completed (351/940, 37s)[=============>                         ] completed (352/940, 37s)[==============>                        ] completed (354/940, 37s)[==============>                        ] completed (354/940, 37s)[==============>                        ] completed (355/940, 37s)[==============>                        ] completed (357/940, 37s)[==============>                        ] completed (358/940, 38s)[==============>                        ] completed (359/940, 38s)[==============>                        ] completed (360/940, 38s)[==============>                        ] completed (362/940, 38s)[==============>                        ] completed (362/940, 38s)[==============>                        ] completed (363/940, 38s)[==============>                        ] completed (366/940, 38s)[==============>                        ] completed (366/940, 38s)[==============>                        ] completed (368/940, 38s)[==============>                        ] completed (369/940, 38s)[==============>                        ] completed (370/940, 39s)[==============>                        ] completed (371/940, 39s)[==============>                        ] completed (371/940, 39s)[==============>                        ] completed (373/940, 39s)[==============>                        ] completed (374/940, 39s)[==============>                        ] completed (374/940, 39s)[==============>                        ] completed (375/940, 39s)[===============>                       ] completed (377/940, 39s)[===============>                       ] completed (377/940, 39s)[===============>                       ] completed (378/940, 39s)[===============>                       ] completed (380/940, 40s)[===============>                       ] completed (380/940, 40s)[===============>                       ] completed (382/940, 40s)[===============>                       ] completed (382/940, 40s)[===============>                       ] completed (382/940, 40s)[===============>                       ] completed (382/940, 40s)[===============>                       ] completed (384/940, 40s)[===============>                       ] completed (385/940, 40s)[===============>                       ] completed (385/940, 40s)[===============>                       ] completed (387/940, 40s)[===============>                       ] completed (387/940, 41s)[===============>                       ] completed (389/940, 41s)[===============>                       ] completed (390/940, 41s)[===============>                       ] completed (392/940, 41s)[===============>                       ] completed (393/940, 41s)[===============>                       ] completed (395/940, 41s)[===============>                       ] completed (396/940, 41s)[===============>                       ] completed (396/940, 41s)[===============>                       ] completed (398/940, 41s)[===============>                       ] completed (398/940, 41s)[================>                      ] completed (400/940, 42s)[================>                      ] completed (400/940, 42s)[================>                      ] completed (402/940, 42s)[================>                      ] completed (402/940, 42s)[================>                      ] completed (402/940, 42s)[================>                      ] completed (405/940, 42s)[================>                      ] completed (405/940, 42s)inlining {
  def $anonfun(a: Int, str: String): String = "a: ".+(a).+(", str: ").+(str)
  closure($anonfun)
}
exception while typing {
  def $anonfun(a: Int, str: String): String = "a: ".+(a).+(", str: ").+(str)
  closure($anonfun)
} of class class dotty.tools.dotc.ast.Trees$Block # 586022
exception while typing {
  def $anonfun(a: Int, str: String): String = "a: ".+(a).+(", str: ").+(str)
  closure($anonfun)
}: ((Int, String) => String) of class class dotty.tools.dotc.ast.Trees$Typed # 586024
exception while typing fx[Int](
  {
    def $anonfun(a: Int, str: String): String = "a: ".+(a).+(", str: ").+(str)
    closure($anonfun)
  }: ((Int, String) => String)
) of class class dotty.tools.dotc.ast.Trees$Apply # 586025
exception while typing fx[Int](
  {
    def $anonfun(a: Int, str: String): String = "a: ".+(a).+(", str: ").+(str)
    closure($anonfun)
  }: ((Int, String) => String)
).apply of class class dotty.tools.dotc.ast.Trees$Select # 586026
exception while typing fx[Int](
  {
    def $anonfun(a: Int, str: String): String = "a: ".+(a).+(", str: ").+(str)
    closure($anonfun)
  }: ((Int, String) => String)
).apply(1) of class class dotty.tools.dotc.ast.Trees$Apply # 586027
exception while typing println(
  fx[Int](
    {
      def $anonfun(a: Int, str: String): String = "a: ".+(a).+(", str: ").+(str)
      closure($anonfun)
    }: ((Int, String) => String)
  ).apply(1)
) of class class dotty.tools.dotc.ast.Trees$Apply # 586028
exception while typing {
  implicit def fx[T](f: (T, String) => String): T => String = 
    {
      def $anonfun(x: T): String = f.apply(x, null)
      closure($anonfun)
    }
  println(
    fx[Int](
      {
        def $anonfun(a: Int, str: String): String = "a: ".+(a).+(", str: ").+(str)
        closure($anonfun)
      }: ((Int, String) => String)
    ).apply(1)
  )
  ()
} of class class dotty.tools.dotc.ast.Trees$Block # 586029
exception while typing def main(args: Array[String]): Unit = 
  {
    implicit def fx[T](f: (T, String) => String): T => String = 
      {
        def $anonfun(x: T): String = f.apply(x, null)
        closure($anonfun)
      }
    println(
      fx[Int](
        {
          def $anonfun(a: Int, str: String): String = "a: ".+(a).+(", str: ").+(str)
          closure($anonfun)
        }: ((Int, String) => String)
      ).apply(1)
    )
    ()
  } of class class dotty.tools.dotc.ast.Trees$DefDef # 586068
exception while typing @scala.annotation.internal.SourceFile(
  "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/t0872.scala"
) final module class Main() extends Object() { 
  def main(args: Array[String]): Unit = 
    {
      implicit def fx[T](f: (T, String) => String): T => String = 
        {
          def $anonfun(x: T): String = f.apply(x, null)
          closure($anonfun)
        }
      println(
        fx[Int](
          {
            def $anonfun(a: Int, str: String): String = "a: ".+(a).+(", str: ").+(str)
            closure($anonfun)
          }: ((Int, String) => String)
        ).apply(1)
      )
      ()
    }
} of class class dotty.tools.dotc.ast.Trees$TypeDef # 586070
exception while typing package <empty> {
  final lazy module val Main: Main = new Main()
  @scala.annotation.internal.SourceFile(
    "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/t0872.scala"
  ) final module class Main() extends Object() { 
    def main(args: Array[String]): Unit = 
      {
        implicit def fx[T](f: (T, String) => String): T => String = 
          {
            def $anonfun(x: T): String = f.apply(x, null)
            closure($anonfun)
          }
        println(
          fx[Int](
            {
              def $anonfun(a: Int, str: String): String = "a: ".+(a).+(", str: ").+(str)
              closure($anonfun)
            }: ((Int, String) => String)
          ).apply(1)
        )
        ()
      }
  }
} of class class dotty.tools.dotc.ast.Trees$PackageDef # 586071
*** error while checking /mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/t0872.scala after phase arrayConstructors ***
[================>                      ] completed (406/940, 42s)inlining {
  def $anonfun(x: Int, s: String): String = s.+(x)
  closure($anonfun)
}
exception while typing {
  def $anonfun(x: Int, s: String): String = s.+(x)
  closure($anonfun)
} of class class dotty.tools.dotc.ast.Trees$Block # 587016
exception while typing {
  def $anonfun(x: Int, s: String): String = s.+(x)
  closure($anonfun)
}: ((Int, String) => String) of class class dotty.tools.dotc.ast.Trees$Typed # 587019
exception while typing test.test1.g[Int](
  {
    def $anonfun(x: Int, s: String): String = s.+(x)
    closure($anonfun)
  }: ((Int, String) => String)
) of class class dotty.tools.dotc.ast.Trees$Apply # 587020
exception while typing test.test1.g[Int](
  {
    def $anonfun(x: Int, s: String): String = s.+(x)
    closure($anonfun)
  }: ((Int, String) => String)
).apply of class class dotty.tools.dotc.ast.Trees$Select # 587021
exception while typing test.test1.g[Int](
  {
    def $anonfun(x: Int, s: String): String = s.+(x)
    closure($anonfun)
  }: ((Int, String) => String)
).apply(1) of class class dotty.tools.dotc.ast.Trees$Apply # 587022
exception while typing println(
  test.test1.g[Int](
    {
      def $anonfun(x: Int, s: String): String = s.+(x)
      closure($anonfun)
    }: ((Int, String) => String)
  ).apply(1)
) of class class dotty.tools.dotc.ast.Trees$Apply # 587023
exception while typing {
  println(
    test.test1.g[Int](
      {
        def $anonfun(x: Int, s: String): String = s.+(x)
        closure($anonfun)
      }: ((Int, String) => String)
    ).apply(1)
  )
  ()
} of class class dotty.tools.dotc.ast.Trees$Block # 587024
exception while typing def main(args: Array[String]): Unit = 
  {
    println(
      test.test1.g[Int](
        {
          def $anonfun(x: Int, s: String): String = s.+(x)
          closure($anonfun)
        }: ((Int, String) => String)
      ).apply(1)
    )
    ()
  } of class class dotty.tools.dotc.ast.Trees$DefDef # 587043
exception while typing @scala.annotation.internal.SourceFile(
  "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/t0851.scala"
) final module class test1() extends Object() { 
  case class Foo[T, T2](f: (T, T2) => String) extends Object() with (((Foo.this.T, Foo.this.T2)) => String) with Product
     
  { 
    @scala.annotation.unspecialized() def compose[A](g: A => (Foo.this.T, Foo.this.T2)): A => String = 
      super[Function1].compose[A](g)
    @scala.annotation.unspecialized() def andThen[A](g: String => A): ((Foo.this.T, Foo.this.T2)) => A = 
      super[Function1].andThen[A](g)
    override def toString(): String = super[Function1].toString()
    def productIterator: Iterator[Any] = super[Product].productIterator
    private type T
    private type T2
    <accessor> def f: (Foo.this.T, Foo.this.T2) => String
    def apply(t: Foo.this.T): Foo.this.T2 => String = 
      {
        def $anonfun(s: Foo.this.T2): String = Foo.this.f.apply(t, s)
        closure($anonfun)
      }
    def apply(p: (Foo.this.T, Foo.this.T2)): String = Foo.this.f.apply(p._1, p._2)
    def copy[T, T2](f: (T, T2) => String): test.test1.Foo[T, T2] = new test.test1.Foo[T, T2](f)
    def copy$default$1[T, T2]: (Foo.this.T, Foo.this.T2) => String = 
      Foo.this.f: => ((Foo.this.T, Foo.this.T2) => String)(Foo.this.f) @uncheckedVariance
    def _1: (Foo.this.T, Foo.this.T2) => String = this.f
    override def hashCode(): Int = 
      {
        val valify2: Int = scala.runtime.Statics#mix(1590656057, scala.runtime.Statics#anyHash(Foo.this.f))
        scala.runtime.Statics#finalizeHash(valify2, 1)
      }
    override def equals(x$0: Any): Boolean = 
      this.eq(x$0.asInstanceOf[Object]).||(
        if x$0.$isInstanceOf$[test.test1.Foo[Foo.this.T, Foo.this.T2]] then 
          {
            case val x3: test.test1.Foo[Foo.this.T, Foo.this.T2] = 
              x$0.asInstanceOf[test.test1.Foo[Foo.this.T, Foo.this.T2]]
            this.f.==(x3.f)
          }
         else 
          if x$0.$isInstanceOf$[Any] then 
            {
              x$0.asInstanceOf[Any]
              false
            }
           else throw new MatchError(x$0)
      )
    override def canEqual(that: Any): Boolean = that.isInstanceOf[test.test1.Foo[Foo.this.T, Foo.this.T2]]
    override def productArity: Int = 1
    override def productPrefix: String = "Foo"
    override def productElement(n: Int): Any = 
      if 0.==(n) then this._1 else throw new IndexOutOfBoundsException(n.toString())
  }
  final lazy module val Foo: test.test1.Foo = new test.test1.Foo()
  final module class Foo() extends Object() { 
    def apply[T, T2](f: (T, T2) => String): test.test1.Foo[T, T2] = new test.test1.Foo[T, T2](f)
    def unapply[T, T2](x$1: test.test1.Foo[T, T2]): test.test1.Foo[T, T2] = x$1
  }
  implicit def g[T](f: (T, String) => String): test.test1.Foo[T, String] = 
    {
      this.Foo
      new test.test1.Foo[T, String](f)
    }
  def main(args: Array[String]): Unit = 
    {
      println(
        test.test1.g[Int](
          {
            def $anonfun(x: Int, s: String): String = s.+(x)
            closure($anonfun)
          }: ((Int, String) => String)
        ).apply(1)
      )
      ()
    }
} of class class dotty.tools.dotc.ast.Trees$TypeDef # 587048
exception while typing package test {
  final lazy module val test1: test.test1 = new test.test1()
  @scala.annotation.internal.SourceFile(
    "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/t0851.scala"
  ) final module class test1() extends Object() { 
    case class Foo[T, T2](f: (T, T2) => String) extends Object() with (((Foo.this.T, Foo.this.T2)) => String) with 
      Product
     { 
      @scala.annotation.unspecialized() def compose[A](g: A => (Foo.this.T, Foo.this.T2)): A => String = 
        super[Function1].compose[A](g)
      @scala.annotation.unspecialized() def andThen[A](g: String => A): ((Foo.this.T, Foo.this.T2)) => A = 
        super[Function1].andThen[A](g)
      override def toString(): String = super[Function1].toString()
      def productIterator: Iterator[Any] = super[Product].productIterator
      private type T
      private type T2
      <accessor> def f: (Foo.this.T, Foo.this.T2) => String
      def apply(t: Foo.this.T): Foo.this.T2 => String = 
        {
          def $anonfun(s: Foo.this.T2): String = Foo.this.f.apply(t, s)
          closure($anonfun)
        }
      def apply(p: (Foo.this.T, Foo.this.T2)): String = Foo.this.f.apply(p._1, p._2)
      def copy[T, T2](f: (T, T2) => String): test.test1.Foo[T, T2] = new test.test1.Foo[T, T2](f)
      def copy$default$1[T, T2]: (Foo.this.T, Foo.this.T2) => String = 
        Foo.this.f: => ((Foo.this.T, Foo.this.T2) => String)(Foo.this.f) @uncheckedVariance
      def _1: (Foo.this.T, Foo.this.T2) => String = this.f
      override def hashCode(): Int = 
        {
          val valify2: Int = scala.runtime.Statics#mix(1590656057, scala.runtime.Statics#anyHash(Foo.this.f))
          scala.runtime.Statics#finalizeHash(valify2, 1)
        }
      override def equals(x$0: Any): Boolean = 
        this.eq(x$0.asInstanceOf[Object]).||(
          if x$0.$isInstanceOf$[test.test1.Foo[Foo.this.T, Foo.this.T2]] then 
            {
              case val x3: test.test1.Foo[Foo.this.T, Foo.this.T2] = 
                x$0.asInstanceOf[test.test1.Foo[Foo.this.T, Foo.this.T2]]
              this.f.==(x3.f)
            }
           else 
            if x$0.$isInstanceOf$[Any] then 
              {
                x$0.asInstanceOf[Any]
                false
              }
             else throw new MatchError(x$0)
        )
      override def canEqual(that: Any): Boolean = that.isInstanceOf[test.test1.Foo[Foo.this.T, Foo.this.T2]]
      override def productArity: Int = 1
      override def productPrefix: String = "Foo"
      override def productElement(n: Int): Any = 
        if 0.==(n) then this._1 else throw new IndexOutOfBoundsException(n.toString())
    }
    final lazy module val Foo: test.test1.Foo = new test.test1.Foo()
    final module class Foo() extends Object() { 
      def apply[T, T2](f: (T, T2) => String): test.test1.Foo[T, T2] = new test.test1.Foo[T, T2](f)
      def unapply[T, T2](x$1: test.test1.Foo[T, T2]): test.test1.Foo[T, T2] = x$1
    }
    implicit def g[T](f: (T, String) => String): test.test1.Foo[T, String] = 
      {
        this.Foo
        new test.test1.Foo[T, String](f)
      }
    def main(args: Array[String]): Unit = 
      {
        println(
          test.test1.g[Int](
            {
              def $anonfun(x: Int, s: String): String = s.+(x)
              closure($anonfun)
            }: ((Int, String) => String)
          ).apply(1)
        )
        ()
      }
  }
} of class class dotty.tools.dotc.ast.Trees$PackageDef # 587049
*** error while checking /mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/t0851.scala after phase arrayConstructors ***
[================>                      ] completed (408/940, 42s)[================>                      ] completed (408/940, 42s)[================>                      ] completed (410/940, 43s)[================>                      ] completed (412/940, 43s)[================>                      ] completed (413/940, 43s)[================>                      ] completed (414/940, 43s)[================>                      ] completed (415/940, 43s)[================>                      ] completed (417/940, 43s)[================>                      ] completed (418/940, 43s)[================>                      ] completed (419/940, 43s)[================>                      ] completed (421/940, 43s)[================>                      ] completed (422/940, 44s)[=================>                     ] completed (423/940, 44s)[=================>                     ] completed (423/940, 44s)[=================>                     ] completed (426/940, 44s)[=================>                     ] completed (426/940, 44s)[=================>                     ] completed (427/940, 44s)inlining x10.head
inlining x6
[=================>                     ] completed (428/940, 44s)exception while typing case val x5: => ParseResult[nt.Output](nt.parse) = (x10.head: Nonterminal[_ <: Nonterminal.this.Output]).parse of class class dotty.tools.dotc.ast.Trees$ValDef # 608353
exception while typing {
  case val x5: => ParseResult[nt.Output](nt.parse) = (x10.head: Nonterminal[_ <: Nonterminal.this.Output]).parse
  if x5.$isInstanceOf$[Success[nt.Output]] then 
    {
      case val x6: Success[nt.Output] = x5.asInstanceOf[Success[nt.Output]]
      case val x8: nt.Output = (x6: Success[nt.Output])._1
      new Success[nt.Output](x8)
    }
   else throw new MatchError(x5)
} of class class dotty.tools.dotc.ast.Trees$Block # 608360
exception while typing {
  case val x5: => ParseResult[nt.Output](nt.parse) = (x10.head: Nonterminal[_ <: Nonterminal.this.Output]).parse
  (if x5.$isInstanceOf$[Success[nt.Output]] then 
    {
      case val x6: Success[nt.Output] = x5.asInstanceOf[Success[nt.Output]]
      case val x8: nt.Output = (x6: Success[nt.Output])._1
      new Success[nt.Output](x8)
    }
   else throw new MatchError(x5))
}: ParseResult[Nonterminal.this.Output] of class class dotty.tools.dotc.ast.Trees$Typed # 608361
exception while typing {
  case val x10: ::[Nonterminal[_ <: Nonterminal.this.Output]] = 
    nts.asInstanceOf[::[Nonterminal[_ <: Nonterminal.this.Output]]]
  {
    case val x5: => ParseResult[nt.Output](nt.parse) = (x10.head: Nonterminal[_ <: Nonterminal.this.Output]).parse
    (if x5.$isInstanceOf$[Success[nt.Output]] then 
      {
        case val x6: Success[nt.Output] = x5.asInstanceOf[Success[nt.Output]]
        case val x8: nt.Output = (x6: Success[nt.Output])._1
        new Success[nt.Output](x8)
      }
     else throw new MatchError(x5))
  }: ParseResult[Nonterminal.this.Output]
} of class class dotty.tools.dotc.ast.Trees$Block # 608362
exception while typing if nts.$isInstanceOf$[::[Nonterminal[_ <: Nonterminal.this.Output]]] then 
  {
    case val x10: ::[Nonterminal[_ <: Nonterminal.this.Output]] = 
      nts.asInstanceOf[::[Nonterminal[_ <: Nonterminal.this.Output]]]
    {
      case val x5: => ParseResult[nt.Output](nt.parse) = (x10.head: Nonterminal[_ <: Nonterminal.this.Output]).parse
      (if x5.$isInstanceOf$[Success[nt.Output]] then 
        {
          case val x6: Success[nt.Output] = x5.asInstanceOf[Success[nt.Output]]
          case val x8: nt.Output = (x6: Success[nt.Output])._1
          new Success[nt.Output](x8)
        }
       else throw new MatchError(x5))
    }: ParseResult[Nonterminal.this.Output]
  }
 else if Nil.==(nts) then throw new Error() else throw new MatchError(nts) of class class dotty.tools.dotc.ast.Trees$If # 608363
exception while typing def parse1(nts: List[Nonterminal.this.SubNonterminal]): ParseResult[Nonterminal.this.Output] = 
  if nts.$isInstanceOf$[::[Nonterminal[_ <: Nonterminal.this.Output]]] then 
    {
      case val x10: ::[Nonterminal[_ <: Nonterminal.this.Output]] = 
        nts.asInstanceOf[::[Nonterminal[_ <: Nonterminal.this.Output]]]
      {
        case val x5: => ParseResult[nt.Output](nt.parse) = (x10.head: Nonterminal[_ <: Nonterminal.this.Output]).parse
        (if x5.$isInstanceOf$[Success[nt.Output]] then 
          {
            case val x6: Success[nt.Output] = x5.asInstanceOf[Success[nt.Output]]
            case val x8: nt.Output = (x6: Success[nt.Output])._1
            new Success[nt.Output](x8)
          }
         else throw new MatchError(x5))
      }: ParseResult[Nonterminal.this.Output]
    }
   else if Nil.==(nts) then throw new Error() else throw new MatchError(nts) of class class dotty.tools.dotc.ast.Trees$DefDef # 608369
[=================>                     ] completed (428/940, 44s)exception while typing @scala.annotation.internal.SourceFile(
  "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/t0095.scala"
) abstract class Nonterminal[Output]() extends Object() { 
  private type Output
  type SubNonterminal = Nonterminal[_ <: Nonterminal.this.Output]
  def parse: ParseResult[Nonterminal.this.Output]
  def parse1(nts: List[Nonterminal.this.SubNonterminal]): ParseResult[Nonterminal.this.Output] = 
    if nts.$isInstanceOf$[::[Nonterminal[_ <: Nonterminal.this.Output]]] then 
      {
        case val x10: ::[Nonterminal[_ <: Nonterminal.this.Output]] = 
          nts.asInstanceOf[::[Nonterminal[_ <: Nonterminal.this.Output]]]
        {
          case val x5: => ParseResult[nt.Output](nt.parse) = (x10.head: Nonterminal[_ <: Nonterminal.this.Output]).parse
          (if x5.$isInstanceOf$[Success[nt.Output]] then 
            {
              case val x6: Success[nt.Output] = x5.asInstanceOf[Success[nt.Output]]
              case val x8: nt.Output = (x6: Success[nt.Output])._1
              new Success[nt.Output](x8)
            }
           else throw new MatchError(x5))
        }: ParseResult[Nonterminal.this.Output]
      }
     else if Nil.==(nts) then throw new Error() else throw new MatchError(nts)
} of class class dotty.tools.dotc.ast.Trees$TypeDef # 608371
exception while typing package <empty> {
  @scala.annotation.internal.SourceFile(
    "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/t0095.scala"
  ) class ParseResult[T]() extends Object() { 
    private type +T
  }
  @scala.annotation.internal.SourceFile(
    "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/t0095.scala"
  ) case class Success[T](t: T) extends ParseResult[Success.this.T]() with Product { 
    def productIterator: Iterator[Any] = super[Product].productIterator
    private type +T
    <accessor> def t: Success.this.T
    def copy[T](t: T): Success[T] = new Success[T](t)
    def copy$default$1[T]: Success.this.T = Success.this.t: => Success.this.T(Success.this.t) @uncheckedVariance
    def _1: Success.this.T = this.t
    override def hashCode(): Int = 
      {
        val valify2: Int = scala.runtime.Statics#mix(-202516509, scala.runtime.Statics#anyHash(Success.this.t))
        scala.runtime.Statics#finalizeHash(valify2, 1)
      }
    override def equals(x$0: Any): Boolean = 
      this.eq(x$0.asInstanceOf[Object]).||(
        if x$0.$isInstanceOf$[Success[Success.this.T]] then 
          {
            case val x3: Success[Success.this.T] = x$0.asInstanceOf[Success[Success.this.T]]
            this.t.==(x3.t)
          }
         else 
          if x$0.$isInstanceOf$[Any] then 
            {
              x$0.asInstanceOf[Any]
              false
            }
           else throw new MatchError(x$0)
      )
    override def toString(): String = scala.runtime.ScalaRunTime._toString(this)
    override def canEqual(that: Any): Boolean = that.isInstanceOf[Success[Success.this.T]]
    override def productArity: Int = 1
    override def productPrefix: String = "Success"
    override def productElement(n: Int): Any = 
      if 0.==(n) then this._1 else throw new IndexOutOfBoundsException(n.toString())
  }
  final lazy module val Success: Success = new Success()
  @scala.annotation.internal.SourceFile(
    "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/t0095.scala"
  ) final module class Success() extends Object() { 
    def apply[T](t: T): Success[T] = new Success[T](t)
    def unapply[T](x$1: Success[T]): Success[T] = x$1
  }
  @scala.annotation.internal.SourceFile(
    "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/t0095.scala"
  ) abstract class Nonterminal[Output]() extends Object() { 
    private type Output
    type SubNonterminal = Nonterminal[_ <: Nonterminal.this.Output]
    def parse: ParseResult[Nonterminal.this.Output]
    def parse1(nts: List[Nonterminal.this.SubNonterminal]): ParseResult[Nonterminal.this.Output] = 
      if nts.$isInstanceOf$[::[Nonterminal[_ <: Nonterminal.this.Output]]] then 
        {
          case val x10: ::[Nonterminal[_ <: Nonterminal.this.Output]] = 
            nts.asInstanceOf[::[Nonterminal[_ <: Nonterminal.this.Output]]]
          {
            case val x5: => ParseResult[nt.Output](nt.parse) = 
              (x10.head: Nonterminal[_ <: Nonterminal.this.Output]).parse
            (if x5.$isInstanceOf$[Success[nt.Output]] then 
              {
                case val x6: Success[nt.Output] = x5.asInstanceOf[Success[nt.Output]]
                case val x8: nt.Output = (x6: Success[nt.Output])._1
                new Success[nt.Output](x8)
              }
             else throw new MatchError(x5))
          }: ParseResult[Nonterminal.this.Output]
        }
       else if Nil.==(nts) then throw new Error() else throw new MatchError(nts)
  }
} of class class dotty.tools.dotc.ast.Trees$PackageDef # 608372
*** error while checking /mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/t0095.scala after phase arrayConstructors ***
[=================>                     ] completed (429/940, 44s)[=================>                     ] completed (430/940, 44s)[=================>                     ] completed (430/940, 45s)[=================>                     ] completed (432/940, 45s)[=================>                     ] completed (433/940, 45s)[=================>                     ] completed (435/940, 45s)[=================>                     ] completed (436/940, 45s)[=================>                     ] completed (436/940, 45s)[=================>                     ] completed (438/940, 45s)[=================>                     ] completed (439/940, 45s)[=================>                     ] completed (439/940, 45s)[=================>                     ] completed (441/940, 45s)[=================>                     ] completed (442/940, 46s)[=================>                     ] completed (444/940, 46s)[=================>                     ] completed (446/940, 46s)[=================>                     ] completed (446/940, 46s)[==================>                    ] completed (448/940, 46s)[==================>                    ] completed (449/940, 46s)[==================>                    ] completed (450/940, 46s)[==================>                    ] completed (451/940, 46s)[==================>                    ] completed (452/940, 46s)[==================>                    ] completed (454/940, 46s)[==================>                    ] completed (454/940, 47s)[==================>                    ] completed (458/940, 47s)[==================>                    ] completed (458/940, 47s)[==================>                    ] completed (458/940, 47s)[==================>                    ] completed (460/940, 47s)[==================>                    ] completed (461/940, 47s)[==================>                    ] completed (462/940, 47s)[==================>                    ] completed (462/940, 47s)[==================>                    ] completed (462/940, 47s)exception while typing {
  case val x1: Array[Int] @unchecked = Array.apply(1, Predef.wrapIntArray([2 : Int])): Array[Int] @unchecked
  def case1(): (Int, Int) = throw new MatchError(x1)
  if x1.ne(null) then 
    {
      case val x2: Option[IndexedSeq[Int]] = Array.unapplySeq[Int](x1)
      if x2.isEmpty then case1() else 
        {
          case val x3: IndexedSeq[Int] = x2.get
          if x3.lengthCompare(2).==(0) then 
            {
              x3.apply(0)
              x3.apply(1)
              ()
            }
           else case1()
        }
    }
   else case1()
  ()
} of class class dotty.tools.dotc.ast.Trees$Block # 651657
exception while typing def $anonfun(i: Int): Unit = 
  {
    case val x1: Array[Int] @unchecked = Array.apply(1, Predef.wrapIntArray([2 : Int])): Array[Int] @unchecked
    def case1(): (Int, Int) = throw new MatchError(x1)
    if x1.ne(null) then 
      {
        case val x2: Option[IndexedSeq[Int]] = Array.unapplySeq[Int](x1)
        if x2.isEmpty then case1() else 
          {
            case val x3: IndexedSeq[Int] = x2.get
            if x3.lengthCompare(2).==(0) then 
              {
                x3.apply(0)
                x3.apply(1)
                ()
              }
             else case1()
          }
      }
     else case1()
    ()
  } of class class dotty.tools.dotc.ast.Trees$DefDef # 651698
exception while typing {
  def $anonfun(i: Int): Unit = 
    {
      case val x1: Array[Int] @unchecked = Array.apply(1, Predef.wrapIntArray([2 : Int])): Array[Int] @unchecked
      def case1(): (Int, Int) = throw new MatchError(x1)
      if x1.ne(null) then 
        {
          case val x2: Option[IndexedSeq[Int]] = Array.unapplySeq[Int](x1)
          if x2.isEmpty then case1() else 
            {
              case val x3: IndexedSeq[Int] = x2.get
              if x3.lengthCompare(2).==(0) then 
                {
                  x3.apply(0)
                  x3.apply(1)
                  ()
                }
               else case1()
            }
        }
       else case1()
      ()
    }
  closure($anonfun)
} of class class dotty.tools.dotc.ast.Trees$Block # 651699
exception while typing scala.runtime.RichInt.to$extension0(intWrapper(1))(2).foreach[Unit](
  {
    def $anonfun(i: Int): Unit = 
      {
        case val x1: Array[Int] @unchecked = Array.apply(1, Predef.wrapIntArray([2 : Int])): Array[Int] @unchecked
        def case1(): (Int, Int) = throw new MatchError(x1)
        if x1.ne(null) then 
          {
            case val x2: Option[IndexedSeq[Int]] = Array.unapplySeq[Int](x1)
            if x2.isEmpty then case1() else 
              {
                case val x3: IndexedSeq[Int] = x2.get
                if x3.lengthCompare(2).==(0) then 
                  {
                    x3.apply(0)
                    x3.apply(1)
                    ()
                  }
                 else case1()
              }
          }
         else case1()
        ()
      }
    closure($anonfun)
  }
) of class class dotty.tools.dotc.ast.Trees$Apply # 651700
exception while typing def thunk(): Unit = 
  scala.runtime.RichInt.to$extension0(intWrapper(1))(2).foreach[Unit](
    {
      def $anonfun(i: Int): Unit = 
        {
          case val x1: Array[Int] @unchecked = Array.apply(1, Predef.wrapIntArray([2 : Int])): Array[Int] @unchecked
          def case1(): (Int, Int) = throw new MatchError(x1)
          if x1.ne(null) then 
            {
              case val x2: Option[IndexedSeq[Int]] = Array.unapplySeq[Int](x1)
              if x2.isEmpty then case1() else 
                {
                  case val x3: IndexedSeq[Int] = x2.get
                  if x3.lengthCompare(2).==(0) then 
                    {
                      x3.apply(0)
                      x3.apply(1)
                      ()
                    }
                   else case1()
                }
            }
           else case1()
          ()
        }
      closure($anonfun)
    }
  ) of class class dotty.tools.dotc.ast.Trees$DefDef # 651924
exception while typing @scala.annotation.internal.SourceFile(
  "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/spec-traits.scala"
) final module class Failure() extends Object() { 
  def thunk(): Unit = 
    scala.runtime.RichInt.to$extension0(intWrapper(1))(2).foreach[Unit](
      {
        def $anonfun(i: Int): Unit = 
          {
            case val x1: Array[Int] @unchecked = Array.apply(1, Predef.wrapIntArray([2 : Int])): Array[Int] @unchecked
            def case1(): (Int, Int) = throw new MatchError(x1)
            if x1.ne(null) then 
              {
                case val x2: Option[IndexedSeq[Int]] = Array.unapplySeq[Int](x1)
                if x2.isEmpty then case1() else 
                  {
                    case val x3: IndexedSeq[Int] = x2.get
                    if x3.lengthCompare(2).==(0) then 
                      {
                        x3.apply(0)
                        x3.apply(1)
                        ()
                      }
                     else case1()
                  }
              }
             else case1()
            ()
          }
        closure($anonfun)
      }
    )
} of class class dotty.tools.dotc.ast.Trees$TypeDef # 651927
exception while typing package <empty> {
  @scala.annotation.internal.SourceFile(
    "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/spec-traits.scala"
  ) <trait> interface trait A[@specialized([Int : Specializable]: Specializable*) T]() extends Object { 
    @specialized([Int : Specializable]: Specializable*) private type T
    def foo: A.this.T
  }
  @scala.annotation.internal.SourceFile(
    "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/spec-traits.scala"
  ) class B() extends Object() with A[Int] { 
    <accessor> def foo: Int = 10
  }
  @scala.annotation.internal.SourceFile(
    "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/spec-traits.scala"
  ) class C() extends B() {}
  @scala.annotation.internal.SourceFile(
    "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/spec-traits.scala"
  ) class Lazy() extends Object() { 
    def test[U](block: () => U): Unit = 
      {
        block.apply()
        ()
      }
    this.test[Unit](
      <special-ops>.<cbn-arg>[Unit](
        {
          def $anonfun(): Unit = 
            {
              lazy <accessor> def x: Int = 1
              ()
            }
          closure($anonfun)
        }
      )
    )
  }
  @scala.annotation.internal.SourceFile(
    "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/spec-traits.scala"
  ) class Bug3307() extends Object() { 
    def f[Z](block: String => Z): Unit = 
      {
        block.apply("abc")
        ()
      }
    {
      {
        def $anonfun(): Unit = 
          this.f[Unit](
            {
              def $anonfun(implicit x: String): Unit = println(x)
              closure($anonfun)
            }
          )
        closure($anonfun)
      }
    }.apply()
  }
  @scala.annotation.internal.SourceFile(
    "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/spec-traits.scala"
  ) <trait> interface trait T[X]() extends Object { 
    private type X
  }
  @scala.annotation.internal.SourceFile(
    "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/spec-traits.scala"
  ) class Bug3301() extends Object() { 
    def t[A]: T[A] = sys.package.error("stub")
    {
      {
        def $anonfun(): Unit = 
          {
            type X = Int
            def foo[X]: T[X] = this.t[X]
            ()
          }
        closure($anonfun)
      }
    }
  }
  final lazy module val Failure: Failure = new Failure()
  @scala.annotation.internal.SourceFile(
    "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/spec-traits.scala"
  ) final module class Failure() extends Object() { 
    def thunk(): Unit = 
      scala.runtime.RichInt.to$extension0(intWrapper(1))(2).foreach[Unit](
        {
          def $anonfun(i: Int): Unit = 
            {
              case val x1: Array[Int] @unchecked = Array.apply(1, Predef.wrapIntArray([2 : Int])): Array[Int] @unchecked
              def case1(): (Int, Int) = throw new MatchError(x1)
              if x1.ne(null) then 
                {
                  case val x2: Option[IndexedSeq[Int]] = Array.unapplySeq[Int](x1)
                  if x2.isEmpty then case1() else 
                    {
                      case val x3: IndexedSeq[Int] = x2.get
                      if x3.lengthCompare(2).==(0) then 
                        {
                          x3.apply(0)
                          x3.apply(1)
                          ()
                        }
                       else case1()
                    }
                }
               else case1()
              ()
            }
          closure($anonfun)
        }
      )
  }
  final lazy module val AA: AA = new AA()
  @scala.annotation.internal.SourceFile(
    "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/spec-traits.scala"
  ) final module class AA() extends Object() { 
    def f(block: () => Unit): Unit = ()
    final lazy module val BB: AA.BB = new AA.BB()
    final module class BB() extends Object() { 
      AA.f(
        <special-ops>.<cbn-arg>[Unit](
          {
            def $anonfun(): Unit = 
              {
                final lazy <accessor> module def CC: CC = new CC()
                final module class CC() extends Object() {}
                ()
              }
            closure($anonfun)
          }
        )
      )
    }
    def foo[T](x: T): Boolean = 
      {
        final lazy <accessor> module def A: A = new A()
        final module class A() extends Object() {}
        false
      }
  }
  final lazy module val O: O = new O()
  @scala.annotation.internal.SourceFile(
    "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/spec-traits.scala"
  ) final module class O() extends Object() { 
    def f[@specialized() T]: Unit = 
      (Nil: List[T]).foreach[Unit](
        {
          def $anonfun(k: T): Unit = ()
          closure($anonfun)
        }
      )
  }
} of class class dotty.tools.dotc.ast.Trees$PackageDef # 652016
*** error while checking /mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/spec-traits.scala after phase arrayConstructors ***
[==================>                    ] completed (463/940, 47s)[==================>                    ] completed (465/940, 48s)[==================>                    ] completed (465/940, 48s)[==================>                    ] completed (466/940, 48s)inlining null
[==================>                    ] completed (467/940, 48s)[==================>                    ] completed (469/940, 48s)[==================>                    ] completed (469/940, 48s)[===================>                   ] completed (471/940, 48s)[===================>                   ] completed (473/940, 48s)[===================>                   ] completed (475/940, 48s)[===================>                   ] completed (476/940, 48s)[===================>                   ] completed (476/940, 49s)[===================>                   ] completed (478/940, 49s)[===================>                   ] completed (479/940, 49s)[===================>                   ] completed (481/940, 49s)[===================>                   ] completed (481/940, 49s)[===================>                   ] completed (484/940, 49s)[===================>                   ] completed (484/940, 49s)[===================>                   ] completed (485/940, 49s)[===================>                   ] completed (485/940, 49s)[===================>                   ] completed (486/940, 49s)[===================>                   ] completed (487/940, 50s)[===================>                   ] completed (487/940, 50s)[===================>                   ] completed (488/940, 50s)[===================>                   ] completed (489/940, 50s)[===================>                   ] completed (489/940, 50s)[===================>                   ] completed (490/940, 50s)[===================>                   ] completed (490/940, 50s)[===================>                   ] completed (491/940, 50s)[===================>                   ] completed (492/940, 50s)[===================>                   ] completed (493/940, 50s)[===================>                   ] completed (493/940, 51s)[====================>                  ] completed (494/940, 51s)[====================>                  ] completed (494/940, 51s)[====================>                  ] completed (494/940, 51s)[====================>                  ] completed (494/940, 51s)[====================>                  ] completed (494/940, 51s)[====================>                  ] completed (494/940, 51s)[====================>                  ] completed (494/940, 51s)[====================>                  ] completed (495/940, 51s)[====================>                  ] completed (495/940, 51s)[====================>                  ] completed (495/940, 52s)[====================>                  ] completed (496/940, 52s)[====================>                  ] completed (497/940, 52s)[====================>                  ] completed (497/940, 52s)[====================>                  ] completed (497/940, 52s)[====================>                  ] completed (498/940, 52s)[====================>                  ] completed (499/940, 52s)inlining <empty>
inlining <empty>
[====================>                  ] completed (499/940, 52s)inlining <empty>
inlining <empty>
[====================>                  ] completed (500/940, 52s)inlining null
inlining null
inlining null
inlining null
[====================>                  ] completed (501/940, 52s)[====================>                  ] completed (503/940, 53s)[====================>                  ] completed (503/940, 53s)[====================>                  ] completed (503/940, 53s)[====================>                  ] completed (503/940, 53s)exception while typing {
  def $anonfun(_$4: Int): Boolean = _$4.%(2).==(0)
  closure($anonfun)
} of class class dotty.tools.dotc.ast.Trees$Block # 729067
exception while typing Test.ArrOps[Int](xs1).filter(
  {
    def $anonfun(_$4: Int): Boolean = _$4.%(2).==(0)
    closure($anonfun)
  }
) of class class dotty.tools.dotc.ast.Trees$Apply # 729384
exception while typing {
  val xs1: Array[Int] = Array.apply(1, Predef.wrapIntArray([2,3 : Int]))
  Test.ArrOps[Int](xs1).filter(
    {
      def $anonfun(_$4: Int): Boolean = _$4.%(2).==(0)
      closure($anonfun)
    }
  )
  {
    val ev$2: Test.ArrOps[Int] = Test.ArrOps[Int](xs1)
    Test.ArrOps.toSeq$extension[Int](ev$2)
  }.asInstanceOf[=> ArraySeq[Int](Test.ArrOps[Int]#toSeq)].map[T](f)
  ()
} of class class dotty.tools.dotc.ast.Trees$Block # 729408
exception while typing def f[T](f: Int => T): Unit = 
  {
    val xs1: Array[Int] = Array.apply(1, Predef.wrapIntArray([2,3 : Int]))
    Test.ArrOps[Int](xs1).filter(
      {
        def $anonfun(_$4: Int): Boolean = _$4.%(2).==(0)
        closure($anonfun)
      }
    )
    {
      val ev$2: Test.ArrOps[Int] = Test.ArrOps[Int](xs1)
      Test.ArrOps.toSeq$extension[Int](ev$2)
    }.asInstanceOf[=> ArraySeq[Int](Test.ArrOps[Int]#toSeq)].map[T](f)
    ()
  } of class class dotty.tools.dotc.ast.Trees$DefDef # 729409
exception while typing @scala.annotation.internal.SourceFile(
  "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/poly-inheritance.scala"
) final module class Test() extends LP() { 
  final class ArrOps[A](xs: Array[A]) extends AnyVal() with Ops[ArrOps.this.A, ArraySeq, Array[ArrOps.this.A]] { 
    private type A
    <accessor> def xs: Array[ArrOps.this.A]
    def map[B](f: ArrOps.this.A => B)(implicit evidence$1: ClassTag[B]): Array[B] = 
      Test.ArrOps.map$extension[B, ArrOps.this.A](this)(f)(evidence$1)
    override def toSeq: ArraySeq[ArrOps.this.A] = Test.ArrOps.toSeq$extension[ArrOps.this.A](this)
    override def hashCode(): Int = Test.ArrOps.hashCode$extension[ArrOps.this.A](this)()
    override def equals(x$0: Any): Boolean = Test.ArrOps.equals$extension[ArrOps.this.A](this)(x$0)
  }
  final lazy module val ArrOps: Test.ArrOps = new Test.ArrOps()
  final module class ArrOps() extends Object() { 
    final def map$extension[B, A]($this: Test.ArrOps[A])(f: A => B)(implicit evidence$1: ClassTag[B]): Array[B] = ???
    final def toSeq$extension[A]($this: Test.ArrOps[A]): ArraySeq[A] = Test.arrayToSeq[A]($this.xs)
    final def hashCode$extension[A]($this: Test.ArrOps[A])(): Int = $this.xs.hashCode()
    final def equals$extension[A]($this: Test.ArrOps[A])(x$0: Any): Boolean = 
      if x$0.$isInstanceOf$[Test.ArrOps[A]] then 
        {
          case val x3: Test.ArrOps[A] = x$0.asInstanceOf[Test.ArrOps[A]]
          $this.xs.==(x3.xs)
        }
       else 
        if x$0.$isInstanceOf$[Any] then 
          {
            x$0.asInstanceOf[Any]
            false
          }
         else throw new MatchError(x$0)
  }
  implicit def ArrOps[A](xs: Array[A]): Test.ArrOps[A] = new Test.ArrOps[A](xs)
  <accessor> def xs1: Array[Int] = Array.apply(1, Predef.wrapIntArray([2,3 : Int]))
  <accessor> def xs2: Array[Int] = 
    Test.ArrOps[Int](Test.xs1).filter(
      {
        def $anonfun(_$2: Int): Boolean = _$2.%(2).==(0)
        closure($anonfun)
      }
    )
  <accessor> def xs2a: Array[Int] = Test.xs2
  <accessor> def xs3: Array[String] = 
    {
      val ev$1: Test.ArrOps[Int] = Test.ArrOps[Int](Test.xs1)
      Test.ArrOps.map$extension[String, Int](ev$1)(
        {
          def $anonfun(_$3: Int): String = _$3.+("!")
          closure($anonfun)
        }
      )(scala.reflect.ClassTag.apply[String](classOf[class String]))
    }
  <accessor> def xs3a: Array[String] = Test.xs3
  def f[T](f: Int => T): Unit = 
    {
      val xs1: Array[Int] = Array.apply(1, Predef.wrapIntArray([2,3 : Int]))
      Test.ArrOps[Int](xs1).filter(
        {
          def $anonfun(_$4: Int): Boolean = _$4.%(2).==(0)
          closure($anonfun)
        }
      )
      {
        val ev$2: Test.ArrOps[Int] = Test.ArrOps[Int](xs1)
        Test.ArrOps.toSeq$extension[Int](ev$2)
      }.asInstanceOf[=> ArraySeq[Int](Test.ArrOps[Int]#toSeq)].map[T](f)
      ()
    }
} of class class dotty.tools.dotc.ast.Trees$TypeDef # 729411
[====================>                  ] completed (504/940, 53s)exception while typing package <empty> {
  @scala.annotation.internal.SourceFile(
    "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/poly-inheritance.scala"
  ) class It[A]() extends Object() with Ops[It.this.A, It, It[It.this.A]] { 
    private type +A
  }
  @scala.annotation.internal.SourceFile(
    "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/poly-inheritance.scala"
  ) <trait> trait Ops[A, CC <: [_$1] => Any, C]() extends Any { 
    private type +A
    private type +CC <: [_$1] => Any
    private type +C
    def filter(f: Ops.this.A => Boolean): Ops.this.C = ???
    def map[B](f: Ops.this.A => B): Ops.this.CC[B] = ???
    def toSeq: It[Ops.this.A] = ???
  }
  @scala.annotation.internal.SourceFile(
    "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/poly-inheritance.scala"
  ) class ArraySeq[A]() extends It[ArraySeq.this.A]() with Ops[ArraySeq.this.A, ArraySeq, ArraySeq[ArraySeq.this.A]] { 
    private type A
  }
  @scala.annotation.internal.SourceFile(
    "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/poly-inheritance.scala"
  ) class LP() extends Object() { 
    implicit def arrayToSeq[A](xs: Array[A]): ArraySeq[A] = ???
  }
  final lazy module val Test: Test = new Test()
  @scala.annotation.internal.SourceFile(
    "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/poly-inheritance.scala"
  ) final module class Test() extends LP() { 
    final class ArrOps[A](xs: Array[A]) extends AnyVal() with Ops[ArrOps.this.A, ArraySeq, Array[ArrOps.this.A]] { 
      private type A
      <accessor> def xs: Array[ArrOps.this.A]
      def map[B](f: ArrOps.this.A => B)(implicit evidence$1: ClassTag[B]): Array[B] = 
        Test.ArrOps.map$extension[B, ArrOps.this.A](this)(f)(evidence$1)
      override def toSeq: ArraySeq[ArrOps.this.A] = Test.ArrOps.toSeq$extension[ArrOps.this.A](this)
      override def hashCode(): Int = Test.ArrOps.hashCode$extension[ArrOps.this.A](this)()
      override def equals(x$0: Any): Boolean = Test.ArrOps.equals$extension[ArrOps.this.A](this)(x$0)
    }
    final lazy module val ArrOps: Test.ArrOps = new Test.ArrOps()
    final module class ArrOps() extends Object() { 
      final def map$extension[B, A]($this: Test.ArrOps[A])(f: A => B)(implicit evidence$1: ClassTag[B]): Array[B] = ???
      final def toSeq$extension[A]($this: Test.ArrOps[A]): ArraySeq[A] = Test.arrayToSeq[A]($this.xs)
      final def hashCode$extension[A]($this: Test.ArrOps[A])(): Int = $this.xs.hashCode()
      final def equals$extension[A]($this: Test.ArrOps[A])(x$0: Any): Boolean = 
        if x$0.$isInstanceOf$[Test.ArrOps[A]] then 
          {
            case val x3: Test.ArrOps[A] = x$0.asInstanceOf[Test.ArrOps[A]]
            $this.xs.==(x3.xs)
          }
         else 
          if x$0.$isInstanceOf$[Any] then 
            {
              x$0.asInstanceOf[Any]
              false
            }
           else throw new MatchError(x$0)
    }
    implicit def ArrOps[A](xs: Array[A]): Test.ArrOps[A] = new Test.ArrOps[A](xs)
    <accessor> def xs1: Array[Int] = Array.apply(1, Predef.wrapIntArray([2,3 : Int]))
    <accessor> def xs2: Array[Int] = 
      Test.ArrOps[Int](Test.xs1).filter(
        {
          def $anonfun(_$2: Int): Boolean = _$2.%(2).==(0)
          closure($anonfun)
        }
      )
    <accessor> def xs2a: Array[Int] = Test.xs2
    <accessor> def xs3: Array[String] = 
      {
        val ev$1: Test.ArrOps[Int] = Test.ArrOps[Int](Test.xs1)
        Test.ArrOps.map$extension[String, Int](ev$1)(
          {
            def $anonfun(_$3: Int): String = _$3.+("!")
            closure($anonfun)
          }
        )(scala.reflect.ClassTag.apply[String](classOf[class String]))
      }
    <accessor> def xs3a: Array[String] = Test.xs3
    def f[T](f: Int => T): Unit = 
      {
        val xs1: Array[Int] = Array.apply(1, Predef.wrapIntArray([2,3 : Int]))
        Test.ArrOps[Int](xs1).filter(
          {
            def $anonfun(_$4: Int): Boolean = _$4.%(2).==(0)
            closure($anonfun)
          }
        )
        {
          val ev$2: Test.ArrOps[Int] = Test.ArrOps[Int](xs1)
          Test.ArrOps.toSeq$extension[Int](ev$2)
        }.asInstanceOf[=> ArraySeq[Int](Test.ArrOps[Int]#toSeq)].map[T](f)
        ()
      }
  }
} of class class dotty.tools.dotc.ast.Trees$PackageDef # 729412
*** error while checking /mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/poly-inheritance.scala after phase arrayConstructors ***
[====================>                  ] completed (505/940, 53s)[====================>                  ] completed (507/940, 53s)[====================>                  ] completed (507/940, 53s)exception while typing {
  @annotation.tailrec() def findDepth(
    zipper: scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]]
  , depth: Int): scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]] = 
    {
      def tailLabel57(
        zipper: scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]]
      , depth: Int): scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]]
         = 
      if zipper.eq(null) then sys.package.error("Defect: unexpected empty zipper while computing range") else 
        if scala.collection.immutable.RedBlackTree.isBlackTree(zipper.head) then 
          if depth.==(1) then zipper else tailLabel57(zipper.tail, depth.-(1))
         else tailLabel57(zipper.tail, depth)
      tailLabel57(zipper, depth)
    }
  val blkNewLeft: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
    scala.collection.immutable.RedBlackTree.blacken[A, B](newLeft)
  val blkNewRight: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
    scala.collection.immutable.RedBlackTree.blacken[A, B](newRight)
  var ilo5: scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]]
  var ilo6: Boolean
  var ilo7: Boolean
  var ilo8: Int
  case val x46: 
    (scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]], Boolean, Boolean
      , 
    Int) @unchecked
   = 
    scala.collection.immutable.RedBlackTree.compareDepth[A, B](blkNewLeft, blkNewRight): 
      (scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]], Boolean, 
        Boolean
      , Int) @unchecked
  if x46.ne(null) then 
    {
      ilo5 = x46._1
      ilo6 = x46._2
      ilo7 = x46._3
      ilo8 = x46._4
      ()
    }
   else throw new MatchError(x46)
  val leftMost: Boolean = ilo7
  if ilo6 then 
    /* inlined from scala.collection.immutable.RedBlackTree*/ 
      {
        new scala.collection.immutable.RedBlackTree.BlackTree[A, B](tree.key, tree.value, blkNewLeft, blkNewRight)
      }
   else 
    {
      val zipFrom: scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]] = 
        findDepth(ilo5, ilo8)
      val union: scala.collection.immutable.RedBlackTree.RedTree[A, B] = 
        if leftMost then 
          /* inlined from scala.collection.immutable.RedBlackTree*/ 
            {
              new scala.collection.immutable.RedBlackTree.RedTree[A, B](tree.key, tree.value, blkNewLeft, zipFrom.head)
            }
         else 
          /* inlined from scala.collection.immutable.RedBlackTree*/ 
            {
              new scala.collection.immutable.RedBlackTree.RedTree[A, B](tree.key, tree.value, zipFrom.head, blkNewRight)
            }
      val zippedTree: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
        scala.collection.immutable.RedBlackTree.NList.foldLeft[scala.collection.immutable.RedBlackTree.Tree[A, B], 
          scala.collection.immutable.RedBlackTree.Tree[A, B]
        ](zipFrom.tail, union: scala.collection.immutable.RedBlackTree.Tree[A, B])(
          {
            def $anonfun(tree: scala.collection.immutable.RedBlackTree.Tree[A, B], 
              node: scala.collection.immutable.RedBlackTree.Tree[A, B]
            ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
              if leftMost then 
                scala.collection.immutable.RedBlackTree.balanceLeft[A, B, B](
                  scala.collection.immutable.RedBlackTree.isBlackTree(node)
                , node.key, node.value, tree, node.right)
               else 
                scala.collection.immutable.RedBlackTree.balanceRight[A, B, B](
                  scala.collection.immutable.RedBlackTree.isBlackTree(node)
                , node.key, node.value, node.left, tree)
            closure($anonfun)
          }
        )
      zippedTree: scala.collection.immutable.RedBlackTree.Tree[A, B]
    }
} of class class dotty.tools.dotc.ast.Trees$Block # 729931
[====================>                  ] completed (507/940, 53s)exception while typing private def rebalance[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], 
  newLeft: scala.collection.immutable.RedBlackTree.Tree[A, B]
, newRight: scala.collection.immutable.RedBlackTree.Tree[A, B]): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
  {
    @annotation.tailrec() def findDepth(
      zipper: scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]]
    , depth: Int): scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]] = 
      {
        def tailLabel57(
          zipper: scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]]
        , depth: Int): scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]]
           = 
        if zipper.eq(null) then sys.package.error("Defect: unexpected empty zipper while computing range") else 
          if scala.collection.immutable.RedBlackTree.isBlackTree(zipper.head) then 
            if depth.==(1) then zipper else tailLabel57(zipper.tail, depth.-(1))
           else tailLabel57(zipper.tail, depth)
        tailLabel57(zipper, depth)
      }
    val blkNewLeft: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
      scala.collection.immutable.RedBlackTree.blacken[A, B](newLeft)
    val blkNewRight: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
      scala.collection.immutable.RedBlackTree.blacken[A, B](newRight)
    var ilo5: scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]]
    var ilo6: Boolean
    var ilo7: Boolean
    var ilo8: Int
    case val x46: 
      (scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]], Boolean, 
        Boolean
      , Int) @unchecked
     = 
      scala.collection.immutable.RedBlackTree.compareDepth[A, B](blkNewLeft, blkNewRight): 
        (scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]], Boolean, 
          Boolean
        , Int) @unchecked
    if x46.ne(null) then 
      {
        ilo5 = x46._1
        ilo6 = x46._2
        ilo7 = x46._3
        ilo8 = x46._4
        ()
      }
     else throw new MatchError(x46)
    val leftMost: Boolean = ilo7
    if ilo6 then 
      /* inlined from scala.collection.immutable.RedBlackTree*/ 
        {
          new scala.collection.immutable.RedBlackTree.BlackTree[A, B](tree.key, tree.value, blkNewLeft, blkNewRight)
        }
     else 
      {
        val zipFrom: scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]]
           = 
        findDepth(ilo5, ilo8)
        val union: scala.collection.immutable.RedBlackTree.RedTree[A, B] = 
          if leftMost then 
            /* inlined from scala.collection.immutable.RedBlackTree*/ 
              {
                new scala.collection.immutable.RedBlackTree.RedTree[A, B](tree.key, tree.value, blkNewLeft, zipFrom.head
                  )
              }
           else 
            /* inlined from scala.collection.immutable.RedBlackTree*/ 
              {
                new scala.collection.immutable.RedBlackTree.RedTree[A, B](tree.key, tree.value, zipFrom.head, 
                  blkNewRight
                )
              }
        val zippedTree: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
          scala.collection.immutable.RedBlackTree.NList.foldLeft[scala.collection.immutable.RedBlackTree.Tree[A, B], 
            scala.collection.immutable.RedBlackTree.Tree[A, B]
          ](zipFrom.tail, union: scala.collection.immutable.RedBlackTree.Tree[A, B])(
            {
              def $anonfun(tree: scala.collection.immutable.RedBlackTree.Tree[A, B], 
                node: scala.collection.immutable.RedBlackTree.Tree[A, B]
              ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
                if leftMost then 
                  scala.collection.immutable.RedBlackTree.balanceLeft[A, B, B](
                    scala.collection.immutable.RedBlackTree.isBlackTree(node)
                  , node.key, node.value, tree, node.right)
                 else 
                  scala.collection.immutable.RedBlackTree.balanceRight[A, B, B](
                    scala.collection.immutable.RedBlackTree.isBlackTree(node)
                  , node.key, node.value, node.left, tree)
              closure($anonfun)
            }
          )
        zippedTree: scala.collection.immutable.RedBlackTree.Tree[A, B]
      }
  } of class class dotty.tools.dotc.ast.Trees$DefDef # 730316
[====================>                  ] completed (508/940, 54s)[====================>                  ] completed (509/940, 54s)exception while typing @scala.annotation.internal.SourceFile(
  "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/rbtree.scala"
) final module class RedBlackTree() extends Object() { 
  def isEmpty(tree: scala.collection.immutable.RedBlackTree.Tree[_, _]): Boolean = tree.eq(null)
  def contains[A](tree: scala.collection.immutable.RedBlackTree.Tree[A, _], x: A)(implicit evidence$1: Ordering[A]): 
    Boolean
   = scala.collection.immutable.RedBlackTree.lookup[A, Any](tree, x)(evidence$1).ne(null)
  def get[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], x: A)(implicit evidence$2: Ordering[A]): 
    Option[B]
   = 
    {
      case val x1: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
        scala.collection.immutable.RedBlackTree.lookup[A, B](tree, x)(evidence$2)
      if null.==(x1) then None else new Some[B](x1.value)
    }
  @annotation.tailrec() def lookup[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], x: A)(
    implicit ordering: Ordering[A]
  ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
    {
      def tailLabel4[A, B]($this: scala.collection.immutable.RedBlackTree.type)(
        tree: scala.collection.immutable.RedBlackTree.Tree[A, B]
      , x: A)(implicit ordering: Ordering[A]): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
        if tree.eq(null) then null else 
          {
            val cmp: Int = ordering.compare(x, tree.key)
            if cmp.<(0) then tailLabel4[A, B]($this)(tree.left, x)(ordering) else 
              if cmp.>(0) then tailLabel4[A, B]($this)(tree.right, x)(ordering) else tree
          }
      tailLabel4[A, B](this)(tree, x)(ordering)
    }
  def count(tree: scala.collection.immutable.RedBlackTree.Tree[_, _]): Int = if tree.eq(null) then 0 else tree.count
  def countInRange[A](tree: scala.collection.immutable.RedBlackTree.Tree[A, _], from: Option[A], to: Option[A])(
    implicit ordering: Ordering[A]
  ): Int = 
    {
      def tailLabel6[A]($this: scala.collection.immutable.RedBlackTree.type)(
        tree: scala.collection.immutable.RedBlackTree.Tree[A, _]
      , from: Option[A], to: Option[A])(implicit ordering: Ordering[A]): Int = 
        if tree.eq(null) then 0 else 
          {
            def case4(): Int = 
              1.+(scala.collection.immutable.RedBlackTree.countInRange[A](tree.left, from, None)(ordering)).+(
                scala.collection.immutable.RedBlackTree.countInRange[A](tree.right, None, to)(ordering)
              )
            def case5(case x16: Option[A]): Int = 
              if x16.$isInstanceOf$[Some[A]] then 
                {
                  case val x5: Some[A] = x16.asInstanceOf[Some[A]]
                  if ordering.gteq(tree.key, x5.value) then tailLabel6[A]($this)(tree.left, from, to)(ordering) else 
                    case4()
                }
               else case4()
            if None.==(from).&&(None.==(to)) then tree.count else 
              {
                case x13: Option[A] = from
                case x14: Option[A] = to
                if x13.$isInstanceOf$[Some[A]] then 
                  {
                    case val x9: Some[A] = x13.asInstanceOf[Some[A]]
                    if ordering.lt(tree.key, x9.value) then tailLabel6[A]($this)(tree.right, from, to)(ordering) else 
                      case5(x14)
                  }
                 else case5(x14)
              }
          }
      tailLabel6[A](this)(tree, from, to)(ordering)
    }
  def update[A, B, B1 >: B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], k: A, v: B1, overwrite: Boolean)(
    implicit evidence$3: Ordering[A]
  ): scala.collection.immutable.RedBlackTree.Tree[A, B1] = 
    scala.collection.immutable.RedBlackTree.blacken[A, B1](
      scala.collection.immutable.RedBlackTree.upd[A, B, B1](tree, k, v, overwrite)(evidence$3)
    )
  def delete[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], k: A)(implicit evidence$4: Ordering[A]): 
    scala.collection.immutable.RedBlackTree.Tree[A, B]
   = 
    scala.collection.immutable.RedBlackTree.blacken[A, B](
      scala.collection.immutable.RedBlackTree.del[A, B](tree, k)(evidence$4)
    )
  def rangeImpl[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], from: Option[A], until: Option[A])(
    implicit evidence$5: Ordering[A]
  ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
    {
      case val x19: (Option[A], Option[A]) = new Tuple2[Option[A], Option[A]](from, until)
      def case9(case x42: Option[A], case x43: Option[A]): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
        if None.==(x42).&&(x43.$isInstanceOf$[Some[A]]) then 
          {
            case val x24: Some[A] = x43.asInstanceOf[Some[A]]
            this.until[A, B](tree, x24.value)(evidence$5)
          }
         else 
          {
            case x44: Option[A] = x42
            case x45: Option[A] = x43
            if None.==(x44).&&(None.==(x45)) then tree else throw new MatchError(x19)
          }
      def case10(case x38: Option[A], case x39: Option[A]): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
        if x38.$isInstanceOf$[Some[A]] then 
          {
            case val x28: Some[A] = x38.asInstanceOf[Some[A]]
            if None.==(x39) then this.from[A, B](tree, x28.value)(evidence$5) else case9(x38, x39)
          }
         else case9(x38, x39)
      if from.$isInstanceOf$[Some[A]] then 
        {
          case val x34: Some[A] = from.asInstanceOf[Some[A]]
          if until.$isInstanceOf$[Some[A]] then 
            {
              case val x32: Some[A] = until.asInstanceOf[Some[A]]
              this.range[A, B](tree, x34.value, x32.value)(evidence$5)
            }
           else case10(from, until)
        }
       else case10(from, until)
    }
  def range[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], from: A, until: A)(
    implicit evidence$6: Ordering[A]
  ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
    scala.collection.immutable.RedBlackTree.blacken[A, B](
      scala.collection.immutable.RedBlackTree.doRange[A, B](tree, from, until)(evidence$6)
    )
  def from[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], from: A)(implicit evidence$7: Ordering[A]): 
    scala.collection.immutable.RedBlackTree.Tree[A, B]
   = 
    scala.collection.immutable.RedBlackTree.blacken[A, B](
      scala.collection.immutable.RedBlackTree.doFrom[A, B](tree, from)(evidence$7)
    )
  def to[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], to: A)(implicit evidence$8: Ordering[A]): 
    scala.collection.immutable.RedBlackTree.Tree[A, B]
   = 
    scala.collection.immutable.RedBlackTree.blacken[A, B](
      scala.collection.immutable.RedBlackTree.doTo[A, B](tree, to)(evidence$8)
    )
  def until[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], key: A)(implicit evidence$9: Ordering[A]): 
    scala.collection.immutable.RedBlackTree.Tree[A, B]
   = 
    scala.collection.immutable.RedBlackTree.blacken[A, B](
      scala.collection.immutable.RedBlackTree.doUntil[A, B](tree, key)(evidence$9)
    )
  def drop[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], n: Int)(implicit evidence$10: Ordering[A]): 
    scala.collection.immutable.RedBlackTree.Tree[A, B]
   = 
    scala.collection.immutable.RedBlackTree.blacken[A, B](scala.collection.immutable.RedBlackTree.doDrop[A, B](tree, n))
  def take[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], n: Int)(implicit evidence$11: Ordering[A]): 
    scala.collection.immutable.RedBlackTree.Tree[A, B]
   = 
    scala.collection.immutable.RedBlackTree.blacken[A, B](scala.collection.immutable.RedBlackTree.doTake[A, B](tree, n))
  def slice[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], from: Int, until: Int)(
    implicit evidence$12: Ordering[A]
  ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
    scala.collection.immutable.RedBlackTree.blacken[A, B](
      scala.collection.immutable.RedBlackTree.doSlice[A, B](tree, from, until)
    )
  def smallest[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B]): 
    scala.collection.immutable.RedBlackTree.Tree[A, B]
   = 
    {
      if tree.eq(null) then throw new NoSuchElementException("empty map") else ()
      var result: scala.collection.immutable.RedBlackTree.Tree[A, B] = tree
      {
        def while$(): Unit = 
          if result.left.ne(null) then 
            {
              result = result.left
              while$()
            }
           else ()
        while$()
      }
      result: scala.collection.immutable.RedBlackTree.Tree[A, B]
    }
  def greatest[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B]): 
    scala.collection.immutable.RedBlackTree.Tree[A, B]
   = 
    {
      if tree.eq(null) then throw new NoSuchElementException("empty map") else ()
      var result: scala.collection.immutable.RedBlackTree.Tree[A, B] = tree
      {
        def while$(): Unit = 
          if result.right.ne(null) then 
            {
              result = result.right
              while$()
            }
           else ()
        while$()
      }
      result: scala.collection.immutable.RedBlackTree.Tree[A, B]
    }
  def foreach[A, B, U](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], f: ((A, B)) => U): Unit = 
    if tree.ne(null) then scala.collection.immutable.RedBlackTree._foreach[A, B, U](tree, f) else ()
  private def _foreach[A, B, U](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], f: ((A, B)) => U): Unit = 
    {
      def tailLabel20[A, B, U]($this: scala.collection.immutable.RedBlackTree.type)(
        tree: scala.collection.immutable.RedBlackTree.Tree[A, B]
      , f: ((A, B)) => U): Unit = 
        {
          if tree.left.ne(null) then scala.collection.immutable.RedBlackTree._foreach[A, B, U](tree.left, f) else ()
          f.apply(new Tuple2[A, B](tree.key, tree.value))
          if tree.right.ne(null) then tailLabel20[A, B, U]($this)(tree.right, f) else ()
        }
      tailLabel20[A, B, U](this)(tree, f)
    }
  def foreachKey[A, U](tree: scala.collection.immutable.RedBlackTree.Tree[A, _], f: A => U): Unit = 
    if tree.ne(null) then scala.collection.immutable.RedBlackTree._foreachKey[A, U](tree, f) else ()
  private def _foreachKey[A, U](tree: scala.collection.immutable.RedBlackTree.Tree[A, _], f: A => U): Unit = 
    {
      def tailLabel22[A, U]($this: scala.collection.immutable.RedBlackTree.type)(
        tree: scala.collection.immutable.RedBlackTree.Tree[A, _]
      , f: A => U): Unit = 
        {
          if tree.left.ne(null) then scala.collection.immutable.RedBlackTree._foreachKey[A, U](tree.left, f) else ()
          f.apply(tree.key)
          if tree.right.ne(null) then tailLabel22[A, U]($this)(tree.right, f) else ()
        }
      tailLabel22[A, U](this)(tree, f)
    }
  def iterator[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], start: Option[A])(
    implicit evidence$13: Ordering[A]
  ): Iterator[(A, B)] = new scala.collection.immutable.RedBlackTree.EntriesIterator[A, B](tree, start)(evidence$13)
  def iterator$default$2[A, B]: None.type = None
  def keysIterator[A](tree: scala.collection.immutable.RedBlackTree.Tree[A, _], start: Option[A])(
    implicit evidence$14: Ordering[A]
  ): Iterator[A] = new scala.collection.immutable.RedBlackTree.KeysIterator[A, Any](tree, start)(evidence$14)
  def keysIterator$default$2[A]: None.type = None
  def valuesIterator[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], start: Option[A])(
    implicit evidence$15: Ordering[A]
  ): Iterator[B] = new scala.collection.immutable.RedBlackTree.ValuesIterator[A, B](tree, start)(evidence$15)
  def valuesIterator$default$2[A, B]: None.type = None
  @annotation.tailrec() def nth[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], n: Int): 
    scala.collection.immutable.RedBlackTree.Tree[A, B]
   = 
    {
      def tailLabel29[A, B]($this: scala.collection.immutable.RedBlackTree.type)(
        tree: scala.collection.immutable.RedBlackTree.Tree[A, B]
      , n: Int): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
        {
          val count: Int = $this.count(tree.left)
          if n.<(count) then tailLabel29[A, B]($this)(tree.left, n) else 
            if n.>(count) then tailLabel29[A, B]($this)(tree.right, n.-(count).-(1)) else tree
        }
      tailLabel29[A, B](this)(tree, n)
    }
  def isBlack(tree: scala.collection.immutable.RedBlackTree.Tree[_, _]): Boolean = 
    tree.eq(null).||(scala.collection.immutable.RedBlackTree.isBlackTree(tree))
  private def isRedTree(tree: scala.collection.immutable.RedBlackTree.Tree[_, _]): Boolean = 
    tree.isInstanceOf[scala.collection.immutable.RedBlackTree.RedTree[_, _]]
  private def isBlackTree(tree: scala.collection.immutable.RedBlackTree.Tree[_, _]): Boolean = 
    tree.isInstanceOf[scala.collection.immutable.RedBlackTree.BlackTree[_, _]]
  private def blacken[A, B](t: scala.collection.immutable.RedBlackTree.Tree[A, B]): 
    scala.collection.immutable.RedBlackTree.Tree[A, B]
   = if t.eq(null) then null else t.black
  private def mkTree[A, B](isBlack: Boolean, k: A, v: B, l: scala.collection.immutable.RedBlackTree.Tree[A, B], 
    r: scala.collection.immutable.RedBlackTree.Tree[A, B]
  ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
    if isBlack then 
      /* inlined from scala.collection.immutable.RedBlackTree*/ 
        {
          new scala.collection.immutable.RedBlackTree.BlackTree[A, B](k, v, l, r)
        }
     else 
      /* inlined from scala.collection.immutable.RedBlackTree*/ 
        {
          new scala.collection.immutable.RedBlackTree.RedTree[A, B](k, v, l, r)
        }
  private def balanceLeft[A, B, B1 >: B](isBlack: Boolean, z: A, zv: B, 
    l: scala.collection.immutable.RedBlackTree.Tree[A, B1]
  , d: scala.collection.immutable.RedBlackTree.Tree[A, B1]): scala.collection.immutable.RedBlackTree.Tree[A, B1] = 
    if 
      scala.collection.immutable.RedBlackTree.isRedTree(l).&&(scala.collection.immutable.RedBlackTree.isRedTree(l.left))
     then 
      /* inlined from scala.collection.immutable.RedBlackTree*/ 
        {
          val left: scala.collection.immutable.RedBlackTree.BlackTree[A, B1] = 
            /* inlined from scala.collection.immutable.RedBlackTree*/ 
              {
                new scala.collection.immutable.RedBlackTree.BlackTree[A, B1](l.left.key, l.left.value, l.left.left, 
                  l.left.right
                )
              }
          val right: scala.collection.immutable.RedBlackTree.BlackTree[A, B1] = 
            /* inlined from scala.collection.immutable.RedBlackTree*/ 
              {
                new scala.collection.immutable.RedBlackTree.BlackTree[A, B1](z, zv, l.right, d)
              }
          new scala.collection.immutable.RedBlackTree.RedTree[A, B1](l.key, l.value, left, right)
        }
     else 
      if 
        scala.collection.immutable.RedBlackTree.isRedTree(l).&&(
          scala.collection.immutable.RedBlackTree.isRedTree(l.right)
        )
       then 
        /* inlined from scala.collection.immutable.RedBlackTree*/ 
          {
            val left: scala.collection.immutable.RedBlackTree.BlackTree[A, B1] = 
              /* inlined from scala.collection.immutable.RedBlackTree*/ 
                {
                  new scala.collection.immutable.RedBlackTree.BlackTree[A, B1](l.key, l.value, l.left, l.right.left)
                }
            val right: scala.collection.immutable.RedBlackTree.BlackTree[A, B1] = 
              /* inlined from scala.collection.immutable.RedBlackTree*/ 
                {
                  new scala.collection.immutable.RedBlackTree.BlackTree[A, B1](z, zv, l.right.right, d)
                }
            new scala.collection.immutable.RedBlackTree.RedTree[A, B1](l.right.key, l.right.value, left, right)
          }
       else scala.collection.immutable.RedBlackTree.mkTree[A, B1](isBlack, z, zv, l, d)
  private def balanceRight[A, B, B1 >: B](isBlack: Boolean, x: A, xv: B, 
    a: scala.collection.immutable.RedBlackTree.Tree[A, B1]
  , r: scala.collection.immutable.RedBlackTree.Tree[A, B1]): scala.collection.immutable.RedBlackTree.Tree[A, B1] = 
    if 
      scala.collection.immutable.RedBlackTree.isRedTree(r).&&(scala.collection.immutable.RedBlackTree.isRedTree(r.left))
     then 
      /* inlined from scala.collection.immutable.RedBlackTree*/ 
        {
          val left: scala.collection.immutable.RedBlackTree.BlackTree[A, B1] = 
            /* inlined from scala.collection.immutable.RedBlackTree*/ 
              {
                new scala.collection.immutable.RedBlackTree.BlackTree[A, B1](x, xv, a, r.left.left)
              }
          val right: scala.collection.immutable.RedBlackTree.BlackTree[A, B1] = 
            /* inlined from scala.collection.immutable.RedBlackTree*/ 
              {
                new scala.collection.immutable.RedBlackTree.BlackTree[A, B1](r.key, r.value, r.left.right, r.right)
              }
          new scala.collection.immutable.RedBlackTree.RedTree[A, B1](r.left.key, r.left.value, left, right)
        }
     else 
      if 
        scala.collection.immutable.RedBlackTree.isRedTree(r).&&(
          scala.collection.immutable.RedBlackTree.isRedTree(r.right)
        )
       then 
        /* inlined from scala.collection.immutable.RedBlackTree*/ 
          {
            val left: scala.collection.immutable.RedBlackTree.BlackTree[A, B1] = 
              /* inlined from scala.collection.immutable.RedBlackTree*/ 
                {
                  new scala.collection.immutable.RedBlackTree.BlackTree[A, B1](x, xv, a, r.left)
                }
            val right: scala.collection.immutable.RedBlackTree.BlackTree[A, B1] = 
              /* inlined from scala.collection.immutable.RedBlackTree*/ 
                {
                  new scala.collection.immutable.RedBlackTree.BlackTree[A, B1](r.right.key, r.right.value, r.right.left
                    , 
                  r.right.right)
                }
            new scala.collection.immutable.RedBlackTree.RedTree[A, B1](r.key, r.value, left, right)
          }
       else scala.collection.immutable.RedBlackTree.mkTree[A, B1](isBlack, x, xv, a, r)
  private def upd[A, B, B1 >: B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], k: A, v: B1, 
    overwrite: Boolean
  )(implicit ordering: Ordering[A]): scala.collection.immutable.RedBlackTree.Tree[A, B1] = 
    if tree.eq(null) then 
      /* inlined from scala.collection.immutable.RedBlackTree*/ 
        {
          new scala.collection.immutable.RedBlackTree.RedTree[A, B1](k, v, null: Null, null: Null)
        }
     else 
      {
        val cmp: Int = ordering.compare(k, tree.key)
        if cmp.<(0) then 
          scala.collection.immutable.RedBlackTree.balanceLeft[A, B, B1](
            scala.collection.immutable.RedBlackTree.isBlackTree(tree)
          , tree.key, tree.value, 
            scala.collection.immutable.RedBlackTree.upd[A, B, B1](tree.left, k, v, overwrite)(ordering)
          , tree.right)
         else 
          if cmp.>(0) then 
            scala.collection.immutable.RedBlackTree.balanceRight[A, B, B1](
              scala.collection.immutable.RedBlackTree.isBlackTree(tree)
            , tree.key, tree.value, tree.left, 
              scala.collection.immutable.RedBlackTree.upd[A, B, B1](tree.right, k, v, overwrite)(ordering)
            )
           else 
            if overwrite.||(k.==(tree.key).unary_!) then 
              scala.collection.immutable.RedBlackTree.mkTree[A, B1](
                scala.collection.immutable.RedBlackTree.isBlackTree(tree)
              , k, v, tree.left, tree.right)
             else tree
      }
  private def updNth[A, B, B1 >: B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], idx: Int, k: A, v: B1, 
    overwrite: Boolean
  ): scala.collection.immutable.RedBlackTree.Tree[A, B1] = 
    if tree.eq(null) then 
      /* inlined from scala.collection.immutable.RedBlackTree*/ 
        {
          new scala.collection.immutable.RedBlackTree.RedTree[A, B1](k, v, null: Null, null: Null)
        }
     else 
      {
        val rank: Int = 1.+(scala.collection.immutable.RedBlackTree.count(tree.left))
        if idx.<(rank) then 
          scala.collection.immutable.RedBlackTree.balanceLeft[A, B, B1](
            scala.collection.immutable.RedBlackTree.isBlackTree(tree)
          , tree.key, tree.value, 
            scala.collection.immutable.RedBlackTree.updNth[A, B, B1](tree.left, idx, k, v, overwrite)
          , tree.right)
         else 
          if idx.>(rank) then 
            scala.collection.immutable.RedBlackTree.balanceRight[A, B, B1](
              scala.collection.immutable.RedBlackTree.isBlackTree(tree)
            , tree.key, tree.value, tree.left, 
              scala.collection.immutable.RedBlackTree.updNth[A, B, B1](tree.right, idx.-(rank), k, v, overwrite)
            )
           else 
            if overwrite then 
              scala.collection.immutable.RedBlackTree.mkTree[A, B1](
                scala.collection.immutable.RedBlackTree.isBlackTree(tree)
              , k, v, tree.left, tree.right)
             else tree
      }
  private def del[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], k: A)(implicit ordering: Ordering[A])
    : 
  scala.collection.immutable.RedBlackTree.Tree[A, B] = 
    if tree.eq(null) then null else 
      {
        def balance(x: A, xv: B, tl: scala.collection.immutable.RedBlackTree.Tree[A, B], 
          tr: scala.collection.immutable.RedBlackTree.Tree[A, B]
        ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
          if scala.collection.immutable.RedBlackTree.isRedTree(tl) then 
            if scala.collection.immutable.RedBlackTree.isRedTree(tr) then 
              /* inlined from scala.collection.immutable.RedBlackTree*/ 
                {
                  val left: scala.collection.immutable.RedBlackTree.Tree[A, B] = tl.black
                  val right: scala.collection.immutable.RedBlackTree.Tree[A, B] = tr.black
                  new scala.collection.immutable.RedBlackTree.RedTree[A, B](x, xv, left, right)
                }
             else 
              if scala.collection.immutable.RedBlackTree.isRedTree(tl.left) then 
                /* inlined from scala.collection.immutable.RedBlackTree*/ 
                  {
                    val left: scala.collection.immutable.RedBlackTree.Tree[A, B] = tl.left.black
                    val right: scala.collection.immutable.RedBlackTree.BlackTree[A, B] = 
                      /* inlined from scala.collection.immutable.RedBlackTree*/ 
                        {
                          new scala.collection.immutable.RedBlackTree.BlackTree[A, B](x, xv, tl.right, tr)
                        }
                    new scala.collection.immutable.RedBlackTree.RedTree[A, B](tl.key, tl.value, left, right)
                  }
               else 
                if scala.collection.immutable.RedBlackTree.isRedTree(tl.right) then 
                  /* inlined from scala.collection.immutable.RedBlackTree*/ 
                    {
                      val left: scala.collection.immutable.RedBlackTree.BlackTree[A, B] = 
                        /* inlined from scala.collection.immutable.RedBlackTree*/ 
                          {
                            new scala.collection.immutable.RedBlackTree.BlackTree[A, B](tl.key, tl.value, tl.left, 
                              tl.right.left
                            )
                          }
                      val right: scala.collection.immutable.RedBlackTree.BlackTree[A, B] = 
                        /* inlined from scala.collection.immutable.RedBlackTree*/ 
                          {
                            new scala.collection.immutable.RedBlackTree.BlackTree[A, B](x, xv, tl.right.right, tr)
                          }
                      new scala.collection.immutable.RedBlackTree.RedTree[A, B](tl.right.key, tl.right.value, left, 
                        right
                      )
                    }
                 else 
                  /* inlined from scala.collection.immutable.RedBlackTree*/ 
                    {
                      new scala.collection.immutable.RedBlackTree.BlackTree[A, B](x, xv, tl, tr)
                    }
           else 
            if scala.collection.immutable.RedBlackTree.isRedTree(tr) then 
              if scala.collection.immutable.RedBlackTree.isRedTree(tr.right) then 
                /* inlined from scala.collection.immutable.RedBlackTree*/ 
                  {
                    val left: scala.collection.immutable.RedBlackTree.BlackTree[A, B] = 
                      /* inlined from scala.collection.immutable.RedBlackTree*/ 
                        {
                          new scala.collection.immutable.RedBlackTree.BlackTree[A, B](x, xv, tl, tr.left)
                        }
                    val right: scala.collection.immutable.RedBlackTree.Tree[A, B] = tr.right.black
                    new scala.collection.immutable.RedBlackTree.RedTree[A, B](tr.key, tr.value, left, right)
                  }
               else 
                if scala.collection.immutable.RedBlackTree.isRedTree(tr.left) then 
                  /* inlined from scala.collection.immutable.RedBlackTree*/ 
                    {
                      val left: scala.collection.immutable.RedBlackTree.BlackTree[A, B] = 
                        /* inlined from scala.collection.immutable.RedBlackTree*/ 
                          {
                            new scala.collection.immutable.RedBlackTree.BlackTree[A, B](x, xv, tl, tr.left.left)
                          }
                      val right: scala.collection.immutable.RedBlackTree.BlackTree[A, B] = 
                        /* inlined from scala.collection.immutable.RedBlackTree*/ 
                          {
                            new scala.collection.immutable.RedBlackTree.BlackTree[A, B](tr.key, tr.value, tr.left.right
                              , 
                            tr.right)
                          }
                      new scala.collection.immutable.RedBlackTree.RedTree[A, B](tr.left.key, tr.left.value, left, right)
                    }
                 else 
                  /* inlined from scala.collection.immutable.RedBlackTree*/ 
                    {
                      new scala.collection.immutable.RedBlackTree.BlackTree[A, B](x, xv, tl, tr)
                    }
             else 
              /* inlined from scala.collection.immutable.RedBlackTree*/ 
                {
                  new scala.collection.immutable.RedBlackTree.BlackTree[A, B](x, xv, tl, tr)
                }
        def subl(t: scala.collection.immutable.RedBlackTree.Tree[A, B]): 
          scala.collection.immutable.RedBlackTree.Tree[A, B]
         = 
          if t.isInstanceOf[scala.collection.immutable.RedBlackTree.BlackTree[_, _]] then t.red else 
            sys.package.error("Defect: invariance violation; expected black, got ".+(t))
        def balLeft(x: A, xv: B, tl: scala.collection.immutable.RedBlackTree.Tree[A, B], 
          tr: scala.collection.immutable.RedBlackTree.Tree[A, B]
        ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
          if scala.collection.immutable.RedBlackTree.isRedTree(tl) then 
            /* inlined from scala.collection.immutable.RedBlackTree*/ 
              {
                val left: scala.collection.immutable.RedBlackTree.Tree[A, B] = tl.black
                new scala.collection.immutable.RedBlackTree.RedTree[A, B](x, xv, left, tr)
              }
           else 
            if scala.collection.immutable.RedBlackTree.isBlackTree(tr) then balance(x, xv, tl, tr.red) else 
              if 
                scala.collection.immutable.RedBlackTree.isRedTree(tr).&&(
                  scala.collection.immutable.RedBlackTree.isBlackTree(tr.left)
                )
               then 
                /* inlined from scala.collection.immutable.RedBlackTree*/ 
                  {
                    val left: scala.collection.immutable.RedBlackTree.BlackTree[A, B] = 
                      /* inlined from scala.collection.immutable.RedBlackTree*/ 
                        {
                          new scala.collection.immutable.RedBlackTree.BlackTree[A, B](x, xv, tl, tr.left.left)
                        }
                    val right: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
                      balance(tr.key, tr.value, tr.left.right, subl(tr.right))
                    new scala.collection.immutable.RedBlackTree.RedTree[A, B](tr.left.key, tr.left.value, left, right)
                  }
               else sys.package.error("Defect: invariance violation")
        def balRight(x: A, xv: B, tl: scala.collection.immutable.RedBlackTree.Tree[A, B], 
          tr: scala.collection.immutable.RedBlackTree.Tree[A, B]
        ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
          if scala.collection.immutable.RedBlackTree.isRedTree(tr) then 
            /* inlined from scala.collection.immutable.RedBlackTree*/ 
              {
                val right: scala.collection.immutable.RedBlackTree.Tree[A, B] = tr.black
                new scala.collection.immutable.RedBlackTree.RedTree[A, B](x, xv, tl, right)
              }
           else 
            if scala.collection.immutable.RedBlackTree.isBlackTree(tl) then balance(x, xv, tl.red, tr) else 
              if 
                scala.collection.immutable.RedBlackTree.isRedTree(tl).&&(
                  scala.collection.immutable.RedBlackTree.isBlackTree(tl.right)
                )
               then 
                /* inlined from scala.collection.immutable.RedBlackTree*/ 
                  {
                    val left: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
                      balance(tl.key, tl.value, subl(tl.left), tl.right.left)
                    val right: scala.collection.immutable.RedBlackTree.BlackTree[A, B] = 
                      /* inlined from scala.collection.immutable.RedBlackTree*/ 
                        {
                          new scala.collection.immutable.RedBlackTree.BlackTree[A, B](x, xv, tl.right.right, tr)
                        }
                    new scala.collection.immutable.RedBlackTree.RedTree[A, B](tl.right.key, tl.right.value, left, right)
                  }
               else sys.package.error("Defect: invariance violation")
        def delLeft: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
          if scala.collection.immutable.RedBlackTree.isBlackTree(tree.left) then 
            balLeft(tree.key, tree.value, scala.collection.immutable.RedBlackTree.del[A, B](tree.left, k)(ordering), 
              tree.right
            )
           else 
            /* inlined from scala.collection.immutable.RedBlackTree*/ 
              {
                val left: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
                  scala.collection.immutable.RedBlackTree.del[A, B](tree.left, k)(ordering)
                new scala.collection.immutable.RedBlackTree.RedTree[A, B](tree.key, tree.value, left, tree.right)
              }
        def delRight: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
          if scala.collection.immutable.RedBlackTree.isBlackTree(tree.right) then 
            balRight(tree.key, tree.value, tree.left, 
              scala.collection.immutable.RedBlackTree.del[A, B](tree.right, k)(ordering)
            )
           else 
            /* inlined from scala.collection.immutable.RedBlackTree*/ 
              {
                val right: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
                  scala.collection.immutable.RedBlackTree.del[A, B](tree.right, k)(ordering)
                new scala.collection.immutable.RedBlackTree.RedTree[A, B](tree.key, tree.value, tree.left, right)
              }
        def append(tl: scala.collection.immutable.RedBlackTree.Tree[A, B], 
          tr: scala.collection.immutable.RedBlackTree.Tree[A, B]
        ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
          if tl.eq(null) then tr else 
            if tr.eq(null) then tl else 
              if 
                scala.collection.immutable.RedBlackTree.isRedTree(tl).&&(
                  scala.collection.immutable.RedBlackTree.isRedTree(tr)
                )
               then 
                {
                  val bc: scala.collection.immutable.RedBlackTree.Tree[A, B] = append(tl.right, tr.left)
                  if scala.collection.immutable.RedBlackTree.isRedTree(bc) then 
                    /* inlined from scala.collection.immutable.RedBlackTree*/ 
                      {
                        val left: scala.collection.immutable.RedBlackTree.RedTree[A, B] = 
                          /* inlined from scala.collection.immutable.RedBlackTree*/ 
                            {
                              new scala.collection.immutable.RedBlackTree.RedTree[A, B](tl.key, tl.value, tl.left, 
                                bc.left
                              )
                            }
                        val right: scala.collection.immutable.RedBlackTree.RedTree[A, B] = 
                          /* inlined from scala.collection.immutable.RedBlackTree*/ 
                            {
                              new scala.collection.immutable.RedBlackTree.RedTree[A, B](tr.key, tr.value, bc.right, 
                                tr.right
                              )
                            }
                        new scala.collection.immutable.RedBlackTree.RedTree[A, B](bc.key, bc.value, left, right)
                      }
                   else 
                    /* inlined from scala.collection.immutable.RedBlackTree*/ 
                      {
                        val right: scala.collection.immutable.RedBlackTree.RedTree[A, B] = 
                          /* inlined from scala.collection.immutable.RedBlackTree*/ 
                            {
                              new scala.collection.immutable.RedBlackTree.RedTree[A, B](tr.key, tr.value, bc, tr.right)
                            }
                        new scala.collection.immutable.RedBlackTree.RedTree[A, B](tl.key, tl.value, tl.left, right)
                      }
                }
               else 
                if 
                  scala.collection.immutable.RedBlackTree.isBlackTree(tl).&&(
                    scala.collection.immutable.RedBlackTree.isBlackTree(tr)
                  )
                 then 
                  {
                    val bc: scala.collection.immutable.RedBlackTree.Tree[A, B] = append(tl.right, tr.left)
                    if scala.collection.immutable.RedBlackTree.isRedTree(bc) then 
                      /* inlined from scala.collection.immutable.RedBlackTree*/ 
                        {
                          val left: scala.collection.immutable.RedBlackTree.BlackTree[A, B] = 
                            /* inlined from scala.collection.immutable.RedBlackTree*/ 
                              {
                                new scala.collection.immutable.RedBlackTree.BlackTree[A, B](tl.key, tl.value, tl.left, 
                                  bc.left
                                )
                              }
                          val right: scala.collection.immutable.RedBlackTree.BlackTree[A, B] = 
                            /* inlined from scala.collection.immutable.RedBlackTree*/ 
                              {
                                new scala.collection.immutable.RedBlackTree.BlackTree[A, B](tr.key, tr.value, bc.right, 
                                  tr.right
                                )
                              }
                          new scala.collection.immutable.RedBlackTree.RedTree[A, B](bc.key, bc.value, left, right)
                        }
                     else 
                      balLeft(tl.key, tl.value, tl.left, 
                        /* inlined from scala.collection.immutable.RedBlackTree*/ 
                          {
                            new scala.collection.immutable.RedBlackTree.BlackTree[A, B](tr.key, tr.value, bc, tr.right)
                          }
                      )
                  }
                 else 
                  if scala.collection.immutable.RedBlackTree.isRedTree(tr) then 
                    /* inlined from scala.collection.immutable.RedBlackTree*/ 
                      {
                        val left: scala.collection.immutable.RedBlackTree.Tree[A, B] = append(tl, tr.left)
                        new scala.collection.immutable.RedBlackTree.RedTree[A, B](tr.key, tr.value, left, tr.right)
                      }
                   else 
                    if scala.collection.immutable.RedBlackTree.isRedTree(tl) then 
                      /* inlined from scala.collection.immutable.RedBlackTree*/ 
                        {
                          val right: scala.collection.immutable.RedBlackTree.Tree[A, B] = append(tl.right, tr)
                          new scala.collection.immutable.RedBlackTree.RedTree[A, B](tl.key, tl.value, tl.left, right)
                        }
                     else sys.package.error("unmatched tree on append: ".+(tl).+(", ").+(tr))
        val cmp: Int = ordering.compare(k, tree.key)
        if cmp.<(0) then delLeft else if cmp.>(0) then delRight else append(tree.left, tree.right)
      }
  private def doFrom[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], from: A)(
    implicit ordering: Ordering[A]
  ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
    {
      if tree.eq(null) then return null else ()
      if ordering.lt(tree.key, from) then 
        return scala.collection.immutable.RedBlackTree.doFrom[A, B](tree.right, from)(ordering)
       else ()
      val newLeft: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
        scala.collection.immutable.RedBlackTree.doFrom[A, B](tree.left, from)(ordering)
      if newLeft.eq(tree.left) then tree else 
        if newLeft.eq(null) then 
          scala.collection.immutable.RedBlackTree.upd[A, B, B](tree.right, tree.key, tree.value, false)(ordering)
         else scala.collection.immutable.RedBlackTree.rebalance[A, B](tree, newLeft, tree.right)
    }
  private def doTo[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], to: A)(implicit ordering: Ordering[A]
    )
  : scala.collection.immutable.RedBlackTree.Tree[A, B] = 
    {
      if tree.eq(null) then return null else ()
      if ordering.lt(to, tree.key) then 
        return scala.collection.immutable.RedBlackTree.doTo[A, B](tree.left, to)(ordering)
       else ()
      val newRight: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
        scala.collection.immutable.RedBlackTree.doTo[A, B](tree.right, to)(ordering)
      if newRight.eq(tree.right) then tree else 
        if newRight.eq(null) then 
          scala.collection.immutable.RedBlackTree.upd[A, B, B](tree.left, tree.key, tree.value, false)(ordering)
         else scala.collection.immutable.RedBlackTree.rebalance[A, B](tree, tree.left, newRight)
    }
  private def doUntil[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], until: A)(
    implicit ordering: Ordering[A]
  ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
    {
      if tree.eq(null) then return null else ()
      if ordering.lteq(until, tree.key) then 
        return scala.collection.immutable.RedBlackTree.doUntil[A, B](tree.left, until)(ordering)
       else ()
      val newRight: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
        scala.collection.immutable.RedBlackTree.doUntil[A, B](tree.right, until)(ordering)
      if newRight.eq(tree.right) then tree else 
        if newRight.eq(null) then 
          scala.collection.immutable.RedBlackTree.upd[A, B, B](tree.left, tree.key, tree.value, false)(ordering)
         else scala.collection.immutable.RedBlackTree.rebalance[A, B](tree, tree.left, newRight)
    }
  private def doRange[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], from: A, until: A)(
    implicit ordering: Ordering[A]
  ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
    {
      if tree.eq(null) then return null else ()
      if ordering.lt(tree.key, from) then 
        return scala.collection.immutable.RedBlackTree.doRange[A, B](tree.right, from, until)(ordering)
       else ()
      if ordering.lteq(until, tree.key) then 
        return scala.collection.immutable.RedBlackTree.doRange[A, B](tree.left, from, until)(ordering)
       else ()
      val newLeft: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
        scala.collection.immutable.RedBlackTree.doFrom[A, B](tree.left, from)(ordering)
      val newRight: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
        scala.collection.immutable.RedBlackTree.doUntil[A, B](tree.right, until)(ordering)
      if newLeft.eq(tree.left).&&(newRight.eq(tree.right)) then tree else 
        if newLeft.eq(null) then 
          scala.collection.immutable.RedBlackTree.upd[A, B, B](newRight, tree.key, tree.value, false)(ordering)
         else 
          if newRight.eq(null) then 
            scala.collection.immutable.RedBlackTree.upd[A, B, B](newLeft, tree.key, tree.value, false)(ordering)
           else scala.collection.immutable.RedBlackTree.rebalance[A, B](tree, newLeft, newRight)
    }
  private def doDrop[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], n: Int): 
    scala.collection.immutable.RedBlackTree.Tree[A, B]
   = 
    {
      if n.<=(0) then return tree else ()
      if n.>=(this.count(tree)) then return null else ()
      val count: Int = this.count(tree.left)
      if n.>(count) then return scala.collection.immutable.RedBlackTree.doDrop[A, B](tree.right, n.-(count).-(1)) else 
        ()
      val newLeft: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
        scala.collection.immutable.RedBlackTree.doDrop[A, B](tree.left, n)
      if newLeft.eq(tree.left) then tree else 
        if newLeft.eq(null) then 
          scala.collection.immutable.RedBlackTree.updNth[A, B, B](tree.right, n.-(count).-(1), tree.key, tree.value, 
            false
          )
         else scala.collection.immutable.RedBlackTree.rebalance[A, B](tree, newLeft, tree.right)
    }
  private def doTake[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], n: Int): 
    scala.collection.immutable.RedBlackTree.Tree[A, B]
   = 
    {
      if n.<=(0) then return null else ()
      if n.>=(this.count(tree)) then return tree else ()
      val count: Int = this.count(tree.left)
      if n.<=(count) then return scala.collection.immutable.RedBlackTree.doTake[A, B](tree.left, n) else ()
      val newRight: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
        scala.collection.immutable.RedBlackTree.doTake[A, B](tree.right, n.-(count).-(1))
      if newRight.eq(tree.right) then tree else 
        if newRight.eq(null) then 
          scala.collection.immutable.RedBlackTree.updNth[A, B, B](tree.left, n, tree.key, tree.value, false)
         else scala.collection.immutable.RedBlackTree.rebalance[A, B](tree, tree.left, newRight)
    }
  private def doSlice[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], from: Int, until: Int): 
    scala.collection.immutable.RedBlackTree.Tree[A, B]
   = 
    {
      if tree.eq(null) then return null else ()
      val count: Int = this.count(tree.left)
      if from.>(count) then 
        return 
          scala.collection.immutable.RedBlackTree.doSlice[A, B](tree.right, from.-(count).-(1), until.-(count).-(1))
       else ()
      if until.<=(count) then return scala.collection.immutable.RedBlackTree.doSlice[A, B](tree.left, from, until) else 
        ()
      val newLeft: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
        scala.collection.immutable.RedBlackTree.doDrop[A, B](tree.left, from)
      val newRight: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
        scala.collection.immutable.RedBlackTree.doTake[A, B](tree.right, until.-(count).-(1))
      if newLeft.eq(tree.left).&&(newRight.eq(tree.right)) then tree else 
        if newLeft.eq(null) then 
          scala.collection.immutable.RedBlackTree.updNth[A, B, B](newRight, from.-(count).-(1), tree.key, tree.value, 
            false
          )
         else 
          if newRight.eq(null) then 
            scala.collection.immutable.RedBlackTree.updNth[A, B, B](newLeft, until, tree.key, tree.value, false)
           else scala.collection.immutable.RedBlackTree.rebalance[A, B](tree, newLeft, newRight)
    }
  private def compareDepth[A, B](left: scala.collection.immutable.RedBlackTree.Tree[A, B], 
    right: scala.collection.immutable.RedBlackTree.Tree[A, B]
  ): 
    (scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]], Boolean, Boolean
      , 
    Int)
   = 
    {
      def unzip(
        zipper: scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]]
      , leftMost: Boolean): 
        scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]]
       = 
        {
          def tailLabel54(
            zipper: scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]]
          , leftMost: Boolean): 
            scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]]
           = 
            {
              val next: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
                if leftMost then zipper.head.left else zipper.head.right
              if next.eq(null) then zipper else 
                tailLabel54(
                  scala.collection.immutable.RedBlackTree.NList.cons[scala.collection.immutable.RedBlackTree.Tree[A, B]]
                    (
                  next, zipper)
                , leftMost)
            }
          tailLabel54(zipper, leftMost)
        }
      def unzipBoth(left: scala.collection.immutable.RedBlackTree.Tree[A, B], 
        right: scala.collection.immutable.RedBlackTree.Tree[A, B]
      , leftZipper: scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]], 
        rightZipper: scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]]
      , smallerDepth: Int): 
        (scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]], Boolean, 
          Boolean
        , Int)
       = 
        {
          def tailLabel55(left: scala.collection.immutable.RedBlackTree.Tree[A, B], 
            right: scala.collection.immutable.RedBlackTree.Tree[A, B]
          , 
            leftZipper: 
              scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]]
          , 
            rightZipper: 
              scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]]
          , smallerDepth: Int): 
            (scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]], Boolean
              , 
            Boolean, Int)
           = 
            if 
              scala.collection.immutable.RedBlackTree.isBlackTree(left).&&(
                scala.collection.immutable.RedBlackTree.isBlackTree(right)
              )
             then 
              tailLabel55(left.right, right.left, 
                scala.collection.immutable.RedBlackTree.NList.cons[scala.collection.immutable.RedBlackTree.Tree[A, B]](
                  left
                , leftZipper)
              , 
                scala.collection.immutable.RedBlackTree.NList.cons[scala.collection.immutable.RedBlackTree.Tree[A, B]](
                  right
                , rightZipper)
              , 1.+(smallerDepth))
             else 
              if 
                scala.collection.immutable.RedBlackTree.isRedTree(left).&&(
                  scala.collection.immutable.RedBlackTree.isRedTree(right)
                )
               then 
                tailLabel55(left.right, right.left, 
                  scala.collection.immutable.RedBlackTree.NList.cons[scala.collection.immutable.RedBlackTree.Tree[A, B]]
                    (
                  left, leftZipper)
                , 
                  scala.collection.immutable.RedBlackTree.NList.cons[scala.collection.immutable.RedBlackTree.Tree[A, B]]
                    (
                  right, rightZipper)
                , smallerDepth)
               else 
                if scala.collection.immutable.RedBlackTree.isRedTree(right) then 
                  tailLabel55(left, right.left, leftZipper, 
                    scala.collection.immutable.RedBlackTree.NList.cons[
                      scala.collection.immutable.RedBlackTree.Tree[A, B]
                    ](right, rightZipper)
                  , smallerDepth)
                 else 
                  if scala.collection.immutable.RedBlackTree.isRedTree(left) then 
                    tailLabel55(left.right, right, 
                      scala.collection.immutable.RedBlackTree.NList.cons[
                        scala.collection.immutable.RedBlackTree.Tree[A, B]
                      ](left, leftZipper)
                    , rightZipper, smallerDepth)
                   else 
                    if left.eq(null).&&(right.eq(null)) then 
                      new Tuple4[Null, Boolean, Boolean, Int](null, true, false, smallerDepth)
                     else sys.package.error("unmatched trees in unzip: ".+(left).+(", ").+(right))
          tailLabel55(left, right, leftZipper, rightZipper, smallerDepth)
        }
      unzipBoth(left, right, null, null, 0)
    }
  private def rebalance[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], 
    newLeft: scala.collection.immutable.RedBlackTree.Tree[A, B]
  , newRight: scala.collection.immutable.RedBlackTree.Tree[A, B]): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
    {
      @annotation.tailrec() def findDepth(
        zipper: scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]]
      , depth: Int): scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]]
         = 
      {
        def tailLabel57(
          zipper: scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]]
        , depth: Int): scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]]
           = 
        if zipper.eq(null) then sys.package.error("Defect: unexpected empty zipper while computing range") else 
          if scala.collection.immutable.RedBlackTree.isBlackTree(zipper.head) then 
            if depth.==(1) then zipper else tailLabel57(zipper.tail, depth.-(1))
           else tailLabel57(zipper.tail, depth)
        tailLabel57(zipper, depth)
      }
      val blkNewLeft: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
        scala.collection.immutable.RedBlackTree.blacken[A, B](newLeft)
      val blkNewRight: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
        scala.collection.immutable.RedBlackTree.blacken[A, B](newRight)
      var ilo5: scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]]
      var ilo6: Boolean
      var ilo7: Boolean
      var ilo8: Int
      case val x46: 
        (scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]], Boolean, 
          Boolean
        , Int) @unchecked
       = 
        scala.collection.immutable.RedBlackTree.compareDepth[A, B](blkNewLeft, blkNewRight): 
          (scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]], Boolean, 
            Boolean
          , Int) @unchecked
      if x46.ne(null) then 
        {
          ilo5 = x46._1
          ilo6 = x46._2
          ilo7 = x46._3
          ilo8 = x46._4
          ()
        }
       else throw new MatchError(x46)
      val leftMost: Boolean = ilo7
      if ilo6 then 
        /* inlined from scala.collection.immutable.RedBlackTree*/ 
          {
            new scala.collection.immutable.RedBlackTree.BlackTree[A, B](tree.key, tree.value, blkNewLeft, blkNewRight)
          }
       else 
        {
          val zipFrom: scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]]
             = 
          findDepth(ilo5, ilo8)
          val union: scala.collection.immutable.RedBlackTree.RedTree[A, B] = 
            if leftMost then 
              /* inlined from scala.collection.immutable.RedBlackTree*/ 
                {
                  new scala.collection.immutable.RedBlackTree.RedTree[A, B](tree.key, tree.value, blkNewLeft, 
                    zipFrom.head
                  )
                }
             else 
              /* inlined from scala.collection.immutable.RedBlackTree*/ 
                {
                  new scala.collection.immutable.RedBlackTree.RedTree[A, B](tree.key, tree.value, zipFrom.head, 
                    blkNewRight
                  )
                }
          val zippedTree: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
            scala.collection.immutable.RedBlackTree.NList.foldLeft[scala.collection.immutable.RedBlackTree.Tree[A, B], 
              scala.collection.immutable.RedBlackTree.Tree[A, B]
            ](zipFrom.tail, union: scala.collection.immutable.RedBlackTree.Tree[A, B])(
              {
                def $anonfun(tree: scala.collection.immutable.RedBlackTree.Tree[A, B], 
                  node: scala.collection.immutable.RedBlackTree.Tree[A, B]
                ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
                  if leftMost then 
                    scala.collection.immutable.RedBlackTree.balanceLeft[A, B, B](
                      scala.collection.immutable.RedBlackTree.isBlackTree(node)
                    , node.key, node.value, tree, node.right)
                   else 
                    scala.collection.immutable.RedBlackTree.balanceRight[A, B, B](
                      scala.collection.immutable.RedBlackTree.isBlackTree(node)
                    , node.key, node.value, node.left, tree)
                closure($anonfun)
              }
            )
          zippedTree: scala.collection.immutable.RedBlackTree.Tree[A, B]
        }
    }
  private final class NList[A](head: A, tail: scala.collection.immutable.RedBlackTree.NList[A]) extends Object() { 
    private type A
    <accessor> def head: NList.this.A
    <accessor> def tail: scala.collection.immutable.RedBlackTree.NList[NList.this.A]
  }
  private final lazy module val NList: scala.collection.immutable.RedBlackTree.NList = 
    new scala.collection.immutable.RedBlackTree.NList()
  private final module class NList() extends Object() { 
    def cons[B](x: B, xs: scala.collection.immutable.RedBlackTree.NList[B]): 
      scala.collection.immutable.RedBlackTree.NList[B]
     = new scala.collection.immutable.RedBlackTree.NList[B](x, xs)
    def foldLeft[A, B](xs: scala.collection.immutable.RedBlackTree.NList[A], z: B)(f: (B, A) => B): B = 
      {
        var acc: B = z
        var these: scala.collection.immutable.RedBlackTree.NList[A] = xs
        {
          def while$(): Unit = 
            if these.ne(null) then 
              {
                {
                  acc = f.apply(acc, these.head)
                  these = these.tail
                }
                while$()
              }
             else ()
          while$()
        }
        acc: B
      }
  }
  @scala.annotation.internal.Child[scala.collection.immutable.RedBlackTree.BlackTree]() @scala.annotation.internal.Child
    [
  scala.collection.immutable.RedBlackTree.RedTree]() sealed abstract class Tree[A, B](@inline() key: A, 
    @inline() value: B
  , @inline() left: scala.collection.immutable.RedBlackTree.Tree[A, B], 
    @inline() right: scala.collection.immutable.RedBlackTree.Tree[A, B]
  ) extends Object() with Serializable { 
    private type A
    private type +B
    @inline() final <accessor> def key: Tree.this.A
    @inline() final <accessor> def value: Tree.this.B
    @inline() final <accessor> def left: scala.collection.immutable.RedBlackTree.Tree[Tree.this.A, Tree.this.B]
    @inline() final <accessor> def right: scala.collection.immutable.RedBlackTree.Tree[Tree.this.A, Tree.this.B]
    @inline() final <accessor> def count: Int = 
      1.+(scala.collection.immutable.RedBlackTree.count(Tree.this.left)).+(
        scala.collection.immutable.RedBlackTree.count(Tree.this.right)
      )
    def black: scala.collection.immutable.RedBlackTree.Tree[Tree.this.A, Tree.this.B]
    def red: scala.collection.immutable.RedBlackTree.Tree[Tree.this.A, Tree.this.B]
  }
  final class RedTree[A, B](key: A, value: B, left: scala.collection.immutable.RedBlackTree.Tree[A, B], 
    right: scala.collection.immutable.RedBlackTree.Tree[A, B]
  ) extends scala.collection.immutable.RedBlackTree.Tree[RedTree.this.A, RedTree.this.B](key, value, left, right) { 
    private type A
    private type +B
    private def key: RedTree.this.A = super.key
    private def value: RedTree.this.B = super.value
    private def left: scala.collection.immutable.RedBlackTree.Tree[RedTree.this.A, RedTree.this.B] = super.left
    private def right: scala.collection.immutable.RedBlackTree.Tree[RedTree.this.A, RedTree.this.B] = super.right
    override def black: scala.collection.immutable.RedBlackTree.Tree[RedTree.this.A, RedTree.this.B] = 
      /* inlined from scala.collection.immutable.RedBlackTree*/ 
        {
          new scala.collection.immutable.RedBlackTree.BlackTree[RedTree.this.A, RedTree.this.B](RedTree.this.key, 
            RedTree.this.value
          , RedTree.this.left, RedTree.this.right)
        }
    override def red: scala.collection.immutable.RedBlackTree.Tree[RedTree.this.A, RedTree.this.B] = this
    override def toString: String = 
      "RedTree(".+(RedTree.this.key).+(", ").+(RedTree.this.value).+(", ").+(RedTree.this.left).+(", ").+(
        RedTree.this.right
      ).+(")")
  }
  final class BlackTree[A, B](key: A, value: B, left: scala.collection.immutable.RedBlackTree.Tree[A, B], 
    right: scala.collection.immutable.RedBlackTree.Tree[A, B]
  ) extends scala.collection.immutable.RedBlackTree.Tree[BlackTree.this.A, BlackTree.this.B](key, value, left, right) { 
    private type A
    private type +B
    private def key: BlackTree.this.A = super.key
    private def value: BlackTree.this.B = super.value
    private def left: scala.collection.immutable.RedBlackTree.Tree[BlackTree.this.A, BlackTree.this.B] = super.left
    private def right: scala.collection.immutable.RedBlackTree.Tree[BlackTree.this.A, BlackTree.this.B] = super.right
    override def black: scala.collection.immutable.RedBlackTree.Tree[BlackTree.this.A, BlackTree.this.B] = this
    override def red: scala.collection.immutable.RedBlackTree.Tree[BlackTree.this.A, BlackTree.this.B] = 
      /* inlined from scala.collection.immutable.RedBlackTree*/ 
        {
          new scala.collection.immutable.RedBlackTree.RedTree[BlackTree.this.A, BlackTree.this.B](BlackTree.this.key, 
            BlackTree.this.value
          , BlackTree.this.left, BlackTree.this.right)
        }
    override def toString: String = 
      "BlackTree(".+(BlackTree.this.key).+(", ").+(BlackTree.this.value).+(", ").+(BlackTree.this.left).+(", ").+(
        BlackTree.this.right
      ).+(")")
  }
  final lazy module val RedTree: scala.collection.immutable.RedBlackTree.RedTree = 
    new scala.collection.immutable.RedBlackTree.RedTree()
  final module class RedTree() extends Object() { 
    @scala.collection.immutable.RedBlackTree.RedTree[A, B](key, value, left, right) @inline() inline def apply[A, B](
      key: A
    , value: B, left: scala.collection.immutable.RedBlackTree.Tree[A, B], 
      right: scala.collection.immutable.RedBlackTree.Tree[A, B]
    ): scala.collection.immutable.RedBlackTree.RedTree[A, B] = 
      new scala.collection.immutable.RedBlackTree.RedTree[A, B](key, value, left, right)
    def unapply[A, B](t: scala.collection.immutable.RedBlackTree.RedTree[A, B]): 
      Some[(A, B, scala.collection.immutable.RedBlackTree.Tree[A, B], scala.collection.immutable.RedBlackTree.Tree[A, B]
        )
      ]
     = 
      new Some[
        (A, B, scala.collection.immutable.RedBlackTree.Tree[A, B], scala.collection.immutable.RedBlackTree.Tree[A, B])
      ](
        new Tuple4[A, B, scala.collection.immutable.RedBlackTree.Tree[A, B], 
          scala.collection.immutable.RedBlackTree.Tree[A, B]
        ](t.key, t.value, t.left, t.right)
      )
  }
  final lazy module val BlackTree: scala.collection.immutable.RedBlackTree.BlackTree = 
    new scala.collection.immutable.RedBlackTree.BlackTree()
  final module class BlackTree() extends Object() { 
    @scala.collection.immutable.RedBlackTree.BlackTree[A, B](key, value, left, right) @inline() inline def apply[A, B](
      key: A
    , value: B, left: scala.collection.immutable.RedBlackTree.Tree[A, B], 
      right: scala.collection.immutable.RedBlackTree.Tree[A, B]
    ): scala.collection.immutable.RedBlackTree.BlackTree[A, B] = 
      new scala.collection.immutable.RedBlackTree.BlackTree[A, B](key, value, left, right)
    def unapply[A, B](t: scala.collection.immutable.RedBlackTree.BlackTree[A, B]): 
      Some[(A, B, scala.collection.immutable.RedBlackTree.Tree[A, B], scala.collection.immutable.RedBlackTree.Tree[A, B]
        )
      ]
     = 
      new Some[
        (A, B, scala.collection.immutable.RedBlackTree.Tree[A, B], scala.collection.immutable.RedBlackTree.Tree[A, B])
      ](
        new Tuple4[A, B, scala.collection.immutable.RedBlackTree.Tree[A, B], 
          scala.collection.immutable.RedBlackTree.Tree[A, B]
        ](t.key, t.value, t.left, t.right)
      )
  }
  private abstract class TreeIterator[A, B, R](root: scala.collection.immutable.RedBlackTree.Tree[A, B], 
    start: Option[A]
  )(implicit ordering: Ordering[A]) extends Object() with Iterator[TreeIterator.this.R] { 
    protected def sizeHintIfCheap: Int = super[GenTraversableOnce].sizeHintIfCheap
    protected def reversed: List[TreeIterator.this.R] = super[TraversableOnce].reversed
    def size: Int = super[TraversableOnce].size
    def nonEmpty: Boolean = super[TraversableOnce].nonEmpty
    def count(p: TreeIterator.this.R => Boolean): Int = super[TraversableOnce].count(p)
    def collectFirst[B](pf: PartialFunction[TreeIterator.this.R, B]): Option[B] = 
      super[TraversableOnce].collectFirst[B](pf)
    def /:[B](z: B)(op: (B, TreeIterator.this.R) => B): B = super[TraversableOnce]./:[B](z)(op)
    def :\[B](z: B)(op: (TreeIterator.this.R, B) => B): B = super[TraversableOnce].:\[B](z)(op)
    def foldLeft[B](z: B)(op: (B, TreeIterator.this.R) => B): B = super[TraversableOnce].foldLeft[B](z)(op)
    def foldRight[B](z: B)(op: (TreeIterator.this.R, B) => B): B = super[TraversableOnce].foldRight[B](z)(op)
    def reduceLeft[B >: TreeIterator.this.R](op: (B, TreeIterator.this.R) => B): B = 
      super[TraversableOnce].reduceLeft[B](op)
    def reduceRight[B >: TreeIterator.this.R](op: (TreeIterator.this.R, B) => B): B = 
      super[TraversableOnce].reduceRight[B](op)
    def reduceLeftOption[B >: TreeIterator.this.R](op: (B, TreeIterator.this.R) => B): Option[B] = 
      super[TraversableOnce].reduceLeftOption[B](op)
    def reduceRightOption[B >: TreeIterator.this.R](op: (TreeIterator.this.R, B) => B): Option[B] = 
      super[TraversableOnce].reduceRightOption[B](op)
    def reduce[A1 >: TreeIterator.this.R](op: (A1, A1) => A1): A1 = super[TraversableOnce].reduce[A1](op)
    def reduceOption[A1 >: TreeIterator.this.R](op: (A1, A1) => A1): Option[A1] = 
      super[TraversableOnce].reduceOption[A1](op)
    def fold[A1 >: TreeIterator.this.R](z: A1)(op: (A1, A1) => A1): A1 = super[TraversableOnce].fold[A1](z)(op)
    def aggregate[B](z: => B)(seqop: (B, TreeIterator.this.R) => B, combop: (B, B) => B): B = 
      super[TraversableOnce].aggregate[B](z)(seqop, combop)
    def sum[B >: TreeIterator.this.R](implicit num: Numeric[B]): B = super[TraversableOnce].sum[B](num)
    def product[B >: TreeIterator.this.R](implicit num: Numeric[B]): B = super[TraversableOnce].product[B](num)
    def min[B >: TreeIterator.this.R](implicit cmp: Ordering[B]): TreeIterator.this.R = 
      super[TraversableOnce].min[B](cmp)
    def max[B >: TreeIterator.this.R](implicit cmp: Ordering[B]): TreeIterator.this.R = 
      super[TraversableOnce].max[B](cmp)
    def maxBy[B](f: TreeIterator.this.R => B)(implicit cmp: Ordering[B]): TreeIterator.this.R = 
      super[TraversableOnce].maxBy[B](f)(cmp)
    def minBy[B](f: TreeIterator.this.R => B)(implicit cmp: Ordering[B]): TreeIterator.this.R = 
      super[TraversableOnce].minBy[B](f)(cmp)
    def copyToBuffer[B >: TreeIterator.this.R](dest: scala.collection.mutable.Buffer[B]): Unit = 
      super[TraversableOnce].copyToBuffer[B](dest)
    def copyToArray[B >: TreeIterator.this.R](xs: Array[B], start: Int): Unit = 
      super[TraversableOnce].copyToArray[B](xs, start)
    def copyToArray[B >: TreeIterator.this.R](xs: Array[B]): Unit = super[TraversableOnce].copyToArray[B](xs)
    def toArray[B >: TreeIterator.this.R](implicit evidence$1: ClassTag[B]): Array[B] = 
      super[TraversableOnce].toArray[B](evidence$1)
    def toList: List[TreeIterator.this.R] = super[TraversableOnce].toList
    def toIterable: Iterable[TreeIterator.this.R] = super[TraversableOnce].toIterable
    def toSeq: Seq[TreeIterator.this.R] = super[TraversableOnce].toSeq
    def toIndexedSeq: scala.collection.immutable.IndexedSeq[TreeIterator.this.R] = super[TraversableOnce].toIndexedSeq
    def toBuffer[B >: TreeIterator.this.R]: scala.collection.mutable.Buffer[B] = super[TraversableOnce].toBuffer[B]
    def toSet[B >: TreeIterator.this.R]: Set[B] = super[TraversableOnce].toSet[B]
    def toVector: Vector[TreeIterator.this.R] = super[TraversableOnce].toVector
    def to[Col <: [_] => Any](
      implicit cbf: 
        scala.collection.generic.CanBuildFrom[Nothing, TreeIterator.this.R, Col[TreeIterator.this.R @uncheckedVariance]]
    ): Col[TreeIterator.this.R @uncheckedVariance] = super[TraversableOnce].to[Col](cbf)
    def toMap[T, U](implicit ev: TreeIterator.this.R <:< (T, U)): Map[T, U] = super[TraversableOnce].toMap[T, U](ev)
    def mkString(start: String, sep: String, end: String): String = super[TraversableOnce].mkString(start, sep, end)
    def mkString(sep: String): String = super[TraversableOnce].mkString(sep)
    def mkString: String = super[TraversableOnce].mkString
    def addString(b: StringBuilder, start: String, sep: String, end: String): StringBuilder = 
      super[TraversableOnce].addString(b, start, sep, end)
    def addString(b: StringBuilder, sep: String): StringBuilder = super[TraversableOnce].addString(b, sep)
    def addString(b: StringBuilder): StringBuilder = super[TraversableOnce].addString(b)
    def seq: Iterator[TreeIterator.this.R] = super[Iterator].seq
    def isEmpty: Boolean = super[Iterator].isEmpty
    def isTraversableAgain: Boolean = super[Iterator].isTraversableAgain
    def hasDefiniteSize: Boolean = super[Iterator].hasDefiniteSize
    def take(n: Int): Iterator[TreeIterator.this.R] = super[Iterator].take(n)
    def drop(n: Int): Iterator[TreeIterator.this.R] = super[Iterator].drop(n)
    def slice(from: Int, until: Int): Iterator[TreeIterator.this.R] = super[Iterator].slice(from, until)
    protected def sliceIterator(from: Int, until: Int): Iterator[TreeIterator.this.R] = 
      super[Iterator].sliceIterator(from, until)
    def map[B](f: TreeIterator.this.R => B): Iterator[B] = super[Iterator].map[B](f)
    def ++[B >: TreeIterator.this.R](that: => scala.collection.GenTraversableOnce[B]): Iterator[B] = 
      super[Iterator].++[B](that)
    def flatMap[B](f: TreeIterator.this.R => scala.collection.GenTraversableOnce[B]): Iterator[B] = 
      super[Iterator].flatMap[B](f)
    def filter(p: TreeIterator.this.R => Boolean): Iterator[TreeIterator.this.R] = super[Iterator].filter(p)
    def corresponds[B](that: scala.collection.GenTraversableOnce[B])(p: (TreeIterator.this.R, B) => Boolean): Boolean = 
      super[Iterator].corresponds[B](that)(p)
    def withFilter(p: TreeIterator.this.R => Boolean): Iterator[TreeIterator.this.R] = super[Iterator].withFilter(p)
    def filterNot(p: TreeIterator.this.R => Boolean): Iterator[TreeIterator.this.R] = super[Iterator].filterNot(p)
    @scala.annotation.migration("`collect` has changed. The previous behavior can be reproduced with `toSeq`.", "2.8.0")
       
    def collect[B](pf: PartialFunction[TreeIterator.this.R, B]): Iterator[B] = super[Iterator].collect[B](pf)
    def scanLeft[B](z: B)(op: (B, TreeIterator.this.R) => B): Iterator[B] = super[Iterator].scanLeft[B](z)(op)
    def scanRight[B](z: B)(op: (TreeIterator.this.R, B) => B): Iterator[B] = super[Iterator].scanRight[B](z)(op)
    def takeWhile(p: TreeIterator.this.R => Boolean): Iterator[TreeIterator.this.R] = super[Iterator].takeWhile(p)
    def partition(p: TreeIterator.this.R => Boolean): (Iterator[TreeIterator.this.R], Iterator[TreeIterator.this.R]) = 
      super[Iterator].partition(p)
    def span(p: TreeIterator.this.R => Boolean): (Iterator[TreeIterator.this.R], Iterator[TreeIterator.this.R]) = 
      super[Iterator].span(p)
    def dropWhile(p: TreeIterator.this.R => Boolean): Iterator[TreeIterator.this.R] = super[Iterator].dropWhile(p)
    def zip[B](that: Iterator[B]): Iterator[(TreeIterator.this.R, B)] = super[Iterator].zip[B](that)
    def padTo[A1 >: TreeIterator.this.R](len: Int, elem: A1): Iterator[A1] = super[Iterator].padTo[A1](len, elem)
    def zipWithIndex: Iterator[(TreeIterator.this.R, Int)] = super[Iterator].zipWithIndex
    def zipAll[B, A1 >: TreeIterator.this.R, B1 >: B](that: Iterator[B], thisElem: A1, thatElem: B1): Iterator[(A1, B1)]
       = 
    super[Iterator].zipAll[B, A1, B1](that, thisElem, thatElem)
    def foreach[U](f: TreeIterator.this.R => U): Unit = super[Iterator].foreach[U](f)
    def forall(p: TreeIterator.this.R => Boolean): Boolean = super[Iterator].forall(p)
    def exists(p: TreeIterator.this.R => Boolean): Boolean = super[Iterator].exists(p)
    def contains(elem: Any): Boolean = super[Iterator].contains(elem)
    def find(p: TreeIterator.this.R => Boolean): Option[TreeIterator.this.R] = super[Iterator].find(p)
    def indexWhere(p: TreeIterator.this.R => Boolean): Int = super[Iterator].indexWhere(p)
    def indexWhere(p: TreeIterator.this.R => Boolean, from: Int): Int = super[Iterator].indexWhere(p, from)
    def indexOf[B >: TreeIterator.this.R](elem: B): Int = super[Iterator].indexOf[B](elem)
    def indexOf[B >: TreeIterator.this.R](elem: B, from: Int): Int = super[Iterator].indexOf[B](elem, from)
    def buffered: BufferedIterator[TreeIterator.this.R] = super[Iterator].buffered
    def grouped[B >: TreeIterator.this.R](size: Int): TreeIterator.this.GroupedIterator[B] = 
      super[Iterator].grouped[B](size)
    def sliding[B >: TreeIterator.this.R](size: Int, step: Int): TreeIterator.this.GroupedIterator[B] = 
      super[Iterator].sliding[B](size, step)
    def length: Int = super[Iterator].length
    def duplicate: (Iterator[TreeIterator.this.R], Iterator[TreeIterator.this.R]) = super[Iterator].duplicate
    def patch[B >: TreeIterator.this.R](from: Int, patchElems: Iterator[B], replaced: Int): Iterator[B] = 
      super[Iterator].patch[B](from, patchElems, replaced)
    def copyToArray[B >: TreeIterator.this.R](xs: Array[B], start: Int, len: Int): Unit = 
      super[Iterator].copyToArray[B](xs, start, len)
    def sameElements(that: Iterator[_]): Boolean = super[Iterator].sameElements(that)
    def toTraversable: Traversable[TreeIterator.this.R] = super[Iterator].toTraversable
    def toIterator: Iterator[TreeIterator.this.R] = super[Iterator].toIterator
    def toStream: Stream[TreeIterator.this.R] = super[Iterator].toStream
    override def toString(): String = super[Iterator].toString()
    def sliding$default$2[B >: TreeIterator.this.R]: Int @uncheckedVariance = super[Iterator].sliding$default$2[B]
    private type A
    private type B
    private type R
    private val root: scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]
    private val start: Option[TreeIterator.this.A]
    private implicit val ordering: Ordering[TreeIterator.this.A]
    protected def nextResult(
      tree: scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]
    ): TreeIterator.this.R
    override def hasNext: Boolean = this.lookahead.ne(null)
    override def next(): TreeIterator.this.R = 
      {
        case val x51: 
          scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B](TreeIterator.this.
            lookahead
          )
         = this.lookahead
        if null.==(x51) then throw new NoSuchElementException("next on empty iterator") else 
          {
            this.lookahead = this.findLeftMostOrPopOnEmpty(this.goRight(x51))
            this.nextResult(x51)
          }
      }
    private def findLeftMostOrPopOnEmpty(
      tree: scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]
    ): scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B] = 
      {
        def tailLabel80[A, B, R]($this: scala.collection.immutable.RedBlackTree.TreeIterator[A, B, R])(
          tree: scala.collection.immutable.RedBlackTree.Tree[A, B]
        ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
          if tree.eq(null) then $this.popNext() else 
            if tree.left.eq(null) then tree else tailLabel80[A, B, R]($this)($this.goLeft(tree))
        tailLabel80[TreeIterator.this.A, TreeIterator.this.B, TreeIterator.this.R](this)(tree)
      }
    private def pushNext(tree: scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]): 
      Unit
     = 
      {
        def tailLabel81[A, B, R]($this: scala.collection.immutable.RedBlackTree.TreeIterator[A, B, R])(
          tree: scala.collection.immutable.RedBlackTree.Tree[A, B]
        ): Unit = 
          try 
            {
              $this.stackOfNexts.update($this.index, tree)
              $this.index = 1.+($this.index)
            }
           catch 
            {
              case _: ArrayIndexOutOfBoundsException => 
                assert($this.index.>=($this.stackOfNexts.length))
                $this.stackOfNexts = 
                  refArrayOps[scala.collection.immutable.RedBlackTree.Tree[A, B]]($this.stackOfNexts).:+[
                    scala.collection.immutable.RedBlackTree.Tree[A, B]
                  ](null)(
                    scala.reflect.ClassTag.apply[scala.collection.immutable.RedBlackTree.Tree[A, B]](classOf[class Tree]
                      )
                  )
                tailLabel81[A, B, R]($this)(tree)
            }
        tailLabel81[TreeIterator.this.A, TreeIterator.this.B, TreeIterator.this.R](this)(tree)
      }
    private def popNext(): scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B] = 
      if this.index.==(0) then null else 
        {
          this.index = this.index.-(1)
          this.stackOfNexts.apply(this.index)
        }
    private var stackOfNexts: 
      Array[scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]]
     = 
      if TreeIterator.this.root.eq(null) then null else 
        {
          val maximumHeight: Int = 
            2.*(32.-(Integer.numberOfLeadingZeros(TreeIterator.this.root.count.+(2).-(1)))).-(2).-(1)
          dotty.runtime.Arrays.newArray[
            Array[scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]]
          ](classOf[class Tree], classOf[class Array], [maximumHeight : Int])
        }
    private var index: Int = 0
    private var lookahead: scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B] = 
      TreeIterator.this.start.map[scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]
        ]
      (
        {
          def $anonfun(key: TreeIterator.this.A): 
            scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]
           = this.startFrom(key)
          closure($anonfun)
        }
      ).getOrElse[scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]](
        <special-ops>.<cbn-arg>[scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]](
          {
            def $anonfun(): scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B] = 
              this.findLeftMostOrPopOnEmpty(TreeIterator.this.root)
            closure($anonfun)
          }
        )
      )
    private def startFrom(key: TreeIterator.this.A): 
      scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]
     = 
      if TreeIterator.this.root.eq(null) then null else 
        {
          @annotation.tailrec() def find(
            tree: scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]
          ): scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B] = 
            {
              def tailLabel84(
                tree: scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]
              ): scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B] = 
                if tree.eq(null) then this.popNext() else 
                  tailLabel84(
                    if TreeIterator.this.ordering.lteq(key, tree.key) then this.goLeft(tree) else this.goRight(tree)
                  )
              tailLabel84(tree)
            }
          find(TreeIterator.this.root)
        }
    private def goLeft(tree: scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]): 
      scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]
     = 
      {
        this.pushNext(tree)
        tree.left
      }
    private def goRight(tree: scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]): 
      scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]
     = tree.right
  }
  private class EntriesIterator[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], focus: Option[A])(
    implicit evidence$16: Ordering[A]
  ) extends scala.collection.immutable.RedBlackTree.TreeIterator[EntriesIterator.this.A, EntriesIterator.this.B, 
    (EntriesIterator.this.A, EntriesIterator.this.B)
  ](tree, focus)(evidence$16) { 
    private type A
    private type B
    private val tree: scala.collection.immutable.RedBlackTree.Tree[EntriesIterator.this.A, EntriesIterator.this.B]
    private val focus: Option[EntriesIterator.this.A]
    private implicit val evidence$16: Ordering[EntriesIterator.this.A]
    override def nextResult(
      tree: scala.collection.immutable.RedBlackTree.Tree[EntriesIterator.this.A, EntriesIterator.this.B]
    ): (EntriesIterator.this.A, EntriesIterator.this.B) = 
      new Tuple2[EntriesIterator.this.A, EntriesIterator.this.B](tree.key, tree.value)
  }
  private class KeysIterator[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], focus: Option[A])(
    implicit evidence$17: Ordering[A]
  ) extends scala.collection.immutable.RedBlackTree.TreeIterator[KeysIterator.this.A, KeysIterator.this.B, 
    KeysIterator.this.A
  ](tree, focus)(evidence$17) { 
    private type A
    private type B
    private val tree: scala.collection.immutable.RedBlackTree.Tree[KeysIterator.this.A, KeysIterator.this.B]
    private val focus: Option[KeysIterator.this.A]
    private implicit val evidence$17: Ordering[KeysIterator.this.A]
    override def nextResult(tree: scala.collection.immutable.RedBlackTree.Tree[KeysIterator.this.A, KeysIterator.this.B]
      )
    : KeysIterator.this.A = tree.key
  }
  private class ValuesIterator[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], focus: Option[A])(
    implicit evidence$18: Ordering[A]
  ) extends scala.collection.immutable.RedBlackTree.TreeIterator[ValuesIterator.this.A, ValuesIterator.this.B, 
    ValuesIterator.this.B
  ](tree, focus)(evidence$18) { 
    private type A
    private type B
    private val tree: scala.collection.immutable.RedBlackTree.Tree[ValuesIterator.this.A, ValuesIterator.this.B]
    private val focus: Option[ValuesIterator.this.A]
    private implicit val evidence$18: Ordering[ValuesIterator.this.A]
    override def nextResult(
      tree: scala.collection.immutable.RedBlackTree.Tree[ValuesIterator.this.A, ValuesIterator.this.B]
    ): ValuesIterator.this.B = tree.value
  }
} of class class dotty.tools.dotc.ast.Trees$TypeDef # 732658
[====================>                  ] completed (509/940, 54s)[====================>                  ] completed (509/940, 54s)[====================>                  ] completed (509/940, 54s)exception while typing package scala.collection.immutable {
  final lazy module val RedBlackTree: scala.collection.immutable.RedBlackTree = 
    new scala.collection.immutable.RedBlackTree()
  @scala.annotation.internal.SourceFile(
    "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/rbtree.scala"
  ) final module class RedBlackTree() extends Object() { 
    def isEmpty(tree: scala.collection.immutable.RedBlackTree.Tree[_, _]): Boolean = tree.eq(null)
    def contains[A](tree: scala.collection.immutable.RedBlackTree.Tree[A, _], x: A)(implicit evidence$1: Ordering[A]): 
      Boolean
     = scala.collection.immutable.RedBlackTree.lookup[A, Any](tree, x)(evidence$1).ne(null)
    def get[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], x: A)(implicit evidence$2: Ordering[A]): 
      Option[B]
     = 
      {
        case val x1: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
          scala.collection.immutable.RedBlackTree.lookup[A, B](tree, x)(evidence$2)
        if null.==(x1) then None else new Some[B](x1.value)
      }
    @annotation.tailrec() def lookup[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], x: A)(
      implicit ordering: Ordering[A]
    ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
      {
        def tailLabel4[A, B]($this: scala.collection.immutable.RedBlackTree.type)(
          tree: scala.collection.immutable.RedBlackTree.Tree[A, B]
        , x: A)(implicit ordering: Ordering[A]): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
          if tree.eq(null) then null else 
            {
              val cmp: Int = ordering.compare(x, tree.key)
              if cmp.<(0) then tailLabel4[A, B]($this)(tree.left, x)(ordering) else 
                if cmp.>(0) then tailLabel4[A, B]($this)(tree.right, x)(ordering) else tree
            }
        tailLabel4[A, B](this)(tree, x)(ordering)
      }
    def count(tree: scala.collection.immutable.RedBlackTree.Tree[_, _]): Int = if tree.eq(null) then 0 else tree.count
    def countInRange[A](tree: scala.collection.immutable.RedBlackTree.Tree[A, _], from: Option[A], to: Option[A])(
      implicit ordering: Ordering[A]
    ): Int = 
      {
        def tailLabel6[A]($this: scala.collection.immutable.RedBlackTree.type)(
          tree: scala.collection.immutable.RedBlackTree.Tree[A, _]
        , from: Option[A], to: Option[A])(implicit ordering: Ordering[A]): Int = 
          if tree.eq(null) then 0 else 
            {
              def case4(): Int = 
                1.+(scala.collection.immutable.RedBlackTree.countInRange[A](tree.left, from, None)(ordering)).+(
                  scala.collection.immutable.RedBlackTree.countInRange[A](tree.right, None, to)(ordering)
                )
              def case5(case x16: Option[A]): Int = 
                if x16.$isInstanceOf$[Some[A]] then 
                  {
                    case val x5: Some[A] = x16.asInstanceOf[Some[A]]
                    if ordering.gteq(tree.key, x5.value) then tailLabel6[A]($this)(tree.left, from, to)(ordering) else 
                      case4()
                  }
                 else case4()
              if None.==(from).&&(None.==(to)) then tree.count else 
                {
                  case x13: Option[A] = from
                  case x14: Option[A] = to
                  if x13.$isInstanceOf$[Some[A]] then 
                    {
                      case val x9: Some[A] = x13.asInstanceOf[Some[A]]
                      if ordering.lt(tree.key, x9.value) then tailLabel6[A]($this)(tree.right, from, to)(ordering) else 
                        case5(x14)
                    }
                   else case5(x14)
                }
            }
        tailLabel6[A](this)(tree, from, to)(ordering)
      }
    def update[A, B, B1 >: B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], k: A, v: B1, overwrite: Boolean)
      (
    implicit evidence$3: Ordering[A]): scala.collection.immutable.RedBlackTree.Tree[A, B1] = 
      scala.collection.immutable.RedBlackTree.blacken[A, B1](
        scala.collection.immutable.RedBlackTree.upd[A, B, B1](tree, k, v, overwrite)(evidence$3)
      )
    def delete[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], k: A)(implicit evidence$4: Ordering[A]): 
      scala.collection.immutable.RedBlackTree.Tree[A, B]
     = 
      scala.collection.immutable.RedBlackTree.blacken[A, B](
        scala.collection.immutable.RedBlackTree.del[A, B](tree, k)(evidence$4)
      )
    def rangeImpl[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], from: Option[A], until: Option[A])(
      implicit evidence$5: Ordering[A]
    ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
      {
        case val x19: (Option[A], Option[A]) = new Tuple2[Option[A], Option[A]](from, until)
        def case9(case x42: Option[A], case x43: Option[A]): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
          if None.==(x42).&&(x43.$isInstanceOf$[Some[A]]) then 
            {
              case val x24: Some[A] = x43.asInstanceOf[Some[A]]
              this.until[A, B](tree, x24.value)(evidence$5)
            }
           else 
            {
              case x44: Option[A] = x42
              case x45: Option[A] = x43
              if None.==(x44).&&(None.==(x45)) then tree else throw new MatchError(x19)
            }
        def case10(case x38: Option[A], case x39: Option[A]): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
          if x38.$isInstanceOf$[Some[A]] then 
            {
              case val x28: Some[A] = x38.asInstanceOf[Some[A]]
              if None.==(x39) then this.from[A, B](tree, x28.value)(evidence$5) else case9(x38, x39)
            }
           else case9(x38, x39)
        if from.$isInstanceOf$[Some[A]] then 
          {
            case val x34: Some[A] = from.asInstanceOf[Some[A]]
            if until.$isInstanceOf$[Some[A]] then 
              {
                case val x32: Some[A] = until.asInstanceOf[Some[A]]
                this.range[A, B](tree, x34.value, x32.value)(evidence$5)
              }
             else case10(from, until)
          }
         else case10(from, until)
      }
    def range[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], from: A, until: A)(
      implicit evidence$6: Ordering[A]
    ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
      scala.collection.immutable.RedBlackTree.blacken[A, B](
        scala.collection.immutable.RedBlackTree.doRange[A, B](tree, from, until)(evidence$6)
      )
    def from[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], from: A)(implicit evidence$7: Ordering[A])
      : 
    scala.collection.immutable.RedBlackTree.Tree[A, B] = 
      scala.collection.immutable.RedBlackTree.blacken[A, B](
        scala.collection.immutable.RedBlackTree.doFrom[A, B](tree, from)(evidence$7)
      )
    def to[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], to: A)(implicit evidence$8: Ordering[A]): 
      scala.collection.immutable.RedBlackTree.Tree[A, B]
     = 
      scala.collection.immutable.RedBlackTree.blacken[A, B](
        scala.collection.immutable.RedBlackTree.doTo[A, B](tree, to)(evidence$8)
      )
    def until[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], key: A)(implicit evidence$9: Ordering[A])
      : 
    scala.collection.immutable.RedBlackTree.Tree[A, B] = 
      scala.collection.immutable.RedBlackTree.blacken[A, B](
        scala.collection.immutable.RedBlackTree.doUntil[A, B](tree, key)(evidence$9)
      )
    def drop[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], n: Int)(implicit evidence$10: Ordering[A])
      : 
    scala.collection.immutable.RedBlackTree.Tree[A, B] = 
      scala.collection.immutable.RedBlackTree.blacken[A, B](
        scala.collection.immutable.RedBlackTree.doDrop[A, B](tree, n)
      )
    def take[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], n: Int)(implicit evidence$11: Ordering[A])
      : 
    scala.collection.immutable.RedBlackTree.Tree[A, B] = 
      scala.collection.immutable.RedBlackTree.blacken[A, B](
        scala.collection.immutable.RedBlackTree.doTake[A, B](tree, n)
      )
    def slice[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], from: Int, until: Int)(
      implicit evidence$12: Ordering[A]
    ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
      scala.collection.immutable.RedBlackTree.blacken[A, B](
        scala.collection.immutable.RedBlackTree.doSlice[A, B](tree, from, until)
      )
    def smallest[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B]): 
      scala.collection.immutable.RedBlackTree.Tree[A, B]
     = 
      {
        if tree.eq(null) then throw new NoSuchElementException("empty map") else ()
        var result: scala.collection.immutable.RedBlackTree.Tree[A, B] = tree
        {
          def while$(): Unit = 
            if result.left.ne(null) then 
              {
                result = result.left
                while$()
              }
             else ()
          while$()
        }
        result: scala.collection.immutable.RedBlackTree.Tree[A, B]
      }
    def greatest[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B]): 
      scala.collection.immutable.RedBlackTree.Tree[A, B]
     = 
      {
        if tree.eq(null) then throw new NoSuchElementException("empty map") else ()
        var result: scala.collection.immutable.RedBlackTree.Tree[A, B] = tree
        {
          def while$(): Unit = 
            if result.right.ne(null) then 
              {
                result = result.right
                while$()
              }
             else ()
          while$()
        }
        result: scala.collection.immutable.RedBlackTree.Tree[A, B]
      }
    def foreach[A, B, U](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], f: ((A, B)) => U): Unit = 
      if tree.ne(null) then scala.collection.immutable.RedBlackTree._foreach[A, B, U](tree, f) else ()
    private def _foreach[A, B, U](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], f: ((A, B)) => U): Unit = 
      {
        def tailLabel20[A, B, U]($this: scala.collection.immutable.RedBlackTree.type)(
          tree: scala.collection.immutable.RedBlackTree.Tree[A, B]
        , f: ((A, B)) => U): Unit = 
          {
            if tree.left.ne(null) then scala.collection.immutable.RedBlackTree._foreach[A, B, U](tree.left, f) else ()
            f.apply(new Tuple2[A, B](tree.key, tree.value))
            if tree.right.ne(null) then tailLabel20[A, B, U]($this)(tree.right, f) else ()
          }
        tailLabel20[A, B, U](this)(tree, f)
      }
    def foreachKey[A, U](tree: scala.collection.immutable.RedBlackTree.Tree[A, _], f: A => U): Unit = 
      if tree.ne(null) then scala.collection.immutable.RedBlackTree._foreachKey[A, U](tree, f) else ()
    private def _foreachKey[A, U](tree: scala.collection.immutable.RedBlackTree.Tree[A, _], f: A => U): Unit = 
      {
        def tailLabel22[A, U]($this: scala.collection.immutable.RedBlackTree.type)(
          tree: scala.collection.immutable.RedBlackTree.Tree[A, _]
        , f: A => U): Unit = 
          {
            if tree.left.ne(null) then scala.collection.immutable.RedBlackTree._foreachKey[A, U](tree.left, f) else ()
            f.apply(tree.key)
            if tree.right.ne(null) then tailLabel22[A, U]($this)(tree.right, f) else ()
          }
        tailLabel22[A, U](this)(tree, f)
      }
    def iterator[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], start: Option[A])(
      implicit evidence$13: Ordering[A]
    ): Iterator[(A, B)] = new scala.collection.immutable.RedBlackTree.EntriesIterator[A, B](tree, start)(evidence$13)
    def iterator$default$2[A, B]: None.type = None
    def keysIterator[A](tree: scala.collection.immutable.RedBlackTree.Tree[A, _], start: Option[A])(
      implicit evidence$14: Ordering[A]
    ): Iterator[A] = new scala.collection.immutable.RedBlackTree.KeysIterator[A, Any](tree, start)(evidence$14)
    def keysIterator$default$2[A]: None.type = None
    def valuesIterator[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], start: Option[A])(
      implicit evidence$15: Ordering[A]
    ): Iterator[B] = new scala.collection.immutable.RedBlackTree.ValuesIterator[A, B](tree, start)(evidence$15)
    def valuesIterator$default$2[A, B]: None.type = None
    @annotation.tailrec() def nth[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], n: Int): 
      scala.collection.immutable.RedBlackTree.Tree[A, B]
     = 
      {
        def tailLabel29[A, B]($this: scala.collection.immutable.RedBlackTree.type)(
          tree: scala.collection.immutable.RedBlackTree.Tree[A, B]
        , n: Int): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
          {
            val count: Int = $this.count(tree.left)
            if n.<(count) then tailLabel29[A, B]($this)(tree.left, n) else 
              if n.>(count) then tailLabel29[A, B]($this)(tree.right, n.-(count).-(1)) else tree
          }
        tailLabel29[A, B](this)(tree, n)
      }
    def isBlack(tree: scala.collection.immutable.RedBlackTree.Tree[_, _]): Boolean = 
      tree.eq(null).||(scala.collection.immutable.RedBlackTree.isBlackTree(tree))
    private def isRedTree(tree: scala.collection.immutable.RedBlackTree.Tree[_, _]): Boolean = 
      tree.isInstanceOf[scala.collection.immutable.RedBlackTree.RedTree[_, _]]
    private def isBlackTree(tree: scala.collection.immutable.RedBlackTree.Tree[_, _]): Boolean = 
      tree.isInstanceOf[scala.collection.immutable.RedBlackTree.BlackTree[_, _]]
    private def blacken[A, B](t: scala.collection.immutable.RedBlackTree.Tree[A, B]): 
      scala.collection.immutable.RedBlackTree.Tree[A, B]
     = if t.eq(null) then null else t.black
    private def mkTree[A, B](isBlack: Boolean, k: A, v: B, l: scala.collection.immutable.RedBlackTree.Tree[A, B], 
      r: scala.collection.immutable.RedBlackTree.Tree[A, B]
    ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
      if isBlack then 
        /* inlined from scala.collection.immutable.RedBlackTree*/ 
          {
            new scala.collection.immutable.RedBlackTree.BlackTree[A, B](k, v, l, r)
          }
       else 
        /* inlined from scala.collection.immutable.RedBlackTree*/ 
          {
            new scala.collection.immutable.RedBlackTree.RedTree[A, B](k, v, l, r)
          }
    private def balanceLeft[A, B, B1 >: B](isBlack: Boolean, z: A, zv: B, 
      l: scala.collection.immutable.RedBlackTree.Tree[A, B1]
    , d: scala.collection.immutable.RedBlackTree.Tree[A, B1]): scala.collection.immutable.RedBlackTree.Tree[A, B1] = 
      if 
        scala.collection.immutable.RedBlackTree.isRedTree(l).&&(
          scala.collection.immutable.RedBlackTree.isRedTree(l.left)
        )
       then 
        /* inlined from scala.collection.immutable.RedBlackTree*/ 
          {
            val left: scala.collection.immutable.RedBlackTree.BlackTree[A, B1] = 
              /* inlined from scala.collection.immutable.RedBlackTree*/ 
                {
                  new scala.collection.immutable.RedBlackTree.BlackTree[A, B1](l.left.key, l.left.value, l.left.left, 
                    l.left.right
                  )
                }
            val right: scala.collection.immutable.RedBlackTree.BlackTree[A, B1] = 
              /* inlined from scala.collection.immutable.RedBlackTree*/ 
                {
                  new scala.collection.immutable.RedBlackTree.BlackTree[A, B1](z, zv, l.right, d)
                }
            new scala.collection.immutable.RedBlackTree.RedTree[A, B1](l.key, l.value, left, right)
          }
       else 
        if 
          scala.collection.immutable.RedBlackTree.isRedTree(l).&&(
            scala.collection.immutable.RedBlackTree.isRedTree(l.right)
          )
         then 
          /* inlined from scala.collection.immutable.RedBlackTree*/ 
            {
              val left: scala.collection.immutable.RedBlackTree.BlackTree[A, B1] = 
                /* inlined from scala.collection.immutable.RedBlackTree*/ 
                  {
                    new scala.collection.immutable.RedBlackTree.BlackTree[A, B1](l.key, l.value, l.left, l.right.left)
                  }
              val right: scala.collection.immutable.RedBlackTree.BlackTree[A, B1] = 
                /* inlined from scala.collection.immutable.RedBlackTree*/ 
                  {
                    new scala.collection.immutable.RedBlackTree.BlackTree[A, B1](z, zv, l.right.right, d)
                  }
              new scala.collection.immutable.RedBlackTree.RedTree[A, B1](l.right.key, l.right.value, left, right)
            }
         else scala.collection.immutable.RedBlackTree.mkTree[A, B1](isBlack, z, zv, l, d)
    private def balanceRight[A, B, B1 >: B](isBlack: Boolean, x: A, xv: B, 
      a: scala.collection.immutable.RedBlackTree.Tree[A, B1]
    , r: scala.collection.immutable.RedBlackTree.Tree[A, B1]): scala.collection.immutable.RedBlackTree.Tree[A, B1] = 
      if 
        scala.collection.immutable.RedBlackTree.isRedTree(r).&&(
          scala.collection.immutable.RedBlackTree.isRedTree(r.left)
        )
       then 
        /* inlined from scala.collection.immutable.RedBlackTree*/ 
          {
            val left: scala.collection.immutable.RedBlackTree.BlackTree[A, B1] = 
              /* inlined from scala.collection.immutable.RedBlackTree*/ 
                {
                  new scala.collection.immutable.RedBlackTree.BlackTree[A, B1](x, xv, a, r.left.left)
                }
            val right: scala.collection.immutable.RedBlackTree.BlackTree[A, B1] = 
              /* inlined from scala.collection.immutable.RedBlackTree*/ 
                {
                  new scala.collection.immutable.RedBlackTree.BlackTree[A, B1](r.key, r.value, r.left.right, r.right)
                }
            new scala.collection.immutable.RedBlackTree.RedTree[A, B1](r.left.key, r.left.value, left, right)
          }
       else 
        if 
          scala.collection.immutable.RedBlackTree.isRedTree(r).&&(
            scala.collection.immutable.RedBlackTree.isRedTree(r.right)
          )
         then 
          /* inlined from scala.collection.immutable.RedBlackTree*/ 
            {
              val left: scala.collection.immutable.RedBlackTree.BlackTree[A, B1] = 
                /* inlined from scala.collection.immutable.RedBlackTree*/ 
                  {
                    new scala.collection.immutable.RedBlackTree.BlackTree[A, B1](x, xv, a, r.left)
                  }
              val right: scala.collection.immutable.RedBlackTree.BlackTree[A, B1] = 
                /* inlined from scala.collection.immutable.RedBlackTree*/ 
                  {
                    new scala.collection.immutable.RedBlackTree.BlackTree[A, B1](r.right.key, r.right.value, 
                      r.right.left
                    , r.right.right)
                  }
              new scala.collection.immutable.RedBlackTree.RedTree[A, B1](r.key, r.value, left, right)
            }
         else scala.collection.immutable.RedBlackTree.mkTree[A, B1](isBlack, x, xv, a, r)
    private def upd[A, B, B1 >: B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], k: A, v: B1, 
      overwrite: Boolean
    )(implicit ordering: Ordering[A]): scala.collection.immutable.RedBlackTree.Tree[A, B1] = 
      if tree.eq(null) then 
        /* inlined from scala.collection.immutable.RedBlackTree*/ 
          {
            new scala.collection.immutable.RedBlackTree.RedTree[A, B1](k, v, null: Null, null: Null)
          }
       else 
        {
          val cmp: Int = ordering.compare(k, tree.key)
          if cmp.<(0) then 
            scala.collection.immutable.RedBlackTree.balanceLeft[A, B, B1](
              scala.collection.immutable.RedBlackTree.isBlackTree(tree)
            , tree.key, tree.value, 
              scala.collection.immutable.RedBlackTree.upd[A, B, B1](tree.left, k, v, overwrite)(ordering)
            , tree.right)
           else 
            if cmp.>(0) then 
              scala.collection.immutable.RedBlackTree.balanceRight[A, B, B1](
                scala.collection.immutable.RedBlackTree.isBlackTree(tree)
              , tree.key, tree.value, tree.left, 
                scala.collection.immutable.RedBlackTree.upd[A, B, B1](tree.right, k, v, overwrite)(ordering)
              )
             else 
              if overwrite.||(k.==(tree.key).unary_!) then 
                scala.collection.immutable.RedBlackTree.mkTree[A, B1](
                  scala.collection.immutable.RedBlackTree.isBlackTree(tree)
                , k, v, tree.left, tree.right)
               else tree
        }
    private def updNth[A, B, B1 >: B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], idx: Int, k: A, v: B1, 
      overwrite: Boolean
    ): scala.collection.immutable.RedBlackTree.Tree[A, B1] = 
      if tree.eq(null) then 
        /* inlined from scala.collection.immutable.RedBlackTree*/ 
          {
            new scala.collection.immutable.RedBlackTree.RedTree[A, B1](k, v, null: Null, null: Null)
          }
       else 
        {
          val rank: Int = 1.+(scala.collection.immutable.RedBlackTree.count(tree.left))
          if idx.<(rank) then 
            scala.collection.immutable.RedBlackTree.balanceLeft[A, B, B1](
              scala.collection.immutable.RedBlackTree.isBlackTree(tree)
            , tree.key, tree.value, 
              scala.collection.immutable.RedBlackTree.updNth[A, B, B1](tree.left, idx, k, v, overwrite)
            , tree.right)
           else 
            if idx.>(rank) then 
              scala.collection.immutable.RedBlackTree.balanceRight[A, B, B1](
                scala.collection.immutable.RedBlackTree.isBlackTree(tree)
              , tree.key, tree.value, tree.left, 
                scala.collection.immutable.RedBlackTree.updNth[A, B, B1](tree.right, idx.-(rank), k, v, overwrite)
              )
             else 
              if overwrite then 
                scala.collection.immutable.RedBlackTree.mkTree[A, B1](
                  scala.collection.immutable.RedBlackTree.isBlackTree(tree)
                , k, v, tree.left, tree.right)
               else tree
        }
    private def del[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], k: A)(implicit ordering: Ordering[A]
      )
    : scala.collection.immutable.RedBlackTree.Tree[A, B] = 
      if tree.eq(null) then null else 
        {
          def balance(x: A, xv: B, tl: scala.collection.immutable.RedBlackTree.Tree[A, B], 
            tr: scala.collection.immutable.RedBlackTree.Tree[A, B]
          ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
            if scala.collection.immutable.RedBlackTree.isRedTree(tl) then 
              if scala.collection.immutable.RedBlackTree.isRedTree(tr) then 
                /* inlined from scala.collection.immutable.RedBlackTree*/ 
                  {
                    val left: scala.collection.immutable.RedBlackTree.Tree[A, B] = tl.black
                    val right: scala.collection.immutable.RedBlackTree.Tree[A, B] = tr.black
                    new scala.collection.immutable.RedBlackTree.RedTree[A, B](x, xv, left, right)
                  }
               else 
                if scala.collection.immutable.RedBlackTree.isRedTree(tl.left) then 
                  /* inlined from scala.collection.immutable.RedBlackTree*/ 
                    {
                      val left: scala.collection.immutable.RedBlackTree.Tree[A, B] = tl.left.black
                      val right: scala.collection.immutable.RedBlackTree.BlackTree[A, B] = 
                        /* inlined from scala.collection.immutable.RedBlackTree*/ 
                          {
                            new scala.collection.immutable.RedBlackTree.BlackTree[A, B](x, xv, tl.right, tr)
                          }
                      new scala.collection.immutable.RedBlackTree.RedTree[A, B](tl.key, tl.value, left, right)
                    }
                 else 
                  if scala.collection.immutable.RedBlackTree.isRedTree(tl.right) then 
                    /* inlined from scala.collection.immutable.RedBlackTree*/ 
                      {
                        val left: scala.collection.immutable.RedBlackTree.BlackTree[A, B] = 
                          /* inlined from scala.collection.immutable.RedBlackTree*/ 
                            {
                              new scala.collection.immutable.RedBlackTree.BlackTree[A, B](tl.key, tl.value, tl.left, 
                                tl.right.left
                              )
                            }
                        val right: scala.collection.immutable.RedBlackTree.BlackTree[A, B] = 
                          /* inlined from scala.collection.immutable.RedBlackTree*/ 
                            {
                              new scala.collection.immutable.RedBlackTree.BlackTree[A, B](x, xv, tl.right.right, tr)
                            }
                        new scala.collection.immutable.RedBlackTree.RedTree[A, B](tl.right.key, tl.right.value, left, 
                          right
                        )
                      }
                   else 
                    /* inlined from scala.collection.immutable.RedBlackTree*/ 
                      {
                        new scala.collection.immutable.RedBlackTree.BlackTree[A, B](x, xv, tl, tr)
                      }
             else 
              if scala.collection.immutable.RedBlackTree.isRedTree(tr) then 
                if scala.collection.immutable.RedBlackTree.isRedTree(tr.right) then 
                  /* inlined from scala.collection.immutable.RedBlackTree*/ 
                    {
                      val left: scala.collection.immutable.RedBlackTree.BlackTree[A, B] = 
                        /* inlined from scala.collection.immutable.RedBlackTree*/ 
                          {
                            new scala.collection.immutable.RedBlackTree.BlackTree[A, B](x, xv, tl, tr.left)
                          }
                      val right: scala.collection.immutable.RedBlackTree.Tree[A, B] = tr.right.black
                      new scala.collection.immutable.RedBlackTree.RedTree[A, B](tr.key, tr.value, left, right)
                    }
                 else 
                  if scala.collection.immutable.RedBlackTree.isRedTree(tr.left) then 
                    /* inlined from scala.collection.immutable.RedBlackTree*/ 
                      {
                        val left: scala.collection.immutable.RedBlackTree.BlackTree[A, B] = 
                          /* inlined from scala.collection.immutable.RedBlackTree*/ 
                            {
                              new scala.collection.immutable.RedBlackTree.BlackTree[A, B](x, xv, tl, tr.left.left)
                            }
                        val right: scala.collection.immutable.RedBlackTree.BlackTree[A, B] = 
                          /* inlined from scala.collection.immutable.RedBlackTree*/ 
                            {
                              new scala.collection.immutable.RedBlackTree.BlackTree[A, B](tr.key, tr.value, 
                                tr.left.right
                              , tr.right)
                            }
                        new scala.collection.immutable.RedBlackTree.RedTree[A, B](tr.left.key, tr.left.value, left, 
                          right
                        )
                      }
                   else 
                    /* inlined from scala.collection.immutable.RedBlackTree*/ 
                      {
                        new scala.collection.immutable.RedBlackTree.BlackTree[A, B](x, xv, tl, tr)
                      }
               else 
                /* inlined from scala.collection.immutable.RedBlackTree*/ 
                  {
                    new scala.collection.immutable.RedBlackTree.BlackTree[A, B](x, xv, tl, tr)
                  }
          def subl(t: scala.collection.immutable.RedBlackTree.Tree[A, B]): 
            scala.collection.immutable.RedBlackTree.Tree[A, B]
           = 
            if t.isInstanceOf[scala.collection.immutable.RedBlackTree.BlackTree[_, _]] then t.red else 
              sys.package.error("Defect: invariance violation; expected black, got ".+(t))
          def balLeft(x: A, xv: B, tl: scala.collection.immutable.RedBlackTree.Tree[A, B], 
            tr: scala.collection.immutable.RedBlackTree.Tree[A, B]
          ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
            if scala.collection.immutable.RedBlackTree.isRedTree(tl) then 
              /* inlined from scala.collection.immutable.RedBlackTree*/ 
                {
                  val left: scala.collection.immutable.RedBlackTree.Tree[A, B] = tl.black
                  new scala.collection.immutable.RedBlackTree.RedTree[A, B](x, xv, left, tr)
                }
             else 
              if scala.collection.immutable.RedBlackTree.isBlackTree(tr) then balance(x, xv, tl, tr.red) else 
                if 
                  scala.collection.immutable.RedBlackTree.isRedTree(tr).&&(
                    scala.collection.immutable.RedBlackTree.isBlackTree(tr.left)
                  )
                 then 
                  /* inlined from scala.collection.immutable.RedBlackTree*/ 
                    {
                      val left: scala.collection.immutable.RedBlackTree.BlackTree[A, B] = 
                        /* inlined from scala.collection.immutable.RedBlackTree*/ 
                          {
                            new scala.collection.immutable.RedBlackTree.BlackTree[A, B](x, xv, tl, tr.left.left)
                          }
                      val right: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
                        balance(tr.key, tr.value, tr.left.right, subl(tr.right))
                      new scala.collection.immutable.RedBlackTree.RedTree[A, B](tr.left.key, tr.left.value, left, right)
                    }
                 else sys.package.error("Defect: invariance violation")
          def balRight(x: A, xv: B, tl: scala.collection.immutable.RedBlackTree.Tree[A, B], 
            tr: scala.collection.immutable.RedBlackTree.Tree[A, B]
          ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
            if scala.collection.immutable.RedBlackTree.isRedTree(tr) then 
              /* inlined from scala.collection.immutable.RedBlackTree*/ 
                {
                  val right: scala.collection.immutable.RedBlackTree.Tree[A, B] = tr.black
                  new scala.collection.immutable.RedBlackTree.RedTree[A, B](x, xv, tl, right)
                }
             else 
              if scala.collection.immutable.RedBlackTree.isBlackTree(tl) then balance(x, xv, tl.red, tr) else 
                if 
                  scala.collection.immutable.RedBlackTree.isRedTree(tl).&&(
                    scala.collection.immutable.RedBlackTree.isBlackTree(tl.right)
                  )
                 then 
                  /* inlined from scala.collection.immutable.RedBlackTree*/ 
                    {
                      val left: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
                        balance(tl.key, tl.value, subl(tl.left), tl.right.left)
                      val right: scala.collection.immutable.RedBlackTree.BlackTree[A, B] = 
                        /* inlined from scala.collection.immutable.RedBlackTree*/ 
                          {
                            new scala.collection.immutable.RedBlackTree.BlackTree[A, B](x, xv, tl.right.right, tr)
                          }
                      new scala.collection.immutable.RedBlackTree.RedTree[A, B](tl.right.key, tl.right.value, left, 
                        right
                      )
                    }
                 else sys.package.error("Defect: invariance violation")
          def delLeft: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
            if scala.collection.immutable.RedBlackTree.isBlackTree(tree.left) then 
              balLeft(tree.key, tree.value, scala.collection.immutable.RedBlackTree.del[A, B](tree.left, k)(ordering), 
                tree.right
              )
             else 
              /* inlined from scala.collection.immutable.RedBlackTree*/ 
                {
                  val left: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
                    scala.collection.immutable.RedBlackTree.del[A, B](tree.left, k)(ordering)
                  new scala.collection.immutable.RedBlackTree.RedTree[A, B](tree.key, tree.value, left, tree.right)
                }
          def delRight: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
            if scala.collection.immutable.RedBlackTree.isBlackTree(tree.right) then 
              balRight(tree.key, tree.value, tree.left, 
                scala.collection.immutable.RedBlackTree.del[A, B](tree.right, k)(ordering)
              )
             else 
              /* inlined from scala.collection.immutable.RedBlackTree*/ 
                {
                  val right: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
                    scala.collection.immutable.RedBlackTree.del[A, B](tree.right, k)(ordering)
                  new scala.collection.immutable.RedBlackTree.RedTree[A, B](tree.key, tree.value, tree.left, right)
                }
          def append(tl: scala.collection.immutable.RedBlackTree.Tree[A, B], 
            tr: scala.collection.immutable.RedBlackTree.Tree[A, B]
          ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
            if tl.eq(null) then tr else 
              if tr.eq(null) then tl else 
                if 
                  scala.collection.immutable.RedBlackTree.isRedTree(tl).&&(
                    scala.collection.immutable.RedBlackTree.isRedTree(tr)
                  )
                 then 
                  {
                    val bc: scala.collection.immutable.RedBlackTree.Tree[A, B] = append(tl.right, tr.left)
                    if scala.collection.immutable.RedBlackTree.isRedTree(bc) then 
                      /* inlined from scala.collection.immutable.RedBlackTree*/ 
                        {
                          val left: scala.collection.immutable.RedBlackTree.RedTree[A, B] = 
                            /* inlined from scala.collection.immutable.RedBlackTree*/ 
                              {
                                new scala.collection.immutable.RedBlackTree.RedTree[A, B](tl.key, tl.value, tl.left, 
                                  bc.left
                                )
                              }
                          val right: scala.collection.immutable.RedBlackTree.RedTree[A, B] = 
                            /* inlined from scala.collection.immutable.RedBlackTree*/ 
                              {
                                new scala.collection.immutable.RedBlackTree.RedTree[A, B](tr.key, tr.value, bc.right, 
                                  tr.right
                                )
                              }
                          new scala.collection.immutable.RedBlackTree.RedTree[A, B](bc.key, bc.value, left, right)
                        }
                     else 
                      /* inlined from scala.collection.immutable.RedBlackTree*/ 
                        {
                          val right: scala.collection.immutable.RedBlackTree.RedTree[A, B] = 
                            /* inlined from scala.collection.immutable.RedBlackTree*/ 
                              {
                                new scala.collection.immutable.RedBlackTree.RedTree[A, B](tr.key, tr.value, bc, tr.right
                                  )
                              }
                          new scala.collection.immutable.RedBlackTree.RedTree[A, B](tl.key, tl.value, tl.left, right)
                        }
                  }
                 else 
                  if 
                    scala.collection.immutable.RedBlackTree.isBlackTree(tl).&&(
                      scala.collection.immutable.RedBlackTree.isBlackTree(tr)
                    )
                   then 
                    {
                      val bc: scala.collection.immutable.RedBlackTree.Tree[A, B] = append(tl.right, tr.left)
                      if scala.collection.immutable.RedBlackTree.isRedTree(bc) then 
                        /* inlined from scala.collection.immutable.RedBlackTree*/ 
                          {
                            val left: scala.collection.immutable.RedBlackTree.BlackTree[A, B] = 
                              /* inlined from scala.collection.immutable.RedBlackTree*/ 
                                {
                                  new scala.collection.immutable.RedBlackTree.BlackTree[A, B](tl.key, tl.value, tl.left
                                    , 
                                  bc.left)
                                }
                            val right: scala.collection.immutable.RedBlackTree.BlackTree[A, B] = 
                              /* inlined from scala.collection.immutable.RedBlackTree*/ 
                                {
                                  new scala.collection.immutable.RedBlackTree.BlackTree[A, B](tr.key, tr.value, bc.right
                                    , 
                                  tr.right)
                                }
                            new scala.collection.immutable.RedBlackTree.RedTree[A, B](bc.key, bc.value, left, right)
                          }
                       else 
                        balLeft(tl.key, tl.value, tl.left, 
                          /* inlined from scala.collection.immutable.RedBlackTree*/ 
                            {
                              new scala.collection.immutable.RedBlackTree.BlackTree[A, B](tr.key, tr.value, bc, tr.right
                                )
                            }
                        )
                    }
                   else 
                    if scala.collection.immutable.RedBlackTree.isRedTree(tr) then 
                      /* inlined from scala.collection.immutable.RedBlackTree*/ 
                        {
                          val left: scala.collection.immutable.RedBlackTree.Tree[A, B] = append(tl, tr.left)
                          new scala.collection.immutable.RedBlackTree.RedTree[A, B](tr.key, tr.value, left, tr.right)
                        }
                     else 
                      if scala.collection.immutable.RedBlackTree.isRedTree(tl) then 
                        /* inlined from scala.collection.immutable.RedBlackTree*/ 
                          {
                            val right: scala.collection.immutable.RedBlackTree.Tree[A, B] = append(tl.right, tr)
                            new scala.collection.immutable.RedBlackTree.RedTree[A, B](tl.key, tl.value, tl.left, right)
                          }
                       else sys.package.error("unmatched tree on append: ".+(tl).+(", ").+(tr))
          val cmp: Int = ordering.compare(k, tree.key)
          if cmp.<(0) then delLeft else if cmp.>(0) then delRight else append(tree.left, tree.right)
        }
    private def doFrom[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], from: A)(
      implicit ordering: Ordering[A]
    ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
      {
        if tree.eq(null) then return null else ()
        if ordering.lt(tree.key, from) then 
          return scala.collection.immutable.RedBlackTree.doFrom[A, B](tree.right, from)(ordering)
         else ()
        val newLeft: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
          scala.collection.immutable.RedBlackTree.doFrom[A, B](tree.left, from)(ordering)
        if newLeft.eq(tree.left) then tree else 
          if newLeft.eq(null) then 
            scala.collection.immutable.RedBlackTree.upd[A, B, B](tree.right, tree.key, tree.value, false)(ordering)
           else scala.collection.immutable.RedBlackTree.rebalance[A, B](tree, newLeft, tree.right)
      }
    private def doTo[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], to: A)(
      implicit ordering: Ordering[A]
    ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
      {
        if tree.eq(null) then return null else ()
        if ordering.lt(to, tree.key) then 
          return scala.collection.immutable.RedBlackTree.doTo[A, B](tree.left, to)(ordering)
         else ()
        val newRight: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
          scala.collection.immutable.RedBlackTree.doTo[A, B](tree.right, to)(ordering)
        if newRight.eq(tree.right) then tree else 
          if newRight.eq(null) then 
            scala.collection.immutable.RedBlackTree.upd[A, B, B](tree.left, tree.key, tree.value, false)(ordering)
           else scala.collection.immutable.RedBlackTree.rebalance[A, B](tree, tree.left, newRight)
      }
    private def doUntil[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], until: A)(
      implicit ordering: Ordering[A]
    ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
      {
        if tree.eq(null) then return null else ()
        if ordering.lteq(until, tree.key) then 
          return scala.collection.immutable.RedBlackTree.doUntil[A, B](tree.left, until)(ordering)
         else ()
        val newRight: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
          scala.collection.immutable.RedBlackTree.doUntil[A, B](tree.right, until)(ordering)
        if newRight.eq(tree.right) then tree else 
          if newRight.eq(null) then 
            scala.collection.immutable.RedBlackTree.upd[A, B, B](tree.left, tree.key, tree.value, false)(ordering)
           else scala.collection.immutable.RedBlackTree.rebalance[A, B](tree, tree.left, newRight)
      }
    private def doRange[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], from: A, until: A)(
      implicit ordering: Ordering[A]
    ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
      {
        if tree.eq(null) then return null else ()
        if ordering.lt(tree.key, from) then 
          return scala.collection.immutable.RedBlackTree.doRange[A, B](tree.right, from, until)(ordering)
         else ()
        if ordering.lteq(until, tree.key) then 
          return scala.collection.immutable.RedBlackTree.doRange[A, B](tree.left, from, until)(ordering)
         else ()
        val newLeft: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
          scala.collection.immutable.RedBlackTree.doFrom[A, B](tree.left, from)(ordering)
        val newRight: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
          scala.collection.immutable.RedBlackTree.doUntil[A, B](tree.right, until)(ordering)
        if newLeft.eq(tree.left).&&(newRight.eq(tree.right)) then tree else 
          if newLeft.eq(null) then 
            scala.collection.immutable.RedBlackTree.upd[A, B, B](newRight, tree.key, tree.value, false)(ordering)
           else 
            if newRight.eq(null) then 
              scala.collection.immutable.RedBlackTree.upd[A, B, B](newLeft, tree.key, tree.value, false)(ordering)
             else scala.collection.immutable.RedBlackTree.rebalance[A, B](tree, newLeft, newRight)
      }
    private def doDrop[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], n: Int): 
      scala.collection.immutable.RedBlackTree.Tree[A, B]
     = 
      {
        if n.<=(0) then return tree else ()
        if n.>=(this.count(tree)) then return null else ()
        val count: Int = this.count(tree.left)
        if n.>(count) then return scala.collection.immutable.RedBlackTree.doDrop[A, B](tree.right, n.-(count).-(1))
           else 
        ()
        val newLeft: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
          scala.collection.immutable.RedBlackTree.doDrop[A, B](tree.left, n)
        if newLeft.eq(tree.left) then tree else 
          if newLeft.eq(null) then 
            scala.collection.immutable.RedBlackTree.updNth[A, B, B](tree.right, n.-(count).-(1), tree.key, tree.value, 
              false
            )
           else scala.collection.immutable.RedBlackTree.rebalance[A, B](tree, newLeft, tree.right)
      }
    private def doTake[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], n: Int): 
      scala.collection.immutable.RedBlackTree.Tree[A, B]
     = 
      {
        if n.<=(0) then return null else ()
        if n.>=(this.count(tree)) then return tree else ()
        val count: Int = this.count(tree.left)
        if n.<=(count) then return scala.collection.immutable.RedBlackTree.doTake[A, B](tree.left, n) else ()
        val newRight: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
          scala.collection.immutable.RedBlackTree.doTake[A, B](tree.right, n.-(count).-(1))
        if newRight.eq(tree.right) then tree else 
          if newRight.eq(null) then 
            scala.collection.immutable.RedBlackTree.updNth[A, B, B](tree.left, n, tree.key, tree.value, false)
           else scala.collection.immutable.RedBlackTree.rebalance[A, B](tree, tree.left, newRight)
      }
    private def doSlice[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], from: Int, until: Int): 
      scala.collection.immutable.RedBlackTree.Tree[A, B]
     = 
      {
        if tree.eq(null) then return null else ()
        val count: Int = this.count(tree.left)
        if from.>(count) then 
          return 
            scala.collection.immutable.RedBlackTree.doSlice[A, B](tree.right, from.-(count).-(1), until.-(count).-(1))
         else ()
        if until.<=(count) then return scala.collection.immutable.RedBlackTree.doSlice[A, B](tree.left, from, until)
           else 
        ()
        val newLeft: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
          scala.collection.immutable.RedBlackTree.doDrop[A, B](tree.left, from)
        val newRight: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
          scala.collection.immutable.RedBlackTree.doTake[A, B](tree.right, until.-(count).-(1))
        if newLeft.eq(tree.left).&&(newRight.eq(tree.right)) then tree else 
          if newLeft.eq(null) then 
            scala.collection.immutable.RedBlackTree.updNth[A, B, B](newRight, from.-(count).-(1), tree.key, tree.value, 
              false
            )
           else 
            if newRight.eq(null) then 
              scala.collection.immutable.RedBlackTree.updNth[A, B, B](newLeft, until, tree.key, tree.value, false)
             else scala.collection.immutable.RedBlackTree.rebalance[A, B](tree, newLeft, newRight)
      }
    private def compareDepth[A, B](left: scala.collection.immutable.RedBlackTree.Tree[A, B], 
      right: scala.collection.immutable.RedBlackTree.Tree[A, B]
    ): 
      (scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]], Boolean, 
        Boolean
      , Int)
     = 
      {
        def unzip(
          zipper: scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]]
        , leftMost: Boolean): 
          scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]]
         = 
          {
            def tailLabel54(
              zipper: scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]]
            , leftMost: Boolean): 
              scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]]
             = 
              {
                val next: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
                  if leftMost then zipper.head.left else zipper.head.right
                if next.eq(null) then zipper else 
                  tailLabel54(
                    scala.collection.immutable.RedBlackTree.NList.cons[
                      scala.collection.immutable.RedBlackTree.Tree[A, B]
                    ](next, zipper)
                  , leftMost)
              }
            tailLabel54(zipper, leftMost)
          }
        def unzipBoth(left: scala.collection.immutable.RedBlackTree.Tree[A, B], 
          right: scala.collection.immutable.RedBlackTree.Tree[A, B]
        , leftZipper: scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]]
          , 
        rightZipper: scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]], 
          smallerDepth: Int
        ): 
          (scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]], Boolean, 
            Boolean
          , Int)
         = 
          {
            def tailLabel55(left: scala.collection.immutable.RedBlackTree.Tree[A, B], 
              right: scala.collection.immutable.RedBlackTree.Tree[A, B]
            , 
              leftZipper: 
                scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]]
            , 
              rightZipper: 
                scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]]
            , smallerDepth: Int): 
              (scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]], 
                Boolean
              , Boolean, Int)
             = 
              if 
                scala.collection.immutable.RedBlackTree.isBlackTree(left).&&(
                  scala.collection.immutable.RedBlackTree.isBlackTree(right)
                )
               then 
                tailLabel55(left.right, right.left, 
                  scala.collection.immutable.RedBlackTree.NList.cons[scala.collection.immutable.RedBlackTree.Tree[A, B]]
                    (
                  left, leftZipper)
                , 
                  scala.collection.immutable.RedBlackTree.NList.cons[scala.collection.immutable.RedBlackTree.Tree[A, B]]
                    (
                  right, rightZipper)
                , 1.+(smallerDepth))
               else 
                if 
                  scala.collection.immutable.RedBlackTree.isRedTree(left).&&(
                    scala.collection.immutable.RedBlackTree.isRedTree(right)
                  )
                 then 
                  tailLabel55(left.right, right.left, 
                    scala.collection.immutable.RedBlackTree.NList.cons[
                      scala.collection.immutable.RedBlackTree.Tree[A, B]
                    ](left, leftZipper)
                  , 
                    scala.collection.immutable.RedBlackTree.NList.cons[
                      scala.collection.immutable.RedBlackTree.Tree[A, B]
                    ](right, rightZipper)
                  , smallerDepth)
                 else 
                  if scala.collection.immutable.RedBlackTree.isRedTree(right) then 
                    tailLabel55(left, right.left, leftZipper, 
                      scala.collection.immutable.RedBlackTree.NList.cons[
                        scala.collection.immutable.RedBlackTree.Tree[A, B]
                      ](right, rightZipper)
                    , smallerDepth)
                   else 
                    if scala.collection.immutable.RedBlackTree.isRedTree(left) then 
                      tailLabel55(left.right, right, 
                        scala.collection.immutable.RedBlackTree.NList.cons[
                          scala.collection.immutable.RedBlackTree.Tree[A, B]
                        ](left, leftZipper)
                      , rightZipper, smallerDepth)
                     else 
                      if left.eq(null).&&(right.eq(null)) then 
                        new Tuple4[Null, Boolean, Boolean, Int](null, true, false, smallerDepth)
                       else sys.package.error("unmatched trees in unzip: ".+(left).+(", ").+(right))
            tailLabel55(left, right, leftZipper, rightZipper, smallerDepth)
          }
        unzipBoth(left, right, null, null, 0)
      }
    private def rebalance[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], 
      newLeft: scala.collection.immutable.RedBlackTree.Tree[A, B]
    , newRight: scala.collection.immutable.RedBlackTree.Tree[A, B]): scala.collection.immutable.RedBlackTree.Tree[A, B]
       = 
    {
      @annotation.tailrec() def findDepth(
        zipper: scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]]
      , depth: Int): scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]]
         = 
      {
        def tailLabel57(
          zipper: scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]]
        , depth: Int): scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]]
           = 
        if zipper.eq(null) then sys.package.error("Defect: unexpected empty zipper while computing range") else 
          if scala.collection.immutable.RedBlackTree.isBlackTree(zipper.head) then 
            if depth.==(1) then zipper else tailLabel57(zipper.tail, depth.-(1))
           else tailLabel57(zipper.tail, depth)
        tailLabel57(zipper, depth)
      }
      val blkNewLeft: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
        scala.collection.immutable.RedBlackTree.blacken[A, B](newLeft)
      val blkNewRight: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
        scala.collection.immutable.RedBlackTree.blacken[A, B](newRight)
      var ilo5: scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]]
      var ilo6: Boolean
      var ilo7: Boolean
      var ilo8: Int
      case val x46: 
        (scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]], Boolean, 
          Boolean
        , Int) @unchecked
       = 
        scala.collection.immutable.RedBlackTree.compareDepth[A, B](blkNewLeft, blkNewRight): 
          (scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]], Boolean, 
            Boolean
          , Int) @unchecked
      if x46.ne(null) then 
        {
          ilo5 = x46._1
          ilo6 = x46._2
          ilo7 = x46._3
          ilo8 = x46._4
          ()
        }
       else throw new MatchError(x46)
      val leftMost: Boolean = ilo7
      if ilo6 then 
        /* inlined from scala.collection.immutable.RedBlackTree*/ 
          {
            new scala.collection.immutable.RedBlackTree.BlackTree[A, B](tree.key, tree.value, blkNewLeft, blkNewRight)
          }
       else 
        {
          val zipFrom: scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]]
             = 
          findDepth(ilo5, ilo8)
          val union: scala.collection.immutable.RedBlackTree.RedTree[A, B] = 
            if leftMost then 
              /* inlined from scala.collection.immutable.RedBlackTree*/ 
                {
                  new scala.collection.immutable.RedBlackTree.RedTree[A, B](tree.key, tree.value, blkNewLeft, 
                    zipFrom.head
                  )
                }
             else 
              /* inlined from scala.collection.immutable.RedBlackTree*/ 
                {
                  new scala.collection.immutable.RedBlackTree.RedTree[A, B](tree.key, tree.value, zipFrom.head, 
                    blkNewRight
                  )
                }
          val zippedTree: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
            scala.collection.immutable.RedBlackTree.NList.foldLeft[scala.collection.immutable.RedBlackTree.Tree[A, B], 
              scala.collection.immutable.RedBlackTree.Tree[A, B]
            ](zipFrom.tail, union: scala.collection.immutable.RedBlackTree.Tree[A, B])(
              {
                def $anonfun(tree: scala.collection.immutable.RedBlackTree.Tree[A, B], 
                  node: scala.collection.immutable.RedBlackTree.Tree[A, B]
                ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
                  if leftMost then 
                    scala.collection.immutable.RedBlackTree.balanceLeft[A, B, B](
                      scala.collection.immutable.RedBlackTree.isBlackTree(node)
                    , node.key, node.value, tree, node.right)
                   else 
                    scala.collection.immutable.RedBlackTree.balanceRight[A, B, B](
                      scala.collection.immutable.RedBlackTree.isBlackTree(node)
                    , node.key, node.value, node.left, tree)
                closure($anonfun)
              }
            )
          zippedTree: scala.collection.immutable.RedBlackTree.Tree[A, B]
        }
    }
    private final class NList[A](head: A, tail: scala.collection.immutable.RedBlackTree.NList[A]) extends Object() { 
      private type A
      <accessor> def head: NList.this.A
      <accessor> def tail: scala.collection.immutable.RedBlackTree.NList[NList.this.A]
    }
    private final lazy module val NList: scala.collection.immutable.RedBlackTree.NList = 
      new scala.collection.immutable.RedBlackTree.NList()
    private final module class NList() extends Object() { 
      def cons[B](x: B, xs: scala.collection.immutable.RedBlackTree.NList[B]): 
        scala.collection.immutable.RedBlackTree.NList[B]
       = new scala.collection.immutable.RedBlackTree.NList[B](x, xs)
      def foldLeft[A, B](xs: scala.collection.immutable.RedBlackTree.NList[A], z: B)(f: (B, A) => B): B = 
        {
          var acc: B = z
          var these: scala.collection.immutable.RedBlackTree.NList[A] = xs
          {
            def while$(): Unit = 
              if these.ne(null) then 
                {
                  {
                    acc = f.apply(acc, these.head)
                    these = these.tail
                  }
                  while$()
                }
               else ()
            while$()
          }
          acc: B
        }
    }
    @scala.annotation.internal.Child[scala.collection.immutable.RedBlackTree.BlackTree]() @
      scala.annotation.internal.Child
    [scala.collection.immutable.RedBlackTree.RedTree]() sealed abstract class Tree[A, B](@inline() key: A, 
      @inline() value: B
    , @inline() left: scala.collection.immutable.RedBlackTree.Tree[A, B], 
      @inline() right: scala.collection.immutable.RedBlackTree.Tree[A, B]
    ) extends Object() with Serializable { 
      private type A
      private type +B
      @inline() final <accessor> def key: Tree.this.A
      @inline() final <accessor> def value: Tree.this.B
      @inline() final <accessor> def left: scala.collection.immutable.RedBlackTree.Tree[Tree.this.A, Tree.this.B]
      @inline() final <accessor> def right: scala.collection.immutable.RedBlackTree.Tree[Tree.this.A, Tree.this.B]
      @inline() final <accessor> def count: Int = 
        1.+(scala.collection.immutable.RedBlackTree.count(Tree.this.left)).+(
          scala.collection.immutable.RedBlackTree.count(Tree.this.right)
        )
      def black: scala.collection.immutable.RedBlackTree.Tree[Tree.this.A, Tree.this.B]
      def red: scala.collection.immutable.RedBlackTree.Tree[Tree.this.A, Tree.this.B]
    }
    final class RedTree[A, B](key: A, value: B, left: scala.collection.immutable.RedBlackTree.Tree[A, B], 
      right: scala.collection.immutable.RedBlackTree.Tree[A, B]
    ) extends scala.collection.immutable.RedBlackTree.Tree[RedTree.this.A, RedTree.this.B](key, value, left, right) { 
      private type A
      private type +B
      private def key: RedTree.this.A = super.key
      private def value: RedTree.this.B = super.value
      private def left: scala.collection.immutable.RedBlackTree.Tree[RedTree.this.A, RedTree.this.B] = super.left
      private def right: scala.collection.immutable.RedBlackTree.Tree[RedTree.this.A, RedTree.this.B] = super.right
      override def black: scala.collection.immutable.RedBlackTree.Tree[RedTree.this.A, RedTree.this.B] = 
        /* inlined from scala.collection.immutable.RedBlackTree*/ 
          {
            new scala.collection.immutable.RedBlackTree.BlackTree[RedTree.this.A, RedTree.this.B](RedTree.this.key, 
              RedTree.this.value
            , RedTree.this.left, RedTree.this.right)
          }
      override def red: scala.collection.immutable.RedBlackTree.Tree[RedTree.this.A, RedTree.this.B] = this
      override def toString: String = 
        "RedTree(".+(RedTree.this.key).+(", ").+(RedTree.this.value).+(", ").+(RedTree.this.left).+(", ").+(
          RedTree.this.right
        ).+(")")
    }
    final class BlackTree[A, B](key: A, value: B, left: scala.collection.immutable.RedBlackTree.Tree[A, B], 
      right: scala.collection.immutable.RedBlackTree.Tree[A, B]
    ) extends scala.collection.immutable.RedBlackTree.Tree[BlackTree.this.A, BlackTree.this.B](key, value, left, right) 
      {
     
      private type A
      private type +B
      private def key: BlackTree.this.A = super.key
      private def value: BlackTree.this.B = super.value
      private def left: scala.collection.immutable.RedBlackTree.Tree[BlackTree.this.A, BlackTree.this.B] = super.left
      private def right: scala.collection.immutable.RedBlackTree.Tree[BlackTree.this.A, BlackTree.this.B] = super.right
      override def black: scala.collection.immutable.RedBlackTree.Tree[BlackTree.this.A, BlackTree.this.B] = this
      override def red: scala.collection.immutable.RedBlackTree.Tree[BlackTree.this.A, BlackTree.this.B] = 
        /* inlined from scala.collection.immutable.RedBlackTree*/ 
          {
            new scala.collection.immutable.RedBlackTree.RedTree[BlackTree.this.A, BlackTree.this.B](BlackTree.this.key, 
              BlackTree.this.value
            , BlackTree.this.left, BlackTree.this.right)
          }
      override def toString: String = 
        "BlackTree(".+(BlackTree.this.key).+(", ").+(BlackTree.this.value).+(", ").+(BlackTree.this.left).+(", ").+(
          BlackTree.this.right
        ).+(")")
    }
    final lazy module val RedTree: scala.collection.immutable.RedBlackTree.RedTree = 
      new scala.collection.immutable.RedBlackTree.RedTree()
    final module class RedTree() extends Object() { 
      @scala.collection.immutable.RedBlackTree.RedTree[A, B](key, value, left, right) @inline() inline def apply[A, B](
        key: A
      , value: B, left: scala.collection.immutable.RedBlackTree.Tree[A, B], 
        right: scala.collection.immutable.RedBlackTree.Tree[A, B]
      ): scala.collection.immutable.RedBlackTree.RedTree[A, B] = 
        new scala.collection.immutable.RedBlackTree.RedTree[A, B](key, value, left, right)
      def unapply[A, B](t: scala.collection.immutable.RedBlackTree.RedTree[A, B]): 
        Some[(A, B, scala.collection.immutable.RedBlackTree.Tree[A, B], 
          scala.collection.immutable.RedBlackTree.Tree[A, B]
        )]
       = 
        new Some[
          (A, B, scala.collection.immutable.RedBlackTree.Tree[A, B], scala.collection.immutable.RedBlackTree.Tree[A, B])
        ](
          new Tuple4[A, B, scala.collection.immutable.RedBlackTree.Tree[A, B], 
            scala.collection.immutable.RedBlackTree.Tree[A, B]
          ](t.key, t.value, t.left, t.right)
        )
    }
    final lazy module val BlackTree: scala.collection.immutable.RedBlackTree.BlackTree = 
      new scala.collection.immutable.RedBlackTree.BlackTree()
    final module class BlackTree() extends Object() { 
      @scala.collection.immutable.RedBlackTree.BlackTree[A, B](key, value, left, right) @inline() inline def apply[A, B]
        (
      key: A, value: B, left: scala.collection.immutable.RedBlackTree.Tree[A, B], 
        right: scala.collection.immutable.RedBlackTree.Tree[A, B]
      ): scala.collection.immutable.RedBlackTree.BlackTree[A, B] = 
        new scala.collection.immutable.RedBlackTree.BlackTree[A, B](key, value, left, right)
      def unapply[A, B](t: scala.collection.immutable.RedBlackTree.BlackTree[A, B]): 
        Some[(A, B, scala.collection.immutable.RedBlackTree.Tree[A, B], 
          scala.collection.immutable.RedBlackTree.Tree[A, B]
        )]
       = 
        new Some[
          (A, B, scala.collection.immutable.RedBlackTree.Tree[A, B], scala.collection.immutable.RedBlackTree.Tree[A, B])
        ](
          new Tuple4[A, B, scala.collection.immutable.RedBlackTree.Tree[A, B], 
            scala.collection.immutable.RedBlackTree.Tree[A, B]
          ](t.key, t.value, t.left, t.right)
        )
    }
    private abstract class TreeIterator[A, B, R](root: scala.collection.immutable.RedBlackTree.Tree[A, B], 
      start: Option[A]
    )(implicit ordering: Ordering[A]) extends Object() with Iterator[TreeIterator.this.R] { 
      protected def sizeHintIfCheap: Int = super[GenTraversableOnce].sizeHintIfCheap
      protected def reversed: List[TreeIterator.this.R] = super[TraversableOnce].reversed
      def size: Int = super[TraversableOnce].size
      def nonEmpty: Boolean = super[TraversableOnce].nonEmpty
      def count(p: TreeIterator.this.R => Boolean): Int = super[TraversableOnce].count(p)
      def collectFirst[B](pf: PartialFunction[TreeIterator.this.R, B]): Option[B] = 
        super[TraversableOnce].collectFirst[B](pf)
      def /:[B](z: B)(op: (B, TreeIterator.this.R) => B): B = super[TraversableOnce]./:[B](z)(op)
      def :\[B](z: B)(op: (TreeIterator.this.R, B) => B): B = super[TraversableOnce].:\[B](z)(op)
      def foldLeft[B](z: B)(op: (B, TreeIterator.this.R) => B): B = super[TraversableOnce].foldLeft[B](z)(op)
      def foldRight[B](z: B)(op: (TreeIterator.this.R, B) => B): B = super[TraversableOnce].foldRight[B](z)(op)
      def reduceLeft[B >: TreeIterator.this.R](op: (B, TreeIterator.this.R) => B): B = 
        super[TraversableOnce].reduceLeft[B](op)
      def reduceRight[B >: TreeIterator.this.R](op: (TreeIterator.this.R, B) => B): B = 
        super[TraversableOnce].reduceRight[B](op)
      def reduceLeftOption[B >: TreeIterator.this.R](op: (B, TreeIterator.this.R) => B): Option[B] = 
        super[TraversableOnce].reduceLeftOption[B](op)
      def reduceRightOption[B >: TreeIterator.this.R](op: (TreeIterator.this.R, B) => B): Option[B] = 
        super[TraversableOnce].reduceRightOption[B](op)
      def reduce[A1 >: TreeIterator.this.R](op: (A1, A1) => A1): A1 = super[TraversableOnce].reduce[A1](op)
      def reduceOption[A1 >: TreeIterator.this.R](op: (A1, A1) => A1): Option[A1] = 
        super[TraversableOnce].reduceOption[A1](op)
      def fold[A1 >: TreeIterator.this.R](z: A1)(op: (A1, A1) => A1): A1 = super[TraversableOnce].fold[A1](z)(op)
      def aggregate[B](z: => B)(seqop: (B, TreeIterator.this.R) => B, combop: (B, B) => B): B = 
        super[TraversableOnce].aggregate[B](z)(seqop, combop)
      def sum[B >: TreeIterator.this.R](implicit num: Numeric[B]): B = super[TraversableOnce].sum[B](num)
      def product[B >: TreeIterator.this.R](implicit num: Numeric[B]): B = super[TraversableOnce].product[B](num)
      def min[B >: TreeIterator.this.R](implicit cmp: Ordering[B]): TreeIterator.this.R = 
        super[TraversableOnce].min[B](cmp)
      def max[B >: TreeIterator.this.R](implicit cmp: Ordering[B]): TreeIterator.this.R = 
        super[TraversableOnce].max[B](cmp)
      def maxBy[B](f: TreeIterator.this.R => B)(implicit cmp: Ordering[B]): TreeIterator.this.R = 
        super[TraversableOnce].maxBy[B](f)(cmp)
      def minBy[B](f: TreeIterator.this.R => B)(implicit cmp: Ordering[B]): TreeIterator.this.R = 
        super[TraversableOnce].minBy[B](f)(cmp)
      def copyToBuffer[B >: TreeIterator.this.R](dest: scala.collection.mutable.Buffer[B]): Unit = 
        super[TraversableOnce].copyToBuffer[B](dest)
      def copyToArray[B >: TreeIterator.this.R](xs: Array[B], start: Int): Unit = 
        super[TraversableOnce].copyToArray[B](xs, start)
      def copyToArray[B >: TreeIterator.this.R](xs: Array[B]): Unit = super[TraversableOnce].copyToArray[B](xs)
      def toArray[B >: TreeIterator.this.R](implicit evidence$1: ClassTag[B]): Array[B] = 
        super[TraversableOnce].toArray[B](evidence$1)
      def toList: List[TreeIterator.this.R] = super[TraversableOnce].toList
      def toIterable: Iterable[TreeIterator.this.R] = super[TraversableOnce].toIterable
      def toSeq: Seq[TreeIterator.this.R] = super[TraversableOnce].toSeq
      def toIndexedSeq: scala.collection.immutable.IndexedSeq[TreeIterator.this.R] = super[TraversableOnce].toIndexedSeq
      def toBuffer[B >: TreeIterator.this.R]: scala.collection.mutable.Buffer[B] = super[TraversableOnce].toBuffer[B]
      def toSet[B >: TreeIterator.this.R]: Set[B] = super[TraversableOnce].toSet[B]
      def toVector: Vector[TreeIterator.this.R] = super[TraversableOnce].toVector
      def to[Col <: [_] => Any](
        implicit cbf: 
          scala.collection.generic.CanBuildFrom[Nothing, TreeIterator.this.R, 
            Col[TreeIterator.this.R @uncheckedVariance]
          ]
      ): Col[TreeIterator.this.R @uncheckedVariance] = super[TraversableOnce].to[Col](cbf)
      def toMap[T, U](implicit ev: TreeIterator.this.R <:< (T, U)): Map[T, U] = super[TraversableOnce].toMap[T, U](ev)
      def mkString(start: String, sep: String, end: String): String = super[TraversableOnce].mkString(start, sep, end)
      def mkString(sep: String): String = super[TraversableOnce].mkString(sep)
      def mkString: String = super[TraversableOnce].mkString
      def addString(b: StringBuilder, start: String, sep: String, end: String): StringBuilder = 
        super[TraversableOnce].addString(b, start, sep, end)
      def addString(b: StringBuilder, sep: String): StringBuilder = super[TraversableOnce].addString(b, sep)
      def addString(b: StringBuilder): StringBuilder = super[TraversableOnce].addString(b)
      def seq: Iterator[TreeIterator.this.R] = super[Iterator].seq
      def isEmpty: Boolean = super[Iterator].isEmpty
      def isTraversableAgain: Boolean = super[Iterator].isTraversableAgain
      def hasDefiniteSize: Boolean = super[Iterator].hasDefiniteSize
      def take(n: Int): Iterator[TreeIterator.this.R] = super[Iterator].take(n)
      def drop(n: Int): Iterator[TreeIterator.this.R] = super[Iterator].drop(n)
      def slice(from: Int, until: Int): Iterator[TreeIterator.this.R] = super[Iterator].slice(from, until)
      protected def sliceIterator(from: Int, until: Int): Iterator[TreeIterator.this.R] = 
        super[Iterator].sliceIterator(from, until)
      def map[B](f: TreeIterator.this.R => B): Iterator[B] = super[Iterator].map[B](f)
      def ++[B >: TreeIterator.this.R](that: => scala.collection.GenTraversableOnce[B]): Iterator[B] = 
        super[Iterator].++[B](that)
      def flatMap[B](f: TreeIterator.this.R => scala.collection.GenTraversableOnce[B]): Iterator[B] = 
        super[Iterator].flatMap[B](f)
      def filter(p: TreeIterator.this.R => Boolean): Iterator[TreeIterator.this.R] = super[Iterator].filter(p)
      def corresponds[B](that: scala.collection.GenTraversableOnce[B])(p: (TreeIterator.this.R, B) => Boolean): Boolean
         = 
      super[Iterator].corresponds[B](that)(p)
      def withFilter(p: TreeIterator.this.R => Boolean): Iterator[TreeIterator.this.R] = super[Iterator].withFilter(p)
      def filterNot(p: TreeIterator.this.R => Boolean): Iterator[TreeIterator.this.R] = super[Iterator].filterNot(p)
      @scala.annotation.migration("`collect` has changed. The previous behavior can be reproduced with `toSeq`.", 
        "2.8.0"
      ) def collect[B](pf: PartialFunction[TreeIterator.this.R, B]): Iterator[B] = super[Iterator].collect[B](pf)
      def scanLeft[B](z: B)(op: (B, TreeIterator.this.R) => B): Iterator[B] = super[Iterator].scanLeft[B](z)(op)
      def scanRight[B](z: B)(op: (TreeIterator.this.R, B) => B): Iterator[B] = super[Iterator].scanRight[B](z)(op)
      def takeWhile(p: TreeIterator.this.R => Boolean): Iterator[TreeIterator.this.R] = super[Iterator].takeWhile(p)
      def partition(p: TreeIterator.this.R => Boolean): (Iterator[TreeIterator.this.R], Iterator[TreeIterator.this.R])
         = 
      super[Iterator].partition(p)
      def span(p: TreeIterator.this.R => Boolean): (Iterator[TreeIterator.this.R], Iterator[TreeIterator.this.R]) = 
        super[Iterator].span(p)
      def dropWhile(p: TreeIterator.this.R => Boolean): Iterator[TreeIterator.this.R] = super[Iterator].dropWhile(p)
      def zip[B](that: Iterator[B]): Iterator[(TreeIterator.this.R, B)] = super[Iterator].zip[B](that)
      def padTo[A1 >: TreeIterator.this.R](len: Int, elem: A1): Iterator[A1] = super[Iterator].padTo[A1](len, elem)
      def zipWithIndex: Iterator[(TreeIterator.this.R, Int)] = super[Iterator].zipWithIndex
      def zipAll[B, A1 >: TreeIterator.this.R, B1 >: B](that: Iterator[B], thisElem: A1, thatElem: B1): 
        Iterator[(A1, B1)]
       = super[Iterator].zipAll[B, A1, B1](that, thisElem, thatElem)
      def foreach[U](f: TreeIterator.this.R => U): Unit = super[Iterator].foreach[U](f)
      def forall(p: TreeIterator.this.R => Boolean): Boolean = super[Iterator].forall(p)
      def exists(p: TreeIterator.this.R => Boolean): Boolean = super[Iterator].exists(p)
      def contains(elem: Any): Boolean = super[Iterator].contains(elem)
      def find(p: TreeIterator.this.R => Boolean): Option[TreeIterator.this.R] = super[Iterator].find(p)
      def indexWhere(p: TreeIterator.this.R => Boolean): Int = super[Iterator].indexWhere(p)
      def indexWhere(p: TreeIterator.this.R => Boolean, from: Int): Int = super[Iterator].indexWhere(p, from)
      def indexOf[B >: TreeIterator.this.R](elem: B): Int = super[Iterator].indexOf[B](elem)
      def indexOf[B >: TreeIterator.this.R](elem: B, from: Int): Int = super[Iterator].indexOf[B](elem, from)
      def buffered: BufferedIterator[TreeIterator.this.R] = super[Iterator].buffered
      def grouped[B >: TreeIterator.this.R](size: Int): TreeIterator.this.GroupedIterator[B] = 
        super[Iterator].grouped[B](size)
      def sliding[B >: TreeIterator.this.R](size: Int, step: Int): TreeIterator.this.GroupedIterator[B] = 
        super[Iterator].sliding[B](size, step)
      def length: Int = super[Iterator].length
      def duplicate: (Iterator[TreeIterator.this.R], Iterator[TreeIterator.this.R]) = super[Iterator].duplicate
      def patch[B >: TreeIterator.this.R](from: Int, patchElems: Iterator[B], replaced: Int): Iterator[B] = 
        super[Iterator].patch[B](from, patchElems, replaced)
      def copyToArray[B >: TreeIterator.this.R](xs: Array[B], start: Int, len: Int): Unit = 
        super[Iterator].copyToArray[B](xs, start, len)
      def sameElements(that: Iterator[_]): Boolean = super[Iterator].sameElements(that)
      def toTraversable: Traversable[TreeIterator.this.R] = super[Iterator].toTraversable
      def toIterator: Iterator[TreeIterator.this.R] = super[Iterator].toIterator
      def toStream: Stream[TreeIterator.this.R] = super[Iterator].toStream
      override def toString(): String = super[Iterator].toString()
      def sliding$default$2[B >: TreeIterator.this.R]: Int @uncheckedVariance = super[Iterator].sliding$default$2[B]
      private type A
      private type B
      private type R
      private val root: scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]
      private val start: Option[TreeIterator.this.A]
      private implicit val ordering: Ordering[TreeIterator.this.A]
      protected def nextResult(
        tree: scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]
      ): TreeIterator.this.R
      override def hasNext: Boolean = this.lookahead.ne(null)
      override def next(): TreeIterator.this.R = 
        {
          case val x51: 
            scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B](TreeIterator.this.
              lookahead
            )
           = this.lookahead
          if null.==(x51) then throw new NoSuchElementException("next on empty iterator") else 
            {
              this.lookahead = this.findLeftMostOrPopOnEmpty(this.goRight(x51))
              this.nextResult(x51)
            }
        }
      private def findLeftMostOrPopOnEmpty(
        tree: scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]
      ): scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B] = 
        {
          def tailLabel80[A, B, R]($this: scala.collection.immutable.RedBlackTree.TreeIterator[A, B, R])(
            tree: scala.collection.immutable.RedBlackTree.Tree[A, B]
          ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
            if tree.eq(null) then $this.popNext() else 
              if tree.left.eq(null) then tree else tailLabel80[A, B, R]($this)($this.goLeft(tree))
          tailLabel80[TreeIterator.this.A, TreeIterator.this.B, TreeIterator.this.R](this)(tree)
        }
      private def pushNext(tree: scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B])
        : 
      Unit = 
        {
          def tailLabel81[A, B, R]($this: scala.collection.immutable.RedBlackTree.TreeIterator[A, B, R])(
            tree: scala.collection.immutable.RedBlackTree.Tree[A, B]
          ): Unit = 
            try 
              {
                $this.stackOfNexts.update($this.index, tree)
                $this.index = 1.+($this.index)
              }
             catch 
              {
                case _: ArrayIndexOutOfBoundsException => 
                  assert($this.index.>=($this.stackOfNexts.length))
                  $this.stackOfNexts = 
                    refArrayOps[scala.collection.immutable.RedBlackTree.Tree[A, B]]($this.stackOfNexts).:+[
                      scala.collection.immutable.RedBlackTree.Tree[A, B]
                    ](null)(
                      scala.reflect.ClassTag.apply[scala.collection.immutable.RedBlackTree.Tree[A, B]](
                        classOf[class Tree]
                      )
                    )
                  tailLabel81[A, B, R]($this)(tree)
              }
          tailLabel81[TreeIterator.this.A, TreeIterator.this.B, TreeIterator.this.R](this)(tree)
        }
      private def popNext(): scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B] = 
        if this.index.==(0) then null else 
          {
            this.index = this.index.-(1)
            this.stackOfNexts.apply(this.index)
          }
      private var stackOfNexts: 
        Array[scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]]
       = 
        if TreeIterator.this.root.eq(null) then null else 
          {
            val maximumHeight: Int = 
              2.*(32.-(Integer.numberOfLeadingZeros(TreeIterator.this.root.count.+(2).-(1)))).-(2).-(1)
            dotty.runtime.Arrays.newArray[
              Array[scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]]
            ](classOf[class Tree], classOf[class Array], [maximumHeight : Int])
          }
      private var index: Int = 0
      private var lookahead: scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B] = 
        TreeIterator.this.start.map[
          scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]
        ](
          {
            def $anonfun(key: TreeIterator.this.A): 
              scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]
             = this.startFrom(key)
            closure($anonfun)
          }
        ).getOrElse[scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]](
          <special-ops>.<cbn-arg>[scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]
            ]
          (
            {
              def $anonfun(): scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B] = 
                this.findLeftMostOrPopOnEmpty(TreeIterator.this.root)
              closure($anonfun)
            }
          )
        )
      private def startFrom(key: TreeIterator.this.A): 
        scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]
       = 
        if TreeIterator.this.root.eq(null) then null else 
          {
            @annotation.tailrec() def find(
              tree: scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]
            ): scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B] = 
              {
                def tailLabel84(
                  tree: scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]
                ): scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B] = 
                  if tree.eq(null) then this.popNext() else 
                    tailLabel84(
                      if TreeIterator.this.ordering.lteq(key, tree.key) then this.goLeft(tree) else this.goRight(tree)
                    )
                tailLabel84(tree)
              }
            find(TreeIterator.this.root)
          }
      private def goLeft(tree: scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]): 
        scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]
       = 
        {
          this.pushNext(tree)
          tree.left
        }
      private def goRight(tree: scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B])
        : 
      scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B] = tree.right
    }
    private class EntriesIterator[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], focus: Option[A])(
      implicit evidence$16: Ordering[A]
    ) extends scala.collection.immutable.RedBlackTree.TreeIterator[EntriesIterator.this.A, EntriesIterator.this.B, 
      (EntriesIterator.this.A, EntriesIterator.this.B)
    ](tree, focus)(evidence$16) { 
      private type A
      private type B
      private val tree: scala.collection.immutable.RedBlackTree.Tree[EntriesIterator.this.A, EntriesIterator.this.B]
      private val focus: Option[EntriesIterator.this.A]
      private implicit val evidence$16: Ordering[EntriesIterator.this.A]
      override def nextResult(
        tree: scala.collection.immutable.RedBlackTree.Tree[EntriesIterator.this.A, EntriesIterator.this.B]
      ): (EntriesIterator.this.A, EntriesIterator.this.B) = 
        new Tuple2[EntriesIterator.this.A, EntriesIterator.this.B](tree.key, tree.value)
    }
    private class KeysIterator[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], focus: Option[A])(
      implicit evidence$17: Ordering[A]
    ) extends scala.collection.immutable.RedBlackTree.TreeIterator[KeysIterator.this.A, KeysIterator.this.B, 
      KeysIterator.this.A
    ](tree, focus)(evidence$17) { 
      private type A
      private type B
      private val tree: scala.collection.immutable.RedBlackTree.Tree[KeysIterator.this.A, KeysIterator.this.B]
      private val focus: Option[KeysIterator.this.A]
      private implicit val evidence$17: Ordering[KeysIterator.this.A]
      override def nextResult(
        tree: scala.collection.immutable.RedBlackTree.Tree[KeysIterator.this.A, KeysIterator.this.B]
      ): KeysIterator.this.A = tree.key
    }
    private class ValuesIterator[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], focus: Option[A])(
      implicit evidence$18: Ordering[A]
    ) extends scala.collection.immutable.RedBlackTree.TreeIterator[ValuesIterator.this.A, ValuesIterator.this.B, 
      ValuesIterator.this.B
    ](tree, focus)(evidence$18) { 
      private type A
      private type B
      private val tree: scala.collection.immutable.RedBlackTree.Tree[ValuesIterator.this.A, ValuesIterator.this.B]
      private val focus: Option[ValuesIterator.this.A]
      private implicit val evidence$18: Ordering[ValuesIterator.this.A]
      override def nextResult(
        tree: scala.collection.immutable.RedBlackTree.Tree[ValuesIterator.this.A, ValuesIterator.this.B]
      ): ValuesIterator.this.B = tree.value
    }
  }
  final lazy module val Test: scala.collection.immutable.Test = new scala.collection.immutable.Test()
  @scala.annotation.internal.SourceFile(
    "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/rbtree.scala"
  ) final module class Test() extends Object() { 
    def main(args: Array[String]): Unit = ()
  }
} of class class dotty.tools.dotc.ast.Trees$PackageDef # 732665
[====================>                  ] completed (509/940, 54s)[====================>                  ] completed (510/940, 54s)[====================>                  ] completed (511/940, 54s)exception while typing package collection {
  package scala.collection.immutable {
    final lazy module val RedBlackTree: scala.collection.immutable.RedBlackTree = 
      new scala.collection.immutable.RedBlackTree()
    @scala.annotation.internal.SourceFile(
      "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/rbtree.scala"
    ) final module class RedBlackTree() extends Object() { 
      def isEmpty(tree: scala.collection.immutable.RedBlackTree.Tree[_, _]): Boolean = tree.eq(null)
      def contains[A](tree: scala.collection.immutable.RedBlackTree.Tree[A, _], x: A)(implicit evidence$1: Ordering[A])
        : 
      Boolean = scala.collection.immutable.RedBlackTree.lookup[A, Any](tree, x)(evidence$1).ne(null)
      def get[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], x: A)(implicit evidence$2: Ordering[A]): 
        Option[B]
       = 
        {
          case val x1: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
            scala.collection.immutable.RedBlackTree.lookup[A, B](tree, x)(evidence$2)
          if null.==(x1) then None else new Some[B](x1.value)
        }
      @annotation.tailrec() def lookup[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], x: A)(
        implicit ordering: Ordering[A]
      ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
        {
          def tailLabel4[A, B]($this: scala.collection.immutable.RedBlackTree.type)(
            tree: scala.collection.immutable.RedBlackTree.Tree[A, B]
          , x: A)(implicit ordering: Ordering[A]): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
            if tree.eq(null) then null else 
              {
                val cmp: Int = ordering.compare(x, tree.key)
                if cmp.<(0) then tailLabel4[A, B]($this)(tree.left, x)(ordering) else 
                  if cmp.>(0) then tailLabel4[A, B]($this)(tree.right, x)(ordering) else tree
              }
          tailLabel4[A, B](this)(tree, x)(ordering)
        }
      def count(tree: scala.collection.immutable.RedBlackTree.Tree[_, _]): Int = if tree.eq(null) then 0 else tree.count
      def countInRange[A](tree: scala.collection.immutable.RedBlackTree.Tree[A, _], from: Option[A], to: Option[A])(
        implicit ordering: Ordering[A]
      ): Int = 
        {
          def tailLabel6[A]($this: scala.collection.immutable.RedBlackTree.type)(
            tree: scala.collection.immutable.RedBlackTree.Tree[A, _]
          , from: Option[A], to: Option[A])(implicit ordering: Ordering[A]): Int = 
            if tree.eq(null) then 0 else 
              {
                def case4(): Int = 
                  1.+(scala.collection.immutable.RedBlackTree.countInRange[A](tree.left, from, None)(ordering)).+(
                    scala.collection.immutable.RedBlackTree.countInRange[A](tree.right, None, to)(ordering)
                  )
                def case5(case x16: Option[A]): Int = 
                  if x16.$isInstanceOf$[Some[A]] then 
                    {
                      case val x5: Some[A] = x16.asInstanceOf[Some[A]]
                      if ordering.gteq(tree.key, x5.value) then tailLabel6[A]($this)(tree.left, from, to)(ordering)
                         else 
                      case4()
                    }
                   else case4()
                if None.==(from).&&(None.==(to)) then tree.count else 
                  {
                    case x13: Option[A] = from
                    case x14: Option[A] = to
                    if x13.$isInstanceOf$[Some[A]] then 
                      {
                        case val x9: Some[A] = x13.asInstanceOf[Some[A]]
                        if ordering.lt(tree.key, x9.value) then tailLabel6[A]($this)(tree.right, from, to)(ordering)
                           else 
                        case5(x14)
                      }
                     else case5(x14)
                  }
              }
          tailLabel6[A](this)(tree, from, to)(ordering)
        }
      def update[A, B, B1 >: B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], k: A, v: B1, 
        overwrite: Boolean
      )(implicit evidence$3: Ordering[A]): scala.collection.immutable.RedBlackTree.Tree[A, B1] = 
        scala.collection.immutable.RedBlackTree.blacken[A, B1](
          scala.collection.immutable.RedBlackTree.upd[A, B, B1](tree, k, v, overwrite)(evidence$3)
        )
      def delete[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], k: A)(implicit evidence$4: Ordering[A])
        : 
      scala.collection.immutable.RedBlackTree.Tree[A, B] = 
        scala.collection.immutable.RedBlackTree.blacken[A, B](
          scala.collection.immutable.RedBlackTree.del[A, B](tree, k)(evidence$4)
        )
      def rangeImpl[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], from: Option[A], until: Option[A])(
        implicit evidence$5: Ordering[A]
      ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
        {
          case val x19: (Option[A], Option[A]) = new Tuple2[Option[A], Option[A]](from, until)
          def case9(case x42: Option[A], case x43: Option[A]): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
            if None.==(x42).&&(x43.$isInstanceOf$[Some[A]]) then 
              {
                case val x24: Some[A] = x43.asInstanceOf[Some[A]]
                this.until[A, B](tree, x24.value)(evidence$5)
              }
             else 
              {
                case x44: Option[A] = x42
                case x45: Option[A] = x43
                if None.==(x44).&&(None.==(x45)) then tree else throw new MatchError(x19)
              }
          def case10(case x38: Option[A], case x39: Option[A]): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
            if x38.$isInstanceOf$[Some[A]] then 
              {
                case val x28: Some[A] = x38.asInstanceOf[Some[A]]
                if None.==(x39) then this.from[A, B](tree, x28.value)(evidence$5) else case9(x38, x39)
              }
             else case9(x38, x39)
          if from.$isInstanceOf$[Some[A]] then 
            {
              case val x34: Some[A] = from.asInstanceOf[Some[A]]
              if until.$isInstanceOf$[Some[A]] then 
                {
                  case val x32: Some[A] = until.asInstanceOf[Some[A]]
                  this.range[A, B](tree, x34.value, x32.value)(evidence$5)
                }
               else case10(from, until)
            }
           else case10(from, until)
        }
      def range[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], from: A, until: A)(
        implicit evidence$6: Ordering[A]
      ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
        scala.collection.immutable.RedBlackTree.blacken[A, B](
          scala.collection.immutable.RedBlackTree.doRange[A, B](tree, from, until)(evidence$6)
        )
      def from[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], from: A)(implicit evidence$7: Ordering[A]
        )
      : scala.collection.immutable.RedBlackTree.Tree[A, B] = 
        scala.collection.immutable.RedBlackTree.blacken[A, B](
          scala.collection.immutable.RedBlackTree.doFrom[A, B](tree, from)(evidence$7)
        )
      def to[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], to: A)(implicit evidence$8: Ordering[A]): 
        scala.collection.immutable.RedBlackTree.Tree[A, B]
       = 
        scala.collection.immutable.RedBlackTree.blacken[A, B](
          scala.collection.immutable.RedBlackTree.doTo[A, B](tree, to)(evidence$8)
        )
      def until[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], key: A)(implicit evidence$9: Ordering[A]
        )
      : scala.collection.immutable.RedBlackTree.Tree[A, B] = 
        scala.collection.immutable.RedBlackTree.blacken[A, B](
          scala.collection.immutable.RedBlackTree.doUntil[A, B](tree, key)(evidence$9)
        )
      def drop[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], n: Int)(implicit evidence$10: Ordering[A]
        )
      : scala.collection.immutable.RedBlackTree.Tree[A, B] = 
        scala.collection.immutable.RedBlackTree.blacken[A, B](
          scala.collection.immutable.RedBlackTree.doDrop[A, B](tree, n)
        )
      def take[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], n: Int)(implicit evidence$11: Ordering[A]
        )
      : scala.collection.immutable.RedBlackTree.Tree[A, B] = 
        scala.collection.immutable.RedBlackTree.blacken[A, B](
          scala.collection.immutable.RedBlackTree.doTake[A, B](tree, n)
        )
      def slice[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], from: Int, until: Int)(
        implicit evidence$12: Ordering[A]
      ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
        scala.collection.immutable.RedBlackTree.blacken[A, B](
          scala.collection.immutable.RedBlackTree.doSlice[A, B](tree, from, until)
        )
      def smallest[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B]): 
        scala.collection.immutable.RedBlackTree.Tree[A, B]
       = 
        {
          if tree.eq(null) then throw new NoSuchElementException("empty map") else ()
          var result: scala.collection.immutable.RedBlackTree.Tree[A, B] = tree
          {
            def while$(): Unit = 
              if result.left.ne(null) then 
                {
                  result = result.left
                  while$()
                }
               else ()
            while$()
          }
          result: scala.collection.immutable.RedBlackTree.Tree[A, B]
        }
      def greatest[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B]): 
        scala.collection.immutable.RedBlackTree.Tree[A, B]
       = 
        {
          if tree.eq(null) then throw new NoSuchElementException("empty map") else ()
          var result: scala.collection.immutable.RedBlackTree.Tree[A, B] = tree
          {
            def while$(): Unit = 
              if result.right.ne(null) then 
                {
                  result = result.right
                  while$()
                }
               else ()
            while$()
          }
          result: scala.collection.immutable.RedBlackTree.Tree[A, B]
        }
      def foreach[A, B, U](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], f: ((A, B)) => U): Unit = 
        if tree.ne(null) then scala.collection.immutable.RedBlackTree._foreach[A, B, U](tree, f) else ()
      private def _foreach[A, B, U](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], f: ((A, B)) => U): Unit = 
        {
          def tailLabel20[A, B, U]($this: scala.collection.immutable.RedBlackTree.type)(
            tree: scala.collection.immutable.RedBlackTree.Tree[A, B]
          , f: ((A, B)) => U): Unit = 
            {
              if tree.left.ne(null) then scala.collection.immutable.RedBlackTree._foreach[A, B, U](tree.left, f) else ()
              f.apply(new Tuple2[A, B](tree.key, tree.value))
              if tree.right.ne(null) then tailLabel20[A, B, U]($this)(tree.right, f) else ()
            }
          tailLabel20[A, B, U](this)(tree, f)
        }
      def foreachKey[A, U](tree: scala.collection.immutable.RedBlackTree.Tree[A, _], f: A => U): Unit = 
        if tree.ne(null) then scala.collection.immutable.RedBlackTree._foreachKey[A, U](tree, f) else ()
      private def _foreachKey[A, U](tree: scala.collection.immutable.RedBlackTree.Tree[A, _], f: A => U): Unit = 
        {
          def tailLabel22[A, U]($this: scala.collection.immutable.RedBlackTree.type)(
            tree: scala.collection.immutable.RedBlackTree.Tree[A, _]
          , f: A => U): Unit = 
            {
              if tree.left.ne(null) then scala.collection.immutable.RedBlackTree._foreachKey[A, U](tree.left, f) else ()
              f.apply(tree.key)
              if tree.right.ne(null) then tailLabel22[A, U]($this)(tree.right, f) else ()
            }
          tailLabel22[A, U](this)(tree, f)
        }
      def iterator[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], start: Option[A])(
        implicit evidence$13: Ordering[A]
      ): Iterator[(A, B)] = new scala.collection.immutable.RedBlackTree.EntriesIterator[A, B](tree, start)(evidence$13)
      def iterator$default$2[A, B]: None.type = None
      def keysIterator[A](tree: scala.collection.immutable.RedBlackTree.Tree[A, _], start: Option[A])(
        implicit evidence$14: Ordering[A]
      ): Iterator[A] = new scala.collection.immutable.RedBlackTree.KeysIterator[A, Any](tree, start)(evidence$14)
      def keysIterator$default$2[A]: None.type = None
      def valuesIterator[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], start: Option[A])(
        implicit evidence$15: Ordering[A]
      ): Iterator[B] = new scala.collection.immutable.RedBlackTree.ValuesIterator[A, B](tree, start)(evidence$15)
      def valuesIterator$default$2[A, B]: None.type = None
      @annotation.tailrec() def nth[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], n: Int): 
        scala.collection.immutable.RedBlackTree.Tree[A, B]
       = 
        {
          def tailLabel29[A, B]($this: scala.collection.immutable.RedBlackTree.type)(
            tree: scala.collection.immutable.RedBlackTree.Tree[A, B]
          , n: Int): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
            {
              val count: Int = $this.count(tree.left)
              if n.<(count) then tailLabel29[A, B]($this)(tree.left, n) else 
                if n.>(count) then tailLabel29[A, B]($this)(tree.right, n.-(count).-(1)) else tree
            }
          tailLabel29[A, B](this)(tree, n)
        }
      def isBlack(tree: scala.collection.immutable.RedBlackTree.Tree[_, _]): Boolean = 
        tree.eq(null).||(scala.collection.immutable.RedBlackTree.isBlackTree(tree))
      private def isRedTree(tree: scala.collection.immutable.RedBlackTree.Tree[_, _]): Boolean = 
        tree.isInstanceOf[scala.collection.immutable.RedBlackTree.RedTree[_, _]]
      private def isBlackTree(tree: scala.collection.immutable.RedBlackTree.Tree[_, _]): Boolean = 
        tree.isInstanceOf[scala.collection.immutable.RedBlackTree.BlackTree[_, _]]
      private def blacken[A, B](t: scala.collection.immutable.RedBlackTree.Tree[A, B]): 
        scala.collection.immutable.RedBlackTree.Tree[A, B]
       = if t.eq(null) then null else t.black
      private def mkTree[A, B](isBlack: Boolean, k: A, v: B, l: scala.collection.immutable.RedBlackTree.Tree[A, B], 
        r: scala.collection.immutable.RedBlackTree.Tree[A, B]
      ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
        if isBlack then 
          /* inlined from scala.collection.immutable.RedBlackTree*/ 
            {
              new scala.collection.immutable.RedBlackTree.BlackTree[A, B](k, v, l, r)
            }
         else 
          /* inlined from scala.collection.immutable.RedBlackTree*/ 
            {
              new scala.collection.immutable.RedBlackTree.RedTree[A, B](k, v, l, r)
            }
      private def balanceLeft[A, B, B1 >: B](isBlack: Boolean, z: A, zv: B, 
        l: scala.collection.immutable.RedBlackTree.Tree[A, B1]
      , d: scala.collection.immutable.RedBlackTree.Tree[A, B1]): scala.collection.immutable.RedBlackTree.Tree[A, B1] = 
        if 
          scala.collection.immutable.RedBlackTree.isRedTree(l).&&(
            scala.collection.immutable.RedBlackTree.isRedTree(l.left)
          )
         then 
          /* inlined from scala.collection.immutable.RedBlackTree*/ 
            {
              val left: scala.collection.immutable.RedBlackTree.BlackTree[A, B1] = 
                /* inlined from scala.collection.immutable.RedBlackTree*/ 
                  {
                    new scala.collection.immutable.RedBlackTree.BlackTree[A, B1](l.left.key, l.left.value, l.left.left, 
                      l.left.right
                    )
                  }
              val right: scala.collection.immutable.RedBlackTree.BlackTree[A, B1] = 
                /* inlined from scala.collection.immutable.RedBlackTree*/ 
                  {
                    new scala.collection.immutable.RedBlackTree.BlackTree[A, B1](z, zv, l.right, d)
                  }
              new scala.collection.immutable.RedBlackTree.RedTree[A, B1](l.key, l.value, left, right)
            }
         else 
          if 
            scala.collection.immutable.RedBlackTree.isRedTree(l).&&(
              scala.collection.immutable.RedBlackTree.isRedTree(l.right)
            )
           then 
            /* inlined from scala.collection.immutable.RedBlackTree*/ 
              {
                val left: scala.collection.immutable.RedBlackTree.BlackTree[A, B1] = 
                  /* inlined from scala.collection.immutable.RedBlackTree*/ 
                    {
                      new scala.collection.immutable.RedBlackTree.BlackTree[A, B1](l.key, l.value, l.left, l.right.left)
                    }
                val right: scala.collection.immutable.RedBlackTree.BlackTree[A, B1] = 
                  /* inlined from scala.collection.immutable.RedBlackTree*/ 
                    {
                      new scala.collection.immutable.RedBlackTree.BlackTree[A, B1](z, zv, l.right.right, d)
                    }
                new scala.collection.immutable.RedBlackTree.RedTree[A, B1](l.right.key, l.right.value, left, right)
              }
           else scala.collection.immutable.RedBlackTree.mkTree[A, B1](isBlack, z, zv, l, d)
      private def balanceRight[A, B, B1 >: B](isBlack: Boolean, x: A, xv: B, 
        a: scala.collection.immutable.RedBlackTree.Tree[A, B1]
      , r: scala.collection.immutable.RedBlackTree.Tree[A, B1]): scala.collection.immutable.RedBlackTree.Tree[A, B1] = 
        if 
          scala.collection.immutable.RedBlackTree.isRedTree(r).&&(
            scala.collection.immutable.RedBlackTree.isRedTree(r.left)
          )
         then 
          /* inlined from scala.collection.immutable.RedBlackTree*/ 
            {
              val left: scala.collection.immutable.RedBlackTree.BlackTree[A, B1] = 
                /* inlined from scala.collection.immutable.RedBlackTree*/ 
                  {
                    new scala.collection.immutable.RedBlackTree.BlackTree[A, B1](x, xv, a, r.left.left)
                  }
              val right: scala.collection.immutable.RedBlackTree.BlackTree[A, B1] = 
                /* inlined from scala.collection.immutable.RedBlackTree*/ 
                  {
                    new scala.collection.immutable.RedBlackTree.BlackTree[A, B1](r.key, r.value, r.left.right, r.right)
                  }
              new scala.collection.immutable.RedBlackTree.RedTree[A, B1](r.left.key, r.left.value, left, right)
            }
         else 
          if 
            scala.collection.immutable.RedBlackTree.isRedTree(r).&&(
              scala.collection.immutable.RedBlackTree.isRedTree(r.right)
            )
           then 
            /* inlined from scala.collection.immutable.RedBlackTree*/ 
              {
                val left: scala.collection.immutable.RedBlackTree.BlackTree[A, B1] = 
                  /* inlined from scala.collection.immutable.RedBlackTree*/ 
                    {
                      new scala.collection.immutable.RedBlackTree.BlackTree[A, B1](x, xv, a, r.left)
                    }
                val right: scala.collection.immutable.RedBlackTree.BlackTree[A, B1] = 
                  /* inlined from scala.collection.immutable.RedBlackTree*/ 
                    {
                      new scala.collection.immutable.RedBlackTree.BlackTree[A, B1](r.right.key, r.right.value, 
                        r.right.left
                      , r.right.right)
                    }
                new scala.collection.immutable.RedBlackTree.RedTree[A, B1](r.key, r.value, left, right)
              }
           else scala.collection.immutable.RedBlackTree.mkTree[A, B1](isBlack, x, xv, a, r)
      private def upd[A, B, B1 >: B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], k: A, v: B1, 
        overwrite: Boolean
      )(implicit ordering: Ordering[A]): scala.collection.immutable.RedBlackTree.Tree[A, B1] = 
        if tree.eq(null) then 
          /* inlined from scala.collection.immutable.RedBlackTree*/ 
            {
              new scala.collection.immutable.RedBlackTree.RedTree[A, B1](k, v, null: Null, null: Null)
            }
         else 
          {
            val cmp: Int = ordering.compare(k, tree.key)
            if cmp.<(0) then 
              scala.collection.immutable.RedBlackTree.balanceLeft[A, B, B1](
                scala.collection.immutable.RedBlackTree.isBlackTree(tree)
              , tree.key, tree.value, 
                scala.collection.immutable.RedBlackTree.upd[A, B, B1](tree.left, k, v, overwrite)(ordering)
              , tree.right)
             else 
              if cmp.>(0) then 
                scala.collection.immutable.RedBlackTree.balanceRight[A, B, B1](
                  scala.collection.immutable.RedBlackTree.isBlackTree(tree)
                , tree.key, tree.value, tree.left, 
                  scala.collection.immutable.RedBlackTree.upd[A, B, B1](tree.right, k, v, overwrite)(ordering)
                )
               else 
                if overwrite.||(k.==(tree.key).unary_!) then 
                  scala.collection.immutable.RedBlackTree.mkTree[A, B1](
                    scala.collection.immutable.RedBlackTree.isBlackTree(tree)
                  , k, v, tree.left, tree.right)
                 else tree
          }
      private def updNth[A, B, B1 >: B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], idx: Int, k: A, v: B1
        , 
      overwrite: Boolean): scala.collection.immutable.RedBlackTree.Tree[A, B1] = 
        if tree.eq(null) then 
          /* inlined from scala.collection.immutable.RedBlackTree*/ 
            {
              new scala.collection.immutable.RedBlackTree.RedTree[A, B1](k, v, null: Null, null: Null)
            }
         else 
          {
            val rank: Int = 1.+(scala.collection.immutable.RedBlackTree.count(tree.left))
            if idx.<(rank) then 
              scala.collection.immutable.RedBlackTree.balanceLeft[A, B, B1](
                scala.collection.immutable.RedBlackTree.isBlackTree(tree)
              , tree.key, tree.value, 
                scala.collection.immutable.RedBlackTree.updNth[A, B, B1](tree.left, idx, k, v, overwrite)
              , tree.right)
             else 
              if idx.>(rank) then 
                scala.collection.immutable.RedBlackTree.balanceRight[A, B, B1](
                  scala.collection.immutable.RedBlackTree.isBlackTree(tree)
                , tree.key, tree.value, tree.left, 
                  scala.collection.immutable.RedBlackTree.updNth[A, B, B1](tree.right, idx.-(rank), k, v, overwrite)
                )
               else 
                if overwrite then 
                  scala.collection.immutable.RedBlackTree.mkTree[A, B1](
                    scala.collection.immutable.RedBlackTree.isBlackTree(tree)
                  , k, v, tree.left, tree.right)
                 else tree
          }
      private def del[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], k: A)(
        implicit ordering: Ordering[A]
      ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
        if tree.eq(null) then null else 
          {
            def balance(x: A, xv: B, tl: scala.collection.immutable.RedBlackTree.Tree[A, B], 
              tr: scala.collection.immutable.RedBlackTree.Tree[A, B]
            ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
              if scala.collection.immutable.RedBlackTree.isRedTree(tl) then 
                if scala.collection.immutable.RedBlackTree.isRedTree(tr) then 
                  /* inlined from scala.collection.immutable.RedBlackTree*/ 
                    {
                      val left: scala.collection.immutable.RedBlackTree.Tree[A, B] = tl.black
                      val right: scala.collection.immutable.RedBlackTree.Tree[A, B] = tr.black
                      new scala.collection.immutable.RedBlackTree.RedTree[A, B](x, xv, left, right)
                    }
                 else 
                  if scala.collection.immutable.RedBlackTree.isRedTree(tl.left) then 
                    /* inlined from scala.collection.immutable.RedBlackTree*/ 
                      {
                        val left: scala.collection.immutable.RedBlackTree.Tree[A, B] = tl.left.black
                        val right: scala.collection.immutable.RedBlackTree.BlackTree[A, B] = 
                          /* inlined from scala.collection.immutable.RedBlackTree*/ 
                            {
                              new scala.collection.immutable.RedBlackTree.BlackTree[A, B](x, xv, tl.right, tr)
                            }
                        new scala.collection.immutable.RedBlackTree.RedTree[A, B](tl.key, tl.value, left, right)
                      }
                   else 
                    if scala.collection.immutable.RedBlackTree.isRedTree(tl.right) then 
                      /* inlined from scala.collection.immutable.RedBlackTree*/ 
                        {
                          val left: scala.collection.immutable.RedBlackTree.BlackTree[A, B] = 
                            /* inlined from scala.collection.immutable.RedBlackTree*/ 
                              {
                                new scala.collection.immutable.RedBlackTree.BlackTree[A, B](tl.key, tl.value, tl.left, 
                                  tl.right.left
                                )
                              }
                          val right: scala.collection.immutable.RedBlackTree.BlackTree[A, B] = 
                            /* inlined from scala.collection.immutable.RedBlackTree*/ 
                              {
                                new scala.collection.immutable.RedBlackTree.BlackTree[A, B](x, xv, tl.right.right, tr)
                              }
                          new scala.collection.immutable.RedBlackTree.RedTree[A, B](tl.right.key, tl.right.value, left, 
                            right
                          )
                        }
                     else 
                      /* inlined from scala.collection.immutable.RedBlackTree*/ 
                        {
                          new scala.collection.immutable.RedBlackTree.BlackTree[A, B](x, xv, tl, tr)
                        }
               else 
                if scala.collection.immutable.RedBlackTree.isRedTree(tr) then 
                  if scala.collection.immutable.RedBlackTree.isRedTree(tr.right) then 
                    /* inlined from scala.collection.immutable.RedBlackTree*/ 
                      {
                        val left: scala.collection.immutable.RedBlackTree.BlackTree[A, B] = 
                          /* inlined from scala.collection.immutable.RedBlackTree*/ 
                            {
                              new scala.collection.immutable.RedBlackTree.BlackTree[A, B](x, xv, tl, tr.left)
                            }
                        val right: scala.collection.immutable.RedBlackTree.Tree[A, B] = tr.right.black
                        new scala.collection.immutable.RedBlackTree.RedTree[A, B](tr.key, tr.value, left, right)
                      }
                   else 
                    if scala.collection.immutable.RedBlackTree.isRedTree(tr.left) then 
                      /* inlined from scala.collection.immutable.RedBlackTree*/ 
                        {
                          val left: scala.collection.immutable.RedBlackTree.BlackTree[A, B] = 
                            /* inlined from scala.collection.immutable.RedBlackTree*/ 
                              {
                                new scala.collection.immutable.RedBlackTree.BlackTree[A, B](x, xv, tl, tr.left.left)
                              }
                          val right: scala.collection.immutable.RedBlackTree.BlackTree[A, B] = 
                            /* inlined from scala.collection.immutable.RedBlackTree*/ 
                              {
                                new scala.collection.immutable.RedBlackTree.BlackTree[A, B](tr.key, tr.value, 
                                  tr.left.right
                                , tr.right)
                              }
                          new scala.collection.immutable.RedBlackTree.RedTree[A, B](tr.left.key, tr.left.value, left, 
                            right
                          )
                        }
                     else 
                      /* inlined from scala.collection.immutable.RedBlackTree*/ 
                        {
                          new scala.collection.immutable.RedBlackTree.BlackTree[A, B](x, xv, tl, tr)
                        }
                 else 
                  /* inlined from scala.collection.immutable.RedBlackTree*/ 
                    {
                      new scala.collection.immutable.RedBlackTree.BlackTree[A, B](x, xv, tl, tr)
                    }
            def subl(t: scala.collection.immutable.RedBlackTree.Tree[A, B]): 
              scala.collection.immutable.RedBlackTree.Tree[A, B]
             = 
              if t.isInstanceOf[scala.collection.immutable.RedBlackTree.BlackTree[_, _]] then t.red else 
                sys.package.error("Defect: invariance violation; expected black, got ".+(t))
            def balLeft(x: A, xv: B, tl: scala.collection.immutable.RedBlackTree.Tree[A, B], 
              tr: scala.collection.immutable.RedBlackTree.Tree[A, B]
            ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
              if scala.collection.immutable.RedBlackTree.isRedTree(tl) then 
                /* inlined from scala.collection.immutable.RedBlackTree*/ 
                  {
                    val left: scala.collection.immutable.RedBlackTree.Tree[A, B] = tl.black
                    new scala.collection.immutable.RedBlackTree.RedTree[A, B](x, xv, left, tr)
                  }
               else 
                if scala.collection.immutable.RedBlackTree.isBlackTree(tr) then balance(x, xv, tl, tr.red) else 
                  if 
                    scala.collection.immutable.RedBlackTree.isRedTree(tr).&&(
                      scala.collection.immutable.RedBlackTree.isBlackTree(tr.left)
                    )
                   then 
                    /* inlined from scala.collection.immutable.RedBlackTree*/ 
                      {
                        val left: scala.collection.immutable.RedBlackTree.BlackTree[A, B] = 
                          /* inlined from scala.collection.immutable.RedBlackTree*/ 
                            {
                              new scala.collection.immutable.RedBlackTree.BlackTree[A, B](x, xv, tl, tr.left.left)
                            }
                        val right: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
                          balance(tr.key, tr.value, tr.left.right, subl(tr.right))
                        new scala.collection.immutable.RedBlackTree.RedTree[A, B](tr.left.key, tr.left.value, left, 
                          right
                        )
                      }
                   else sys.package.error("Defect: invariance violation")
            def balRight(x: A, xv: B, tl: scala.collection.immutable.RedBlackTree.Tree[A, B], 
              tr: scala.collection.immutable.RedBlackTree.Tree[A, B]
            ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
              if scala.collection.immutable.RedBlackTree.isRedTree(tr) then 
                /* inlined from scala.collection.immutable.RedBlackTree*/ 
                  {
                    val right: scala.collection.immutable.RedBlackTree.Tree[A, B] = tr.black
                    new scala.collection.immutable.RedBlackTree.RedTree[A, B](x, xv, tl, right)
                  }
               else 
                if scala.collection.immutable.RedBlackTree.isBlackTree(tl) then balance(x, xv, tl.red, tr) else 
                  if 
                    scala.collection.immutable.RedBlackTree.isRedTree(tl).&&(
                      scala.collection.immutable.RedBlackTree.isBlackTree(tl.right)
                    )
                   then 
                    /* inlined from scala.collection.immutable.RedBlackTree*/ 
                      {
                        val left: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
                          balance(tl.key, tl.value, subl(tl.left), tl.right.left)
                        val right: scala.collection.immutable.RedBlackTree.BlackTree[A, B] = 
                          /* inlined from scala.collection.immutable.RedBlackTree*/ 
                            {
                              new scala.collection.immutable.RedBlackTree.BlackTree[A, B](x, xv, tl.right.right, tr)
                            }
                        new scala.collection.immutable.RedBlackTree.RedTree[A, B](tl.right.key, tl.right.value, left, 
                          right
                        )
                      }
                   else sys.package.error("Defect: invariance violation")
            def delLeft: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
              if scala.collection.immutable.RedBlackTree.isBlackTree(tree.left) then 
                balLeft(tree.key, tree.value, scala.collection.immutable.RedBlackTree.del[A, B](tree.left, k)(ordering)
                  , 
                tree.right)
               else 
                /* inlined from scala.collection.immutable.RedBlackTree*/ 
                  {
                    val left: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
                      scala.collection.immutable.RedBlackTree.del[A, B](tree.left, k)(ordering)
                    new scala.collection.immutable.RedBlackTree.RedTree[A, B](tree.key, tree.value, left, tree.right)
                  }
            def delRight: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
              if scala.collection.immutable.RedBlackTree.isBlackTree(tree.right) then 
                balRight(tree.key, tree.value, tree.left, 
                  scala.collection.immutable.RedBlackTree.del[A, B](tree.right, k)(ordering)
                )
               else 
                /* inlined from scala.collection.immutable.RedBlackTree*/ 
                  {
                    val right: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
                      scala.collection.immutable.RedBlackTree.del[A, B](tree.right, k)(ordering)
                    new scala.collection.immutable.RedBlackTree.RedTree[A, B](tree.key, tree.value, tree.left, right)
                  }
            def append(tl: scala.collection.immutable.RedBlackTree.Tree[A, B], 
              tr: scala.collection.immutable.RedBlackTree.Tree[A, B]
            ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
              if tl.eq(null) then tr else 
                if tr.eq(null) then tl else 
                  if 
                    scala.collection.immutable.RedBlackTree.isRedTree(tl).&&(
                      scala.collection.immutable.RedBlackTree.isRedTree(tr)
                    )
                   then 
                    {
                      val bc: scala.collection.immutable.RedBlackTree.Tree[A, B] = append(tl.right, tr.left)
                      if scala.collection.immutable.RedBlackTree.isRedTree(bc) then 
                        /* inlined from scala.collection.immutable.RedBlackTree*/ 
                          {
                            val left: scala.collection.immutable.RedBlackTree.RedTree[A, B] = 
                              /* inlined from scala.collection.immutable.RedBlackTree*/ 
                                {
                                  new scala.collection.immutable.RedBlackTree.RedTree[A, B](tl.key, tl.value, tl.left, 
                                    bc.left
                                  )
                                }
                            val right: scala.collection.immutable.RedBlackTree.RedTree[A, B] = 
                              /* inlined from scala.collection.immutable.RedBlackTree*/ 
                                {
                                  new scala.collection.immutable.RedBlackTree.RedTree[A, B](tr.key, tr.value, bc.right, 
                                    tr.right
                                  )
                                }
                            new scala.collection.immutable.RedBlackTree.RedTree[A, B](bc.key, bc.value, left, right)
                          }
                       else 
                        /* inlined from scala.collection.immutable.RedBlackTree*/ 
                          {
                            val right: scala.collection.immutable.RedBlackTree.RedTree[A, B] = 
                              /* inlined from scala.collection.immutable.RedBlackTree*/ 
                                {
                                  new scala.collection.immutable.RedBlackTree.RedTree[A, B](tr.key, tr.value, bc, 
                                    tr.right
                                  )
                                }
                            new scala.collection.immutable.RedBlackTree.RedTree[A, B](tl.key, tl.value, tl.left, right)
                          }
                    }
                   else 
                    if 
                      scala.collection.immutable.RedBlackTree.isBlackTree(tl).&&(
                        scala.collection.immutable.RedBlackTree.isBlackTree(tr)
                      )
                     then 
                      {
                        val bc: scala.collection.immutable.RedBlackTree.Tree[A, B] = append(tl.right, tr.left)
                        if scala.collection.immutable.RedBlackTree.isRedTree(bc) then 
                          /* inlined from scala.collection.immutable.RedBlackTree*/ 
                            {
                              val left: scala.collection.immutable.RedBlackTree.BlackTree[A, B] = 
                                /* inlined from scala.collection.immutable.RedBlackTree*/ 
                                  {
                                    new scala.collection.immutable.RedBlackTree.BlackTree[A, B](tl.key, tl.value, 
                                      tl.left
                                    , bc.left)
                                  }
                              val right: scala.collection.immutable.RedBlackTree.BlackTree[A, B] = 
                                /* inlined from scala.collection.immutable.RedBlackTree*/ 
                                  {
                                    new scala.collection.immutable.RedBlackTree.BlackTree[A, B](tr.key, tr.value, 
                                      bc.right
                                    , tr.right)
                                  }
                              new scala.collection.immutable.RedBlackTree.RedTree[A, B](bc.key, bc.value, left, right)
                            }
                         else 
                          balLeft(tl.key, tl.value, tl.left, 
                            /* inlined from scala.collection.immutable.RedBlackTree*/ 
                              {
                                new scala.collection.immutable.RedBlackTree.BlackTree[A, B](tr.key, tr.value, bc, 
                                  tr.right
                                )
                              }
                          )
                      }
                     else 
                      if scala.collection.immutable.RedBlackTree.isRedTree(tr) then 
                        /* inlined from scala.collection.immutable.RedBlackTree*/ 
                          {
                            val left: scala.collection.immutable.RedBlackTree.Tree[A, B] = append(tl, tr.left)
                            new scala.collection.immutable.RedBlackTree.RedTree[A, B](tr.key, tr.value, left, tr.right)
                          }
                       else 
                        if scala.collection.immutable.RedBlackTree.isRedTree(tl) then 
                          /* inlined from scala.collection.immutable.RedBlackTree*/ 
                            {
                              val right: scala.collection.immutable.RedBlackTree.Tree[A, B] = append(tl.right, tr)
                              new scala.collection.immutable.RedBlackTree.RedTree[A, B](tl.key, tl.value, tl.left, right
                                )
                            }
                         else sys.package.error("unmatched tree on append: ".+(tl).+(", ").+(tr))
            val cmp: Int = ordering.compare(k, tree.key)
            if cmp.<(0) then delLeft else if cmp.>(0) then delRight else append(tree.left, tree.right)
          }
      private def doFrom[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], from: A)(
        implicit ordering: Ordering[A]
      ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
        {
          if tree.eq(null) then return null else ()
          if ordering.lt(tree.key, from) then 
            return scala.collection.immutable.RedBlackTree.doFrom[A, B](tree.right, from)(ordering)
           else ()
          val newLeft: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
            scala.collection.immutable.RedBlackTree.doFrom[A, B](tree.left, from)(ordering)
          if newLeft.eq(tree.left) then tree else 
            if newLeft.eq(null) then 
              scala.collection.immutable.RedBlackTree.upd[A, B, B](tree.right, tree.key, tree.value, false)(ordering)
             else scala.collection.immutable.RedBlackTree.rebalance[A, B](tree, newLeft, tree.right)
        }
      private def doTo[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], to: A)(
        implicit ordering: Ordering[A]
      ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
        {
          if tree.eq(null) then return null else ()
          if ordering.lt(to, tree.key) then 
            return scala.collection.immutable.RedBlackTree.doTo[A, B](tree.left, to)(ordering)
           else ()
          val newRight: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
            scala.collection.immutable.RedBlackTree.doTo[A, B](tree.right, to)(ordering)
          if newRight.eq(tree.right) then tree else 
            if newRight.eq(null) then 
              scala.collection.immutable.RedBlackTree.upd[A, B, B](tree.left, tree.key, tree.value, false)(ordering)
             else scala.collection.immutable.RedBlackTree.rebalance[A, B](tree, tree.left, newRight)
        }
      private def doUntil[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], until: A)(
        implicit ordering: Ordering[A]
      ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
        {
          if tree.eq(null) then return null else ()
          if ordering.lteq(until, tree.key) then 
            return scala.collection.immutable.RedBlackTree.doUntil[A, B](tree.left, until)(ordering)
           else ()
          val newRight: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
            scala.collection.immutable.RedBlackTree.doUntil[A, B](tree.right, until)(ordering)
          if newRight.eq(tree.right) then tree else 
            if newRight.eq(null) then 
              scala.collection.immutable.RedBlackTree.upd[A, B, B](tree.left, tree.key, tree.value, false)(ordering)
             else scala.collection.immutable.RedBlackTree.rebalance[A, B](tree, tree.left, newRight)
        }
      private def doRange[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], from: A, until: A)(
        implicit ordering: Ordering[A]
      ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
        {
          if tree.eq(null) then return null else ()
          if ordering.lt(tree.key, from) then 
            return scala.collection.immutable.RedBlackTree.doRange[A, B](tree.right, from, until)(ordering)
           else ()
          if ordering.lteq(until, tree.key) then 
            return scala.collection.immutable.RedBlackTree.doRange[A, B](tree.left, from, until)(ordering)
           else ()
          val newLeft: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
            scala.collection.immutable.RedBlackTree.doFrom[A, B](tree.left, from)(ordering)
          val newRight: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
            scala.collection.immutable.RedBlackTree.doUntil[A, B](tree.right, until)(ordering)
          if newLeft.eq(tree.left).&&(newRight.eq(tree.right)) then tree else 
            if newLeft.eq(null) then 
              scala.collection.immutable.RedBlackTree.upd[A, B, B](newRight, tree.key, tree.value, false)(ordering)
             else 
              if newRight.eq(null) then 
                scala.collection.immutable.RedBlackTree.upd[A, B, B](newLeft, tree.key, tree.value, false)(ordering)
               else scala.collection.immutable.RedBlackTree.rebalance[A, B](tree, newLeft, newRight)
        }
      private def doDrop[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], n: Int): 
        scala.collection.immutable.RedBlackTree.Tree[A, B]
       = 
        {
          if n.<=(0) then return tree else ()
          if n.>=(this.count(tree)) then return null else ()
          val count: Int = this.count(tree.left)
          if n.>(count) then return scala.collection.immutable.RedBlackTree.doDrop[A, B](tree.right, n.-(count).-(1))
             else 
          ()
          val newLeft: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
            scala.collection.immutable.RedBlackTree.doDrop[A, B](tree.left, n)
          if newLeft.eq(tree.left) then tree else 
            if newLeft.eq(null) then 
              scala.collection.immutable.RedBlackTree.updNth[A, B, B](tree.right, n.-(count).-(1), tree.key, tree.value
                , 
              false)
             else scala.collection.immutable.RedBlackTree.rebalance[A, B](tree, newLeft, tree.right)
        }
      private def doTake[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], n: Int): 
        scala.collection.immutable.RedBlackTree.Tree[A, B]
       = 
        {
          if n.<=(0) then return null else ()
          if n.>=(this.count(tree)) then return tree else ()
          val count: Int = this.count(tree.left)
          if n.<=(count) then return scala.collection.immutable.RedBlackTree.doTake[A, B](tree.left, n) else ()
          val newRight: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
            scala.collection.immutable.RedBlackTree.doTake[A, B](tree.right, n.-(count).-(1))
          if newRight.eq(tree.right) then tree else 
            if newRight.eq(null) then 
              scala.collection.immutable.RedBlackTree.updNth[A, B, B](tree.left, n, tree.key, tree.value, false)
             else scala.collection.immutable.RedBlackTree.rebalance[A, B](tree, tree.left, newRight)
        }
      private def doSlice[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], from: Int, until: Int): 
        scala.collection.immutable.RedBlackTree.Tree[A, B]
       = 
        {
          if tree.eq(null) then return null else ()
          val count: Int = this.count(tree.left)
          if from.>(count) then 
            return 
              scala.collection.immutable.RedBlackTree.doSlice[A, B](tree.right, from.-(count).-(1), until.-(count).-(1))
           else ()
          if until.<=(count) then return scala.collection.immutable.RedBlackTree.doSlice[A, B](tree.left, from, until)
             else 
          ()
          val newLeft: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
            scala.collection.immutable.RedBlackTree.doDrop[A, B](tree.left, from)
          val newRight: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
            scala.collection.immutable.RedBlackTree.doTake[A, B](tree.right, until.-(count).-(1))
          if newLeft.eq(tree.left).&&(newRight.eq(tree.right)) then tree else 
            if newLeft.eq(null) then 
              scala.collection.immutable.RedBlackTree.updNth[A, B, B](newRight, from.-(count).-(1), tree.key, tree.value
                , 
              false)
             else 
              if newRight.eq(null) then 
                scala.collection.immutable.RedBlackTree.updNth[A, B, B](newLeft, until, tree.key, tree.value, false)
               else scala.collection.immutable.RedBlackTree.rebalance[A, B](tree, newLeft, newRight)
        }
      private def compareDepth[A, B](left: scala.collection.immutable.RedBlackTree.Tree[A, B], 
        right: scala.collection.immutable.RedBlackTree.Tree[A, B]
      ): 
        (scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]], Boolean, 
          Boolean
        , Int)
       = 
        {
          def unzip(
            zipper: scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]]
          , leftMost: Boolean): 
            scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]]
           = 
            {
              def tailLabel54(
                zipper: 
                  scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]]
              , leftMost: Boolean): 
                scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]]
               = 
                {
                  val next: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
                    if leftMost then zipper.head.left else zipper.head.right
                  if next.eq(null) then zipper else 
                    tailLabel54(
                      scala.collection.immutable.RedBlackTree.NList.cons[
                        scala.collection.immutable.RedBlackTree.Tree[A, B]
                      ](next, zipper)
                    , leftMost)
                }
              tailLabel54(zipper, leftMost)
            }
          def unzipBoth(left: scala.collection.immutable.RedBlackTree.Tree[A, B], 
            right: scala.collection.immutable.RedBlackTree.Tree[A, B]
          , 
            leftZipper: 
              scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]]
          , 
            rightZipper: 
              scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]]
          , smallerDepth: Int): 
            (scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]], Boolean
              , 
            Boolean, Int)
           = 
            {
              def tailLabel55(left: scala.collection.immutable.RedBlackTree.Tree[A, B], 
                right: scala.collection.immutable.RedBlackTree.Tree[A, B]
              , 
                leftZipper: 
                  scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]]
              , 
                rightZipper: 
                  scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]]
              , smallerDepth: Int): 
                (scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]], 
                  Boolean
                , Boolean, Int)
               = 
                if 
                  scala.collection.immutable.RedBlackTree.isBlackTree(left).&&(
                    scala.collection.immutable.RedBlackTree.isBlackTree(right)
                  )
                 then 
                  tailLabel55(left.right, right.left, 
                    scala.collection.immutable.RedBlackTree.NList.cons[
                      scala.collection.immutable.RedBlackTree.Tree[A, B]
                    ](left, leftZipper)
                  , 
                    scala.collection.immutable.RedBlackTree.NList.cons[
                      scala.collection.immutable.RedBlackTree.Tree[A, B]
                    ](right, rightZipper)
                  , 1.+(smallerDepth))
                 else 
                  if 
                    scala.collection.immutable.RedBlackTree.isRedTree(left).&&(
                      scala.collection.immutable.RedBlackTree.isRedTree(right)
                    )
                   then 
                    tailLabel55(left.right, right.left, 
                      scala.collection.immutable.RedBlackTree.NList.cons[
                        scala.collection.immutable.RedBlackTree.Tree[A, B]
                      ](left, leftZipper)
                    , 
                      scala.collection.immutable.RedBlackTree.NList.cons[
                        scala.collection.immutable.RedBlackTree.Tree[A, B]
                      ](right, rightZipper)
                    , smallerDepth)
                   else 
                    if scala.collection.immutable.RedBlackTree.isRedTree(right) then 
                      tailLabel55(left, right.left, leftZipper, 
                        scala.collection.immutable.RedBlackTree.NList.cons[
                          scala.collection.immutable.RedBlackTree.Tree[A, B]
                        ](right, rightZipper)
                      , smallerDepth)
                     else 
                      if scala.collection.immutable.RedBlackTree.isRedTree(left) then 
                        tailLabel55(left.right, right, 
                          scala.collection.immutable.RedBlackTree.NList.cons[
                            scala.collection.immutable.RedBlackTree.Tree[A, B]
                          ](left, leftZipper)
                        , rightZipper, smallerDepth)
                       else 
                        if left.eq(null).&&(right.eq(null)) then 
                          new Tuple4[Null, Boolean, Boolean, Int](null, true, false, smallerDepth)
                         else sys.package.error("unmatched trees in unzip: ".+(left).+(", ").+(right))
              tailLabel55(left, right, leftZipper, rightZipper, smallerDepth)
            }
          unzipBoth(left, right, null, null, 0)
        }
      private def rebalance[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], 
        newLeft: scala.collection.immutable.RedBlackTree.Tree[A, B]
      , newRight: scala.collection.immutable.RedBlackTree.Tree[A, B]): 
        scala.collection.immutable.RedBlackTree.Tree[A, B]
       = 
        {
          @annotation.tailrec() def findDepth(
            zipper: scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]]
          , depth: Int): 
            scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]]
           = 
            {
              def tailLabel57(
                zipper: 
                  scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]]
              , depth: Int): 
                scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]]
               = 
                if zipper.eq(null) then sys.package.error("Defect: unexpected empty zipper while computing range") else 
                  if scala.collection.immutable.RedBlackTree.isBlackTree(zipper.head) then 
                    if depth.==(1) then zipper else tailLabel57(zipper.tail, depth.-(1))
                   else tailLabel57(zipper.tail, depth)
              tailLabel57(zipper, depth)
            }
          val blkNewLeft: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
            scala.collection.immutable.RedBlackTree.blacken[A, B](newLeft)
          val blkNewRight: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
            scala.collection.immutable.RedBlackTree.blacken[A, B](newRight)
          var ilo5: scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]]
          var ilo6: Boolean
          var ilo7: Boolean
          var ilo8: Int
          case val x46: 
            (scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]], Boolean
              , 
            Boolean, Int) @unchecked
           = 
            scala.collection.immutable.RedBlackTree.compareDepth[A, B](blkNewLeft, blkNewRight): 
              (scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]], 
                Boolean
              , Boolean, Int) @unchecked
          if x46.ne(null) then 
            {
              ilo5 = x46._1
              ilo6 = x46._2
              ilo7 = x46._3
              ilo8 = x46._4
              ()
            }
           else throw new MatchError(x46)
          val leftMost: Boolean = ilo7
          if ilo6 then 
            /* inlined from scala.collection.immutable.RedBlackTree*/ 
              {
                new scala.collection.immutable.RedBlackTree.BlackTree[A, B](tree.key, tree.value, blkNewLeft, 
                  blkNewRight
                )
              }
           else 
            {
              val zipFrom: 
                scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]]
               = findDepth(ilo5, ilo8)
              val union: scala.collection.immutable.RedBlackTree.RedTree[A, B] = 
                if leftMost then 
                  /* inlined from scala.collection.immutable.RedBlackTree*/ 
                    {
                      new scala.collection.immutable.RedBlackTree.RedTree[A, B](tree.key, tree.value, blkNewLeft, 
                        zipFrom.head
                      )
                    }
                 else 
                  /* inlined from scala.collection.immutable.RedBlackTree*/ 
                    {
                      new scala.collection.immutable.RedBlackTree.RedTree[A, B](tree.key, tree.value, zipFrom.head, 
                        blkNewRight
                      )
                    }
              val zippedTree: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
                scala.collection.immutable.RedBlackTree.NList.foldLeft[
                  scala.collection.immutable.RedBlackTree.Tree[A, B]
                , scala.collection.immutable.RedBlackTree.Tree[A, B]](zipFrom.tail, 
                  union: scala.collection.immutable.RedBlackTree.Tree[A, B]
                )(
                  {
                    def $anonfun(tree: scala.collection.immutable.RedBlackTree.Tree[A, B], 
                      node: scala.collection.immutable.RedBlackTree.Tree[A, B]
                    ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
                      if leftMost then 
                        scala.collection.immutable.RedBlackTree.balanceLeft[A, B, B](
                          scala.collection.immutable.RedBlackTree.isBlackTree(node)
                        , node.key, node.value, tree, node.right)
                       else 
                        scala.collection.immutable.RedBlackTree.balanceRight[A, B, B](
                          scala.collection.immutable.RedBlackTree.isBlackTree(node)
                        , node.key, node.value, node.left, tree)
                    closure($anonfun)
                  }
                )
              zippedTree: scala.collection.immutable.RedBlackTree.Tree[A, B]
            }
        }
      private final class NList[A](head: A, tail: scala.collection.immutable.RedBlackTree.NList[A]) extends Object() { 
        private type A
        <accessor> def head: NList.this.A
        <accessor> def tail: scala.collection.immutable.RedBlackTree.NList[NList.this.A]
      }
      private final lazy module val NList: scala.collection.immutable.RedBlackTree.NList = 
        new scala.collection.immutable.RedBlackTree.NList()
      private final module class NList() extends Object() { 
        def cons[B](x: B, xs: scala.collection.immutable.RedBlackTree.NList[B]): 
          scala.collection.immutable.RedBlackTree.NList[B]
         = new scala.collection.immutable.RedBlackTree.NList[B](x, xs)
        def foldLeft[A, B](xs: scala.collection.immutable.RedBlackTree.NList[A], z: B)(f: (B, A) => B): B = 
          {
            var acc: B = z
            var these: scala.collection.immutable.RedBlackTree.NList[A] = xs
            {
              def while$(): Unit = 
                if these.ne(null) then 
                  {
                    {
                      acc = f.apply(acc, these.head)
                      these = these.tail
                    }
                    while$()
                  }
                 else ()
              while$()
            }
            acc: B
          }
      }
      @scala.annotation.internal.Child[scala.collection.immutable.RedBlackTree.BlackTree]() @
        scala.annotation.internal.Child
      [scala.collection.immutable.RedBlackTree.RedTree]() sealed abstract class Tree[A, B](@inline() key: A, 
        @inline() value: B
      , @inline() left: scala.collection.immutable.RedBlackTree.Tree[A, B], 
        @inline() right: scala.collection.immutable.RedBlackTree.Tree[A, B]
      ) extends Object() with Serializable { 
        private type A
        private type +B
        @inline() final <accessor> def key: Tree.this.A
        @inline() final <accessor> def value: Tree.this.B
        @inline() final <accessor> def left: scala.collection.immutable.RedBlackTree.Tree[Tree.this.A, Tree.this.B]
        @inline() final <accessor> def right: scala.collection.immutable.RedBlackTree.Tree[Tree.this.A, Tree.this.B]
        @inline() final <accessor> def count: Int = 
          1.+(scala.collection.immutable.RedBlackTree.count(Tree.this.left)).+(
            scala.collection.immutable.RedBlackTree.count(Tree.this.right)
          )
        def black: scala.collection.immutable.RedBlackTree.Tree[Tree.this.A, Tree.this.B]
        def red: scala.collection.immutable.RedBlackTree.Tree[Tree.this.A, Tree.this.B]
      }
      final class RedTree[A, B](key: A, value: B, left: scala.collection.immutable.RedBlackTree.Tree[A, B], 
        right: scala.collection.immutable.RedBlackTree.Tree[A, B]
      ) extends scala.collection.immutable.RedBlackTree.Tree[RedTree.this.A, RedTree.this.B](key, value, left, right) { 
        private type A
        private type +B
        private def key: RedTree.this.A = super.key
        private def value: RedTree.this.B = super.value
        private def left: scala.collection.immutable.RedBlackTree.Tree[RedTree.this.A, RedTree.this.B] = super.left
        private def right: scala.collection.immutable.RedBlackTree.Tree[RedTree.this.A, RedTree.this.B] = super.right
        override def black: scala.collection.immutable.RedBlackTree.Tree[RedTree.this.A, RedTree.this.B] = 
          /* inlined from scala.collection.immutable.RedBlackTree*/ 
            {
              new scala.collection.immutable.RedBlackTree.BlackTree[RedTree.this.A, RedTree.this.B](RedTree.this.key, 
                RedTree.this.value
              , RedTree.this.left, RedTree.this.right)
            }
        override def red: scala.collection.immutable.RedBlackTree.Tree[RedTree.this.A, RedTree.this.B] = this
        override def toString: String = 
          "RedTree(".+(RedTree.this.key).+(", ").+(RedTree.this.value).+(", ").+(RedTree.this.left).+(", ").+(
            RedTree.this.right
          ).+(")")
      }
      final class BlackTree[A, B](key: A, value: B, left: scala.collection.immutable.RedBlackTree.Tree[A, B], 
        right: scala.collection.immutable.RedBlackTree.Tree[A, B]
      ) extends scala.collection.immutable.RedBlackTree.Tree[BlackTree.this.A, BlackTree.this.B](key, value, left, right
        )
       { 
        private type A
        private type +B
        private def key: BlackTree.this.A = super.key
        private def value: BlackTree.this.B = super.value
        private def left: scala.collection.immutable.RedBlackTree.Tree[BlackTree.this.A, BlackTree.this.B] = super.left
        private def right: scala.collection.immutable.RedBlackTree.Tree[BlackTree.this.A, BlackTree.this.B] = 
          super.right
        override def black: scala.collection.immutable.RedBlackTree.Tree[BlackTree.this.A, BlackTree.this.B] = this
        override def red: scala.collection.immutable.RedBlackTree.Tree[BlackTree.this.A, BlackTree.this.B] = 
          /* inlined from scala.collection.immutable.RedBlackTree*/ 
            {
              new scala.collection.immutable.RedBlackTree.RedTree[BlackTree.this.A, BlackTree.this.B](BlackTree.this.key
                , 
              BlackTree.this.value, BlackTree.this.left, BlackTree.this.right)
            }
        override def toString: String = 
          "BlackTree(".+(BlackTree.this.key).+(", ").+(BlackTree.this.value).+(", ").+(BlackTree.this.left).+(", ").+(
            BlackTree.this.right
          ).+(")")
      }
      final lazy module val RedTree: scala.collection.immutable.RedBlackTree.RedTree = 
        new scala.collection.immutable.RedBlackTree.RedTree()
      final module class RedTree() extends Object() { 
        @scala.collection.immutable.RedBlackTree.RedTree[A, B](key, value, left, right) @inline() inline def apply[A, B]
          (
        key: A, value: B, left: scala.collection.immutable.RedBlackTree.Tree[A, B], 
          right: scala.collection.immutable.RedBlackTree.Tree[A, B]
        ): scala.collection.immutable.RedBlackTree.RedTree[A, B] = 
          new scala.collection.immutable.RedBlackTree.RedTree[A, B](key, value, left, right)
        def unapply[A, B](t: scala.collection.immutable.RedBlackTree.RedTree[A, B]): 
          Some[(A, B, scala.collection.immutable.RedBlackTree.Tree[A, B], 
            scala.collection.immutable.RedBlackTree.Tree[A, B]
          )]
         = 
          new Some[
            (A, B, scala.collection.immutable.RedBlackTree.Tree[A, B], 
              scala.collection.immutable.RedBlackTree.Tree[A, B]
            )
          ](
            new Tuple4[A, B, scala.collection.immutable.RedBlackTree.Tree[A, B], 
              scala.collection.immutable.RedBlackTree.Tree[A, B]
            ](t.key, t.value, t.left, t.right)
          )
      }
      final lazy module val BlackTree: scala.collection.immutable.RedBlackTree.BlackTree = 
        new scala.collection.immutable.RedBlackTree.BlackTree()
      final module class BlackTree() extends Object() { 
        @scala.collection.immutable.RedBlackTree.BlackTree[A, B](key, value, left, right) @inline() inline def apply[A, 
          B
        ](key: A, value: B, left: scala.collection.immutable.RedBlackTree.Tree[A, B], 
          right: scala.collection.immutable.RedBlackTree.Tree[A, B]
        ): scala.collection.immutable.RedBlackTree.BlackTree[A, B] = 
          new scala.collection.immutable.RedBlackTree.BlackTree[A, B](key, value, left, right)
        def unapply[A, B](t: scala.collection.immutable.RedBlackTree.BlackTree[A, B]): 
          Some[(A, B, scala.collection.immutable.RedBlackTree.Tree[A, B], 
            scala.collection.immutable.RedBlackTree.Tree[A, B]
          )]
         = 
          new Some[
            (A, B, scala.collection.immutable.RedBlackTree.Tree[A, B], 
              scala.collection.immutable.RedBlackTree.Tree[A, B]
            )
          ](
            new Tuple4[A, B, scala.collection.immutable.RedBlackTree.Tree[A, B], 
              scala.collection.immutable.RedBlackTree.Tree[A, B]
            ](t.key, t.value, t.left, t.right)
          )
      }
      private abstract class TreeIterator[A, B, R](root: scala.collection.immutable.RedBlackTree.Tree[A, B], 
        start: Option[A]
      )(implicit ordering: Ordering[A]) extends Object() with Iterator[TreeIterator.this.R] { 
        protected def sizeHintIfCheap: Int = super[GenTraversableOnce].sizeHintIfCheap
        protected def reversed: List[TreeIterator.this.R] = super[TraversableOnce].reversed
        def size: Int = super[TraversableOnce].size
        def nonEmpty: Boolean = super[TraversableOnce].nonEmpty
        def count(p: TreeIterator.this.R => Boolean): Int = super[TraversableOnce].count(p)
        def collectFirst[B](pf: PartialFunction[TreeIterator.this.R, B]): Option[B] = 
          super[TraversableOnce].collectFirst[B](pf)
        def /:[B](z: B)(op: (B, TreeIterator.this.R) => B): B = super[TraversableOnce]./:[B](z)(op)
        def :\[B](z: B)(op: (TreeIterator.this.R, B) => B): B = super[TraversableOnce].:\[B](z)(op)
        def foldLeft[B](z: B)(op: (B, TreeIterator.this.R) => B): B = super[TraversableOnce].foldLeft[B](z)(op)
        def foldRight[B](z: B)(op: (TreeIterator.this.R, B) => B): B = super[TraversableOnce].foldRight[B](z)(op)
        def reduceLeft[B >: TreeIterator.this.R](op: (B, TreeIterator.this.R) => B): B = 
          super[TraversableOnce].reduceLeft[B](op)
        def reduceRight[B >: TreeIterator.this.R](op: (TreeIterator.this.R, B) => B): B = 
          super[TraversableOnce].reduceRight[B](op)
        def reduceLeftOption[B >: TreeIterator.this.R](op: (B, TreeIterator.this.R) => B): Option[B] = 
          super[TraversableOnce].reduceLeftOption[B](op)
        def reduceRightOption[B >: TreeIterator.this.R](op: (TreeIterator.this.R, B) => B): Option[B] = 
          super[TraversableOnce].reduceRightOption[B](op)
        def reduce[A1 >: TreeIterator.this.R](op: (A1, A1) => A1): A1 = super[TraversableOnce].reduce[A1](op)
        def reduceOption[A1 >: TreeIterator.this.R](op: (A1, A1) => A1): Option[A1] = 
          super[TraversableOnce].reduceOption[A1](op)
        def fold[A1 >: TreeIterator.this.R](z: A1)(op: (A1, A1) => A1): A1 = super[TraversableOnce].fold[A1](z)(op)
        def aggregate[B](z: => B)(seqop: (B, TreeIterator.this.R) => B, combop: (B, B) => B): B = 
          super[TraversableOnce].aggregate[B](z)(seqop, combop)
        def sum[B >: TreeIterator.this.R](implicit num: Numeric[B]): B = super[TraversableOnce].sum[B](num)
        def product[B >: TreeIterator.this.R](implicit num: Numeric[B]): B = super[TraversableOnce].product[B](num)
        def min[B >: TreeIterator.this.R](implicit cmp: Ordering[B]): TreeIterator.this.R = 
          super[TraversableOnce].min[B](cmp)
        def max[B >: TreeIterator.this.R](implicit cmp: Ordering[B]): TreeIterator.this.R = 
          super[TraversableOnce].max[B](cmp)
        def maxBy[B](f: TreeIterator.this.R => B)(implicit cmp: Ordering[B]): TreeIterator.this.R = 
          super[TraversableOnce].maxBy[B](f)(cmp)
        def minBy[B](f: TreeIterator.this.R => B)(implicit cmp: Ordering[B]): TreeIterator.this.R = 
          super[TraversableOnce].minBy[B](f)(cmp)
        def copyToBuffer[B >: TreeIterator.this.R](dest: scala.collection.mutable.Buffer[B]): Unit = 
          super[TraversableOnce].copyToBuffer[B](dest)
        def copyToArray[B >: TreeIterator.this.R](xs: Array[B], start: Int): Unit = 
          super[TraversableOnce].copyToArray[B](xs, start)
        def copyToArray[B >: TreeIterator.this.R](xs: Array[B]): Unit = super[TraversableOnce].copyToArray[B](xs)
        def toArray[B >: TreeIterator.this.R](implicit evidence$1: ClassTag[B]): Array[B] = 
          super[TraversableOnce].toArray[B](evidence$1)
        def toList: List[TreeIterator.this.R] = super[TraversableOnce].toList
        def toIterable: Iterable[TreeIterator.this.R] = super[TraversableOnce].toIterable
        def toSeq: Seq[TreeIterator.this.R] = super[TraversableOnce].toSeq
        def toIndexedSeq: scala.collection.immutable.IndexedSeq[TreeIterator.this.R] = 
          super[TraversableOnce].toIndexedSeq
        def toBuffer[B >: TreeIterator.this.R]: scala.collection.mutable.Buffer[B] = super[TraversableOnce].toBuffer[B]
        def toSet[B >: TreeIterator.this.R]: Set[B] = super[TraversableOnce].toSet[B]
        def toVector: Vector[TreeIterator.this.R] = super[TraversableOnce].toVector
        def to[Col <: [_] => Any](
          implicit cbf: 
            scala.collection.generic.CanBuildFrom[Nothing, TreeIterator.this.R, 
              Col[TreeIterator.this.R @uncheckedVariance]
            ]
        ): Col[TreeIterator.this.R @uncheckedVariance] = super[TraversableOnce].to[Col](cbf)
        def toMap[T, U](implicit ev: TreeIterator.this.R <:< (T, U)): Map[T, U] = super[TraversableOnce].toMap[T, U](ev)
        def mkString(start: String, sep: String, end: String): String = super[TraversableOnce].mkString(start, sep, end)
        def mkString(sep: String): String = super[TraversableOnce].mkString(sep)
        def mkString: String = super[TraversableOnce].mkString
        def addString(b: StringBuilder, start: String, sep: String, end: String): StringBuilder = 
          super[TraversableOnce].addString(b, start, sep, end)
        def addString(b: StringBuilder, sep: String): StringBuilder = super[TraversableOnce].addString(b, sep)
        def addString(b: StringBuilder): StringBuilder = super[TraversableOnce].addString(b)
        def seq: Iterator[TreeIterator.this.R] = super[Iterator].seq
        def isEmpty: Boolean = super[Iterator].isEmpty
        def isTraversableAgain: Boolean = super[Iterator].isTraversableAgain
        def hasDefiniteSize: Boolean = super[Iterator].hasDefiniteSize
        def take(n: Int): Iterator[TreeIterator.this.R] = super[Iterator].take(n)
        def drop(n: Int): Iterator[TreeIterator.this.R] = super[Iterator].drop(n)
        def slice(from: Int, until: Int): Iterator[TreeIterator.this.R] = super[Iterator].slice(from, until)
        protected def sliceIterator(from: Int, until: Int): Iterator[TreeIterator.this.R] = 
          super[Iterator].sliceIterator(from, until)
        def map[B](f: TreeIterator.this.R => B): Iterator[B] = super[Iterator].map[B](f)
        def ++[B >: TreeIterator.this.R](that: => scala.collection.GenTraversableOnce[B]): Iterator[B] = 
          super[Iterator].++[B](that)
        def flatMap[B](f: TreeIterator.this.R => scala.collection.GenTraversableOnce[B]): Iterator[B] = 
          super[Iterator].flatMap[B](f)
        def filter(p: TreeIterator.this.R => Boolean): Iterator[TreeIterator.this.R] = super[Iterator].filter(p)
        def corresponds[B](that: scala.collection.GenTraversableOnce[B])(p: (TreeIterator.this.R, B) => Boolean): 
          Boolean
         = super[Iterator].corresponds[B](that)(p)
        def withFilter(p: TreeIterator.this.R => Boolean): Iterator[TreeIterator.this.R] = super[Iterator].withFilter(p)
        def filterNot(p: TreeIterator.this.R => Boolean): Iterator[TreeIterator.this.R] = super[Iterator].filterNot(p)
        @scala.annotation.migration("`collect` has changed. The previous behavior can be reproduced with `toSeq`.", 
          "2.8.0"
        ) def collect[B](pf: PartialFunction[TreeIterator.this.R, B]): Iterator[B] = super[Iterator].collect[B](pf)
        def scanLeft[B](z: B)(op: (B, TreeIterator.this.R) => B): Iterator[B] = super[Iterator].scanLeft[B](z)(op)
        def scanRight[B](z: B)(op: (TreeIterator.this.R, B) => B): Iterator[B] = super[Iterator].scanRight[B](z)(op)
        def takeWhile(p: TreeIterator.this.R => Boolean): Iterator[TreeIterator.this.R] = super[Iterator].takeWhile(p)
        def partition(p: TreeIterator.this.R => Boolean): (Iterator[TreeIterator.this.R], Iterator[TreeIterator.this.R])
           = 
        super[Iterator].partition(p)
        def span(p: TreeIterator.this.R => Boolean): (Iterator[TreeIterator.this.R], Iterator[TreeIterator.this.R]) = 
          super[Iterator].span(p)
        def dropWhile(p: TreeIterator.this.R => Boolean): Iterator[TreeIterator.this.R] = super[Iterator].dropWhile(p)
        def zip[B](that: Iterator[B]): Iterator[(TreeIterator.this.R, B)] = super[Iterator].zip[B](that)
        def padTo[A1 >: TreeIterator.this.R](len: Int, elem: A1): Iterator[A1] = super[Iterator].padTo[A1](len, elem)
        def zipWithIndex: Iterator[(TreeIterator.this.R, Int)] = super[Iterator].zipWithIndex
        def zipAll[B, A1 >: TreeIterator.this.R, B1 >: B](that: Iterator[B], thisElem: A1, thatElem: B1): 
          Iterator[(A1, B1)]
         = super[Iterator].zipAll[B, A1, B1](that, thisElem, thatElem)
        def foreach[U](f: TreeIterator.this.R => U): Unit = super[Iterator].foreach[U](f)
        def forall(p: TreeIterator.this.R => Boolean): Boolean = super[Iterator].forall(p)
        def exists(p: TreeIterator.this.R => Boolean): Boolean = super[Iterator].exists(p)
        def contains(elem: Any): Boolean = super[Iterator].contains(elem)
        def find(p: TreeIterator.this.R => Boolean): Option[TreeIterator.this.R] = super[Iterator].find(p)
        def indexWhere(p: TreeIterator.this.R => Boolean): Int = super[Iterator].indexWhere(p)
        def indexWhere(p: TreeIterator.this.R => Boolean, from: Int): Int = super[Iterator].indexWhere(p, from)
        def indexOf[B >: TreeIterator.this.R](elem: B): Int = super[Iterator].indexOf[B](elem)
        def indexOf[B >: TreeIterator.this.R](elem: B, from: Int): Int = super[Iterator].indexOf[B](elem, from)
        def buffered: BufferedIterator[TreeIterator.this.R] = super[Iterator].buffered
        def grouped[B >: TreeIterator.this.R](size: Int): TreeIterator.this.GroupedIterator[B] = 
          super[Iterator].grouped[B](size)
        def sliding[B >: TreeIterator.this.R](size: Int, step: Int): TreeIterator.this.GroupedIterator[B] = 
          super[Iterator].sliding[B](size, step)
        def length: Int = super[Iterator].length
        def duplicate: (Iterator[TreeIterator.this.R], Iterator[TreeIterator.this.R]) = super[Iterator].duplicate
        def patch[B >: TreeIterator.this.R](from: Int, patchElems: Iterator[B], replaced: Int): Iterator[B] = 
          super[Iterator].patch[B](from, patchElems, replaced)
        def copyToArray[B >: TreeIterator.this.R](xs: Array[B], start: Int, len: Int): Unit = 
          super[Iterator].copyToArray[B](xs, start, len)
        def sameElements(that: Iterator[_]): Boolean = super[Iterator].sameElements(that)
        def toTraversable: Traversable[TreeIterator.this.R] = super[Iterator].toTraversable
        def toIterator: Iterator[TreeIterator.this.R] = super[Iterator].toIterator
        def toStream: Stream[TreeIterator.this.R] = super[Iterator].toStream
        override def toString(): String = super[Iterator].toString()
        def sliding$default$2[B >: TreeIterator.this.R]: Int @uncheckedVariance = super[Iterator].sliding$default$2[B]
        private type A
        private type B
        private type R
        private val root: scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]
        private val start: Option[TreeIterator.this.A]
        private implicit val ordering: Ordering[TreeIterator.this.A]
        protected def nextResult(
          tree: scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]
        ): TreeIterator.this.R
        override def hasNext: Boolean = this.lookahead.ne(null)
        override def next(): TreeIterator.this.R = 
          {
            case val x51: 
              scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B](TreeIterator.this.
                lookahead
              )
             = this.lookahead
            if null.==(x51) then throw new NoSuchElementException("next on empty iterator") else 
              {
                this.lookahead = this.findLeftMostOrPopOnEmpty(this.goRight(x51))
                this.nextResult(x51)
              }
          }
        private def findLeftMostOrPopOnEmpty(
          tree: scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]
        ): scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B] = 
          {
            def tailLabel80[A, B, R]($this: scala.collection.immutable.RedBlackTree.TreeIterator[A, B, R])(
              tree: scala.collection.immutable.RedBlackTree.Tree[A, B]
            ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
              if tree.eq(null) then $this.popNext() else 
                if tree.left.eq(null) then tree else tailLabel80[A, B, R]($this)($this.goLeft(tree))
            tailLabel80[TreeIterator.this.A, TreeIterator.this.B, TreeIterator.this.R](this)(tree)
          }
        private def pushNext(
          tree: scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]
        ): Unit = 
          {
            def tailLabel81[A, B, R]($this: scala.collection.immutable.RedBlackTree.TreeIterator[A, B, R])(
              tree: scala.collection.immutable.RedBlackTree.Tree[A, B]
            ): Unit = 
              try 
                {
                  $this.stackOfNexts.update($this.index, tree)
                  $this.index = 1.+($this.index)
                }
               catch 
                {
                  case _: ArrayIndexOutOfBoundsException => 
                    assert($this.index.>=($this.stackOfNexts.length))
                    $this.stackOfNexts = 
                      refArrayOps[scala.collection.immutable.RedBlackTree.Tree[A, B]]($this.stackOfNexts).:+[
                        scala.collection.immutable.RedBlackTree.Tree[A, B]
                      ](null)(
                        scala.reflect.ClassTag.apply[scala.collection.immutable.RedBlackTree.Tree[A, B]](
                          classOf[class Tree]
                        )
                      )
                    tailLabel81[A, B, R]($this)(tree)
                }
            tailLabel81[TreeIterator.this.A, TreeIterator.this.B, TreeIterator.this.R](this)(tree)
          }
        private def popNext(): scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B] = 
          if this.index.==(0) then null else 
            {
              this.index = this.index.-(1)
              this.stackOfNexts.apply(this.index)
            }
        private var stackOfNexts: 
          Array[scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]]
         = 
          if TreeIterator.this.root.eq(null) then null else 
            {
              val maximumHeight: Int = 
                2.*(32.-(Integer.numberOfLeadingZeros(TreeIterator.this.root.count.+(2).-(1)))).-(2).-(1)
              dotty.runtime.Arrays.newArray[
                Array[scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]]
              ](classOf[class Tree], classOf[class Array], [maximumHeight : Int])
            }
        private var index: Int = 0
        private var lookahead: scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B] = 
          TreeIterator.this.start.map[
            scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]
          ](
            {
              def $anonfun(key: TreeIterator.this.A): 
                scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]
               = this.startFrom(key)
              closure($anonfun)
            }
          ).getOrElse[scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]](
            <special-ops>.<cbn-arg>[
              scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]
            ](
              {
                def $anonfun(): scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]
                   = 
                this.findLeftMostOrPopOnEmpty(TreeIterator.this.root)
                closure($anonfun)
              }
            )
          )
        private def startFrom(key: TreeIterator.this.A): 
          scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]
         = 
          if TreeIterator.this.root.eq(null) then null else 
            {
              @annotation.tailrec() def find(
                tree: scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]
              ): scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B] = 
                {
                  def tailLabel84(
                    tree: scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]
                  ): scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B] = 
                    if tree.eq(null) then this.popNext() else 
                      tailLabel84(
                        if TreeIterator.this.ordering.lteq(key, tree.key) then this.goLeft(tree) else this.goRight(tree)
                      )
                  tailLabel84(tree)
                }
              find(TreeIterator.this.root)
            }
        private def goLeft(tree: scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B])
          : 
        scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B] = 
          {
            this.pushNext(tree)
            tree.left
          }
        private def goRight(tree: scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]
          )
        : scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B] = tree.right
      }
      private class EntriesIterator[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], focus: Option[A])(
        implicit evidence$16: Ordering[A]
      ) extends scala.collection.immutable.RedBlackTree.TreeIterator[EntriesIterator.this.A, EntriesIterator.this.B, 
        (EntriesIterator.this.A, EntriesIterator.this.B)
      ](tree, focus)(evidence$16) { 
        private type A
        private type B
        private val tree: scala.collection.immutable.RedBlackTree.Tree[EntriesIterator.this.A, EntriesIterator.this.B]
        private val focus: Option[EntriesIterator.this.A]
        private implicit val evidence$16: Ordering[EntriesIterator.this.A]
        override def nextResult(
          tree: scala.collection.immutable.RedBlackTree.Tree[EntriesIterator.this.A, EntriesIterator.this.B]
        ): (EntriesIterator.this.A, EntriesIterator.this.B) = 
          new Tuple2[EntriesIterator.this.A, EntriesIterator.this.B](tree.key, tree.value)
      }
      private class KeysIterator[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], focus: Option[A])(
        implicit evidence$17: Ordering[A]
      ) extends scala.collection.immutable.RedBlackTree.TreeIterator[KeysIterator.this.A, KeysIterator.this.B, 
        KeysIterator.this.A
      ](tree, focus)(evidence$17) { 
        private type A
        private type B
        private val tree: scala.collection.immutable.RedBlackTree.Tree[KeysIterator.this.A, KeysIterator.this.B]
        private val focus: Option[KeysIterator.this.A]
        private implicit val evidence$17: Ordering[KeysIterator.this.A]
        override def nextResult(
          tree: scala.collection.immutable.RedBlackTree.Tree[KeysIterator.this.A, KeysIterator.this.B]
        ): KeysIterator.this.A = tree.key
      }
      private class ValuesIterator[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], focus: Option[A])(
        implicit evidence$18: Ordering[A]
      ) extends scala.collection.immutable.RedBlackTree.TreeIterator[ValuesIterator.this.A, ValuesIterator.this.B, 
        ValuesIterator.this.B
      ](tree, focus)(evidence$18) { 
        private type A
        private type B
        private val tree: scala.collection.immutable.RedBlackTree.Tree[ValuesIterator.this.A, ValuesIterator.this.B]
        private val focus: Option[ValuesIterator.this.A]
        private implicit val evidence$18: Ordering[ValuesIterator.this.A]
        override def nextResult(
          tree: scala.collection.immutable.RedBlackTree.Tree[ValuesIterator.this.A, ValuesIterator.this.B]
        ): ValuesIterator.this.B = tree.value
      }
    }
    final lazy module val Test: scala.collection.immutable.Test = new scala.collection.immutable.Test()
    @scala.annotation.internal.SourceFile(
      "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/rbtree.scala"
    ) final module class Test() extends Object() { 
      def main(args: Array[String]): Unit = ()
    }
  }
} of class class dotty.tools.dotc.ast.Trees$PackageDef # 732666
[====================>                  ] completed (511/940, 54s)[====================>                  ] completed (511/940, 54s)[====================>                  ] completed (512/940, 55s)exception while typing package scala {
  package collection {
    package scala.collection.immutable {
      final lazy module val RedBlackTree: scala.collection.immutable.RedBlackTree = 
        new scala.collection.immutable.RedBlackTree()
      @scala.annotation.internal.SourceFile(
        "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/rbtree.scala"
      ) final module class RedBlackTree() extends Object() { 
        def isEmpty(tree: scala.collection.immutable.RedBlackTree.Tree[_, _]): Boolean = tree.eq(null)
        def contains[A](tree: scala.collection.immutable.RedBlackTree.Tree[A, _], x: A)(implicit evidence$1: Ordering[A]
          )
        : Boolean = scala.collection.immutable.RedBlackTree.lookup[A, Any](tree, x)(evidence$1).ne(null)
        def get[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], x: A)(implicit evidence$2: Ordering[A])
          : 
        Option[B] = 
          {
            case val x1: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
              scala.collection.immutable.RedBlackTree.lookup[A, B](tree, x)(evidence$2)
            if null.==(x1) then None else new Some[B](x1.value)
          }
        @annotation.tailrec() def lookup[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], x: A)(
          implicit ordering: Ordering[A]
        ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
          {
            def tailLabel4[A, B]($this: scala.collection.immutable.RedBlackTree.type)(
              tree: scala.collection.immutable.RedBlackTree.Tree[A, B]
            , x: A)(implicit ordering: Ordering[A]): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
              if tree.eq(null) then null else 
                {
                  val cmp: Int = ordering.compare(x, tree.key)
                  if cmp.<(0) then tailLabel4[A, B]($this)(tree.left, x)(ordering) else 
                    if cmp.>(0) then tailLabel4[A, B]($this)(tree.right, x)(ordering) else tree
                }
            tailLabel4[A, B](this)(tree, x)(ordering)
          }
        def count(tree: scala.collection.immutable.RedBlackTree.Tree[_, _]): Int = 
          if tree.eq(null) then 0 else tree.count
        def countInRange[A](tree: scala.collection.immutable.RedBlackTree.Tree[A, _], from: Option[A], to: Option[A])(
          implicit ordering: Ordering[A]
        ): Int = 
          {
            def tailLabel6[A]($this: scala.collection.immutable.RedBlackTree.type)(
              tree: scala.collection.immutable.RedBlackTree.Tree[A, _]
            , from: Option[A], to: Option[A])(implicit ordering: Ordering[A]): Int = 
              if tree.eq(null) then 0 else 
                {
                  def case4(): Int = 
                    1.+(scala.collection.immutable.RedBlackTree.countInRange[A](tree.left, from, None)(ordering)).+(
                      scala.collection.immutable.RedBlackTree.countInRange[A](tree.right, None, to)(ordering)
                    )
                  def case5(case x16: Option[A]): Int = 
                    if x16.$isInstanceOf$[Some[A]] then 
                      {
                        case val x5: Some[A] = x16.asInstanceOf[Some[A]]
                        if ordering.gteq(tree.key, x5.value) then tailLabel6[A]($this)(tree.left, from, to)(ordering)
                           else 
                        case4()
                      }
                     else case4()
                  if None.==(from).&&(None.==(to)) then tree.count else 
                    {
                      case x13: Option[A] = from
                      case x14: Option[A] = to
                      if x13.$isInstanceOf$[Some[A]] then 
                        {
                          case val x9: Some[A] = x13.asInstanceOf[Some[A]]
                          if ordering.lt(tree.key, x9.value) then tailLabel6[A]($this)(tree.right, from, to)(ordering)
                             else 
                          case5(x14)
                        }
                       else case5(x14)
                    }
                }
            tailLabel6[A](this)(tree, from, to)(ordering)
          }
        def update[A, B, B1 >: B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], k: A, v: B1, 
          overwrite: Boolean
        )(implicit evidence$3: Ordering[A]): scala.collection.immutable.RedBlackTree.Tree[A, B1] = 
          scala.collection.immutable.RedBlackTree.blacken[A, B1](
            scala.collection.immutable.RedBlackTree.upd[A, B, B1](tree, k, v, overwrite)(evidence$3)
          )
        def delete[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], k: A)(
          implicit evidence$4: Ordering[A]
        ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
          scala.collection.immutable.RedBlackTree.blacken[A, B](
            scala.collection.immutable.RedBlackTree.del[A, B](tree, k)(evidence$4)
          )
        def rangeImpl[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], from: Option[A], until: Option[A])
          (
        implicit evidence$5: Ordering[A]): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
          {
            case val x19: (Option[A], Option[A]) = new Tuple2[Option[A], Option[A]](from, until)
            def case9(case x42: Option[A], case x43: Option[A]): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
              if None.==(x42).&&(x43.$isInstanceOf$[Some[A]]) then 
                {
                  case val x24: Some[A] = x43.asInstanceOf[Some[A]]
                  this.until[A, B](tree, x24.value)(evidence$5)
                }
               else 
                {
                  case x44: Option[A] = x42
                  case x45: Option[A] = x43
                  if None.==(x44).&&(None.==(x45)) then tree else throw new MatchError(x19)
                }
            def case10(case x38: Option[A], case x39: Option[A]): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
              if x38.$isInstanceOf$[Some[A]] then 
                {
                  case val x28: Some[A] = x38.asInstanceOf[Some[A]]
                  if None.==(x39) then this.from[A, B](tree, x28.value)(evidence$5) else case9(x38, x39)
                }
               else case9(x38, x39)
            if from.$isInstanceOf$[Some[A]] then 
              {
                case val x34: Some[A] = from.asInstanceOf[Some[A]]
                if until.$isInstanceOf$[Some[A]] then 
                  {
                    case val x32: Some[A] = until.asInstanceOf[Some[A]]
                    this.range[A, B](tree, x34.value, x32.value)(evidence$5)
                  }
                 else case10(from, until)
              }
             else case10(from, until)
          }
        def range[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], from: A, until: A)(
          implicit evidence$6: Ordering[A]
        ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
          scala.collection.immutable.RedBlackTree.blacken[A, B](
            scala.collection.immutable.RedBlackTree.doRange[A, B](tree, from, until)(evidence$6)
          )
        def from[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], from: A)(
          implicit evidence$7: Ordering[A]
        ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
          scala.collection.immutable.RedBlackTree.blacken[A, B](
            scala.collection.immutable.RedBlackTree.doFrom[A, B](tree, from)(evidence$7)
          )
        def to[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], to: A)(implicit evidence$8: Ordering[A])
          : 
        scala.collection.immutable.RedBlackTree.Tree[A, B] = 
          scala.collection.immutable.RedBlackTree.blacken[A, B](
            scala.collection.immutable.RedBlackTree.doTo[A, B](tree, to)(evidence$8)
          )
        def until[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], key: A)(
          implicit evidence$9: Ordering[A]
        ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
          scala.collection.immutable.RedBlackTree.blacken[A, B](
            scala.collection.immutable.RedBlackTree.doUntil[A, B](tree, key)(evidence$9)
          )
        def drop[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], n: Int)(
          implicit evidence$10: Ordering[A]
        ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
          scala.collection.immutable.RedBlackTree.blacken[A, B](
            scala.collection.immutable.RedBlackTree.doDrop[A, B](tree, n)
          )
        def take[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], n: Int)(
          implicit evidence$11: Ordering[A]
        ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
          scala.collection.immutable.RedBlackTree.blacken[A, B](
            scala.collection.immutable.RedBlackTree.doTake[A, B](tree, n)
          )
        def slice[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], from: Int, until: Int)(
          implicit evidence$12: Ordering[A]
        ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
          scala.collection.immutable.RedBlackTree.blacken[A, B](
            scala.collection.immutable.RedBlackTree.doSlice[A, B](tree, from, until)
          )
        def smallest[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B]): 
          scala.collection.immutable.RedBlackTree.Tree[A, B]
         = 
          {
            if tree.eq(null) then throw new NoSuchElementException("empty map") else ()
            var result: scala.collection.immutable.RedBlackTree.Tree[A, B] = tree
            {
              def while$(): Unit = 
                if result.left.ne(null) then 
                  {
                    result = result.left
                    while$()
                  }
                 else ()
              while$()
            }
            result: scala.collection.immutable.RedBlackTree.Tree[A, B]
          }
        def greatest[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B]): 
          scala.collection.immutable.RedBlackTree.Tree[A, B]
         = 
          {
            if tree.eq(null) then throw new NoSuchElementException("empty map") else ()
            var result: scala.collection.immutable.RedBlackTree.Tree[A, B] = tree
            {
              def while$(): Unit = 
                if result.right.ne(null) then 
                  {
                    result = result.right
                    while$()
                  }
                 else ()
              while$()
            }
            result: scala.collection.immutable.RedBlackTree.Tree[A, B]
          }
        def foreach[A, B, U](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], f: ((A, B)) => U): Unit = 
          if tree.ne(null) then scala.collection.immutable.RedBlackTree._foreach[A, B, U](tree, f) else ()
        private def _foreach[A, B, U](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], f: ((A, B)) => U): Unit
           = 
        {
          def tailLabel20[A, B, U]($this: scala.collection.immutable.RedBlackTree.type)(
            tree: scala.collection.immutable.RedBlackTree.Tree[A, B]
          , f: ((A, B)) => U): Unit = 
            {
              if tree.left.ne(null) then scala.collection.immutable.RedBlackTree._foreach[A, B, U](tree.left, f) else ()
              f.apply(new Tuple2[A, B](tree.key, tree.value))
              if tree.right.ne(null) then tailLabel20[A, B, U]($this)(tree.right, f) else ()
            }
          tailLabel20[A, B, U](this)(tree, f)
        }
        def foreachKey[A, U](tree: scala.collection.immutable.RedBlackTree.Tree[A, _], f: A => U): Unit = 
          if tree.ne(null) then scala.collection.immutable.RedBlackTree._foreachKey[A, U](tree, f) else ()
        private def _foreachKey[A, U](tree: scala.collection.immutable.RedBlackTree.Tree[A, _], f: A => U): Unit = 
          {
            def tailLabel22[A, U]($this: scala.collection.immutable.RedBlackTree.type)(
              tree: scala.collection.immutable.RedBlackTree.Tree[A, _]
            , f: A => U): Unit = 
              {
                if tree.left.ne(null) then scala.collection.immutable.RedBlackTree._foreachKey[A, U](tree.left, f) else 
                  ()
                f.apply(tree.key)
                if tree.right.ne(null) then tailLabel22[A, U]($this)(tree.right, f) else ()
              }
            tailLabel22[A, U](this)(tree, f)
          }
        def iterator[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], start: Option[A])(
          implicit evidence$13: Ordering[A]
        ): Iterator[(A, B)] = 
          new scala.collection.immutable.RedBlackTree.EntriesIterator[A, B](tree, start)(evidence$13)
        def iterator$default$2[A, B]: None.type = None
        def keysIterator[A](tree: scala.collection.immutable.RedBlackTree.Tree[A, _], start: Option[A])(
          implicit evidence$14: Ordering[A]
        ): Iterator[A] = new scala.collection.immutable.RedBlackTree.KeysIterator[A, Any](tree, start)(evidence$14)
        def keysIterator$default$2[A]: None.type = None
        def valuesIterator[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], start: Option[A])(
          implicit evidence$15: Ordering[A]
        ): Iterator[B] = new scala.collection.immutable.RedBlackTree.ValuesIterator[A, B](tree, start)(evidence$15)
        def valuesIterator$default$2[A, B]: None.type = None
        @annotation.tailrec() def nth[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], n: Int): 
          scala.collection.immutable.RedBlackTree.Tree[A, B]
         = 
          {
            def tailLabel29[A, B]($this: scala.collection.immutable.RedBlackTree.type)(
              tree: scala.collection.immutable.RedBlackTree.Tree[A, B]
            , n: Int): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
              {
                val count: Int = $this.count(tree.left)
                if n.<(count) then tailLabel29[A, B]($this)(tree.left, n) else 
                  if n.>(count) then tailLabel29[A, B]($this)(tree.right, n.-(count).-(1)) else tree
              }
            tailLabel29[A, B](this)(tree, n)
          }
        def isBlack(tree: scala.collection.immutable.RedBlackTree.Tree[_, _]): Boolean = 
          tree.eq(null).||(scala.collection.immutable.RedBlackTree.isBlackTree(tree))
        private def isRedTree(tree: scala.collection.immutable.RedBlackTree.Tree[_, _]): Boolean = 
          tree.isInstanceOf[scala.collection.immutable.RedBlackTree.RedTree[_, _]]
        private def isBlackTree(tree: scala.collection.immutable.RedBlackTree.Tree[_, _]): Boolean = 
          tree.isInstanceOf[scala.collection.immutable.RedBlackTree.BlackTree[_, _]]
        private def blacken[A, B](t: scala.collection.immutable.RedBlackTree.Tree[A, B]): 
          scala.collection.immutable.RedBlackTree.Tree[A, B]
         = if t.eq(null) then null else t.black
        private def mkTree[A, B](isBlack: Boolean, k: A, v: B, l: scala.collection.immutable.RedBlackTree.Tree[A, B], 
          r: scala.collection.immutable.RedBlackTree.Tree[A, B]
        ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
          if isBlack then 
            /* inlined from scala.collection.immutable.RedBlackTree*/ 
              {
                new scala.collection.immutable.RedBlackTree.BlackTree[A, B](k, v, l, r)
              }
           else 
            /* inlined from scala.collection.immutable.RedBlackTree*/ 
              {
                new scala.collection.immutable.RedBlackTree.RedTree[A, B](k, v, l, r)
              }
        private def balanceLeft[A, B, B1 >: B](isBlack: Boolean, z: A, zv: B, 
          l: scala.collection.immutable.RedBlackTree.Tree[A, B1]
        , d: scala.collection.immutable.RedBlackTree.Tree[A, B1]): scala.collection.immutable.RedBlackTree.Tree[A, B1]
           = 
        if 
          scala.collection.immutable.RedBlackTree.isRedTree(l).&&(
            scala.collection.immutable.RedBlackTree.isRedTree(l.left)
          )
         then 
          /* inlined from scala.collection.immutable.RedBlackTree*/ 
            {
              val left: scala.collection.immutable.RedBlackTree.BlackTree[A, B1] = 
                /* inlined from scala.collection.immutable.RedBlackTree*/ 
                  {
                    new scala.collection.immutable.RedBlackTree.BlackTree[A, B1](l.left.key, l.left.value, l.left.left, 
                      l.left.right
                    )
                  }
              val right: scala.collection.immutable.RedBlackTree.BlackTree[A, B1] = 
                /* inlined from scala.collection.immutable.RedBlackTree*/ 
                  {
                    new scala.collection.immutable.RedBlackTree.BlackTree[A, B1](z, zv, l.right, d)
                  }
              new scala.collection.immutable.RedBlackTree.RedTree[A, B1](l.key, l.value, left, right)
            }
         else 
          if 
            scala.collection.immutable.RedBlackTree.isRedTree(l).&&(
              scala.collection.immutable.RedBlackTree.isRedTree(l.right)
            )
           then 
            /* inlined from scala.collection.immutable.RedBlackTree*/ 
              {
                val left: scala.collection.immutable.RedBlackTree.BlackTree[A, B1] = 
                  /* inlined from scala.collection.immutable.RedBlackTree*/ 
                    {
                      new scala.collection.immutable.RedBlackTree.BlackTree[A, B1](l.key, l.value, l.left, l.right.left)
                    }
                val right: scala.collection.immutable.RedBlackTree.BlackTree[A, B1] = 
                  /* inlined from scala.collection.immutable.RedBlackTree*/ 
                    {
                      new scala.collection.immutable.RedBlackTree.BlackTree[A, B1](z, zv, l.right.right, d)
                    }
                new scala.collection.immutable.RedBlackTree.RedTree[A, B1](l.right.key, l.right.value, left, right)
              }
           else scala.collection.immutable.RedBlackTree.mkTree[A, B1](isBlack, z, zv, l, d)
        private def balanceRight[A, B, B1 >: B](isBlack: Boolean, x: A, xv: B, 
          a: scala.collection.immutable.RedBlackTree.Tree[A, B1]
        , r: scala.collection.immutable.RedBlackTree.Tree[A, B1]): scala.collection.immutable.RedBlackTree.Tree[A, B1]
           = 
        if 
          scala.collection.immutable.RedBlackTree.isRedTree(r).&&(
            scala.collection.immutable.RedBlackTree.isRedTree(r.left)
          )
         then 
          /* inlined from scala.collection.immutable.RedBlackTree*/ 
            {
              val left: scala.collection.immutable.RedBlackTree.BlackTree[A, B1] = 
                /* inlined from scala.collection.immutable.RedBlackTree*/ 
                  {
                    new scala.collection.immutable.RedBlackTree.BlackTree[A, B1](x, xv, a, r.left.left)
                  }
              val right: scala.collection.immutable.RedBlackTree.BlackTree[A, B1] = 
                /* inlined from scala.collection.immutable.RedBlackTree*/ 
                  {
                    new scala.collection.immutable.RedBlackTree.BlackTree[A, B1](r.key, r.value, r.left.right, r.right)
                  }
              new scala.collection.immutable.RedBlackTree.RedTree[A, B1](r.left.key, r.left.value, left, right)
            }
         else 
          if 
            scala.collection.immutable.RedBlackTree.isRedTree(r).&&(
              scala.collection.immutable.RedBlackTree.isRedTree(r.right)
            )
           then 
            /* inlined from scala.collection.immutable.RedBlackTree*/ 
              {
                val left: scala.collection.immutable.RedBlackTree.BlackTree[A, B1] = 
                  /* inlined from scala.collection.immutable.RedBlackTree*/ 
                    {
                      new scala.collection.immutable.RedBlackTree.BlackTree[A, B1](x, xv, a, r.left)
                    }
                val right: scala.collection.immutable.RedBlackTree.BlackTree[A, B1] = 
                  /* inlined from scala.collection.immutable.RedBlackTree*/ 
                    {
                      new scala.collection.immutable.RedBlackTree.BlackTree[A, B1](r.right.key, r.right.value, 
                        r.right.left
                      , r.right.right)
                    }
                new scala.collection.immutable.RedBlackTree.RedTree[A, B1](r.key, r.value, left, right)
              }
           else scala.collection.immutable.RedBlackTree.mkTree[A, B1](isBlack, x, xv, a, r)
        private def upd[A, B, B1 >: B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], k: A, v: B1, 
          overwrite: Boolean
        )(implicit ordering: Ordering[A]): scala.collection.immutable.RedBlackTree.Tree[A, B1] = 
          if tree.eq(null) then 
            /* inlined from scala.collection.immutable.RedBlackTree*/ 
              {
                new scala.collection.immutable.RedBlackTree.RedTree[A, B1](k, v, null: Null, null: Null)
              }
           else 
            {
              val cmp: Int = ordering.compare(k, tree.key)
              if cmp.<(0) then 
                scala.collection.immutable.RedBlackTree.balanceLeft[A, B, B1](
                  scala.collection.immutable.RedBlackTree.isBlackTree(tree)
                , tree.key, tree.value, 
                  scala.collection.immutable.RedBlackTree.upd[A, B, B1](tree.left, k, v, overwrite)(ordering)
                , tree.right)
               else 
                if cmp.>(0) then 
                  scala.collection.immutable.RedBlackTree.balanceRight[A, B, B1](
                    scala.collection.immutable.RedBlackTree.isBlackTree(tree)
                  , tree.key, tree.value, tree.left, 
                    scala.collection.immutable.RedBlackTree.upd[A, B, B1](tree.right, k, v, overwrite)(ordering)
                  )
                 else 
                  if overwrite.||(k.==(tree.key).unary_!) then 
                    scala.collection.immutable.RedBlackTree.mkTree[A, B1](
                      scala.collection.immutable.RedBlackTree.isBlackTree(tree)
                    , k, v, tree.left, tree.right)
                   else tree
            }
        private def updNth[A, B, B1 >: B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], idx: Int, k: A, 
          v: B1
        , overwrite: Boolean): scala.collection.immutable.RedBlackTree.Tree[A, B1] = 
          if tree.eq(null) then 
            /* inlined from scala.collection.immutable.RedBlackTree*/ 
              {
                new scala.collection.immutable.RedBlackTree.RedTree[A, B1](k, v, null: Null, null: Null)
              }
           else 
            {
              val rank: Int = 1.+(scala.collection.immutable.RedBlackTree.count(tree.left))
              if idx.<(rank) then 
                scala.collection.immutable.RedBlackTree.balanceLeft[A, B, B1](
                  scala.collection.immutable.RedBlackTree.isBlackTree(tree)
                , tree.key, tree.value, 
                  scala.collection.immutable.RedBlackTree.updNth[A, B, B1](tree.left, idx, k, v, overwrite)
                , tree.right)
               else 
                if idx.>(rank) then 
                  scala.collection.immutable.RedBlackTree.balanceRight[A, B, B1](
                    scala.collection.immutable.RedBlackTree.isBlackTree(tree)
                  , tree.key, tree.value, tree.left, 
                    scala.collection.immutable.RedBlackTree.updNth[A, B, B1](tree.right, idx.-(rank), k, v, overwrite)
                  )
                 else 
                  if overwrite then 
                    scala.collection.immutable.RedBlackTree.mkTree[A, B1](
                      scala.collection.immutable.RedBlackTree.isBlackTree(tree)
                    , k, v, tree.left, tree.right)
                   else tree
            }
        private def del[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], k: A)(
          implicit ordering: Ordering[A]
        ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
          if tree.eq(null) then null else 
            {
              def balance(x: A, xv: B, tl: scala.collection.immutable.RedBlackTree.Tree[A, B], 
                tr: scala.collection.immutable.RedBlackTree.Tree[A, B]
              ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
                if scala.collection.immutable.RedBlackTree.isRedTree(tl) then 
                  if scala.collection.immutable.RedBlackTree.isRedTree(tr) then 
                    /* inlined from scala.collection.immutable.RedBlackTree*/ 
                      {
                        val left: scala.collection.immutable.RedBlackTree.Tree[A, B] = tl.black
                        val right: scala.collection.immutable.RedBlackTree.Tree[A, B] = tr.black
                        new scala.collection.immutable.RedBlackTree.RedTree[A, B](x, xv, left, right)
                      }
                   else 
                    if scala.collection.immutable.RedBlackTree.isRedTree(tl.left) then 
                      /* inlined from scala.collection.immutable.RedBlackTree*/ 
                        {
                          val left: scala.collection.immutable.RedBlackTree.Tree[A, B] = tl.left.black
                          val right: scala.collection.immutable.RedBlackTree.BlackTree[A, B] = 
                            /* inlined from scala.collection.immutable.RedBlackTree*/ 
                              {
                                new scala.collection.immutable.RedBlackTree.BlackTree[A, B](x, xv, tl.right, tr)
                              }
                          new scala.collection.immutable.RedBlackTree.RedTree[A, B](tl.key, tl.value, left, right)
                        }
                     else 
                      if scala.collection.immutable.RedBlackTree.isRedTree(tl.right) then 
                        /* inlined from scala.collection.immutable.RedBlackTree*/ 
                          {
                            val left: scala.collection.immutable.RedBlackTree.BlackTree[A, B] = 
                              /* inlined from scala.collection.immutable.RedBlackTree*/ 
                                {
                                  new scala.collection.immutable.RedBlackTree.BlackTree[A, B](tl.key, tl.value, tl.left
                                    , 
                                  tl.right.left)
                                }
                            val right: scala.collection.immutable.RedBlackTree.BlackTree[A, B] = 
                              /* inlined from scala.collection.immutable.RedBlackTree*/ 
                                {
                                  new scala.collection.immutable.RedBlackTree.BlackTree[A, B](x, xv, tl.right.right, tr)
                                }
                            new scala.collection.immutable.RedBlackTree.RedTree[A, B](tl.right.key, tl.right.value, left
                              , 
                            right)
                          }
                       else 
                        /* inlined from scala.collection.immutable.RedBlackTree*/ 
                          {
                            new scala.collection.immutable.RedBlackTree.BlackTree[A, B](x, xv, tl, tr)
                          }
                 else 
                  if scala.collection.immutable.RedBlackTree.isRedTree(tr) then 
                    if scala.collection.immutable.RedBlackTree.isRedTree(tr.right) then 
                      /* inlined from scala.collection.immutable.RedBlackTree*/ 
                        {
                          val left: scala.collection.immutable.RedBlackTree.BlackTree[A, B] = 
                            /* inlined from scala.collection.immutable.RedBlackTree*/ 
                              {
                                new scala.collection.immutable.RedBlackTree.BlackTree[A, B](x, xv, tl, tr.left)
                              }
                          val right: scala.collection.immutable.RedBlackTree.Tree[A, B] = tr.right.black
                          new scala.collection.immutable.RedBlackTree.RedTree[A, B](tr.key, tr.value, left, right)
                        }
                     else 
                      if scala.collection.immutable.RedBlackTree.isRedTree(tr.left) then 
                        /* inlined from scala.collection.immutable.RedBlackTree*/ 
                          {
                            val left: scala.collection.immutable.RedBlackTree.BlackTree[A, B] = 
                              /* inlined from scala.collection.immutable.RedBlackTree*/ 
                                {
                                  new scala.collection.immutable.RedBlackTree.BlackTree[A, B](x, xv, tl, tr.left.left)
                                }
                            val right: scala.collection.immutable.RedBlackTree.BlackTree[A, B] = 
                              /* inlined from scala.collection.immutable.RedBlackTree*/ 
                                {
                                  new scala.collection.immutable.RedBlackTree.BlackTree[A, B](tr.key, tr.value, 
                                    tr.left.right
                                  , tr.right)
                                }
                            new scala.collection.immutable.RedBlackTree.RedTree[A, B](tr.left.key, tr.left.value, left, 
                              right
                            )
                          }
                       else 
                        /* inlined from scala.collection.immutable.RedBlackTree*/ 
                          {
                            new scala.collection.immutable.RedBlackTree.BlackTree[A, B](x, xv, tl, tr)
                          }
                   else 
                    /* inlined from scala.collection.immutable.RedBlackTree*/ 
                      {
                        new scala.collection.immutable.RedBlackTree.BlackTree[A, B](x, xv, tl, tr)
                      }
              def subl(t: scala.collection.immutable.RedBlackTree.Tree[A, B]): 
                scala.collection.immutable.RedBlackTree.Tree[A, B]
               = 
                if t.isInstanceOf[scala.collection.immutable.RedBlackTree.BlackTree[_, _]] then t.red else 
                  sys.package.error("Defect: invariance violation; expected black, got ".+(t))
              def balLeft(x: A, xv: B, tl: scala.collection.immutable.RedBlackTree.Tree[A, B], 
                tr: scala.collection.immutable.RedBlackTree.Tree[A, B]
              ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
                if scala.collection.immutable.RedBlackTree.isRedTree(tl) then 
                  /* inlined from scala.collection.immutable.RedBlackTree*/ 
                    {
                      val left: scala.collection.immutable.RedBlackTree.Tree[A, B] = tl.black
                      new scala.collection.immutable.RedBlackTree.RedTree[A, B](x, xv, left, tr)
                    }
                 else 
                  if scala.collection.immutable.RedBlackTree.isBlackTree(tr) then balance(x, xv, tl, tr.red) else 
                    if 
                      scala.collection.immutable.RedBlackTree.isRedTree(tr).&&(
                        scala.collection.immutable.RedBlackTree.isBlackTree(tr.left)
                      )
                     then 
                      /* inlined from scala.collection.immutable.RedBlackTree*/ 
                        {
                          val left: scala.collection.immutable.RedBlackTree.BlackTree[A, B] = 
                            /* inlined from scala.collection.immutable.RedBlackTree*/ 
                              {
                                new scala.collection.immutable.RedBlackTree.BlackTree[A, B](x, xv, tl, tr.left.left)
                              }
                          val right: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
                            balance(tr.key, tr.value, tr.left.right, subl(tr.right))
                          new scala.collection.immutable.RedBlackTree.RedTree[A, B](tr.left.key, tr.left.value, left, 
                            right
                          )
                        }
                     else sys.package.error("Defect: invariance violation")
              def balRight(x: A, xv: B, tl: scala.collection.immutable.RedBlackTree.Tree[A, B], 
                tr: scala.collection.immutable.RedBlackTree.Tree[A, B]
              ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
                if scala.collection.immutable.RedBlackTree.isRedTree(tr) then 
                  /* inlined from scala.collection.immutable.RedBlackTree*/ 
                    {
                      val right: scala.collection.immutable.RedBlackTree.Tree[A, B] = tr.black
                      new scala.collection.immutable.RedBlackTree.RedTree[A, B](x, xv, tl, right)
                    }
                 else 
                  if scala.collection.immutable.RedBlackTree.isBlackTree(tl) then balance(x, xv, tl.red, tr) else 
                    if 
                      scala.collection.immutable.RedBlackTree.isRedTree(tl).&&(
                        scala.collection.immutable.RedBlackTree.isBlackTree(tl.right)
                      )
                     then 
                      /* inlined from scala.collection.immutable.RedBlackTree*/ 
                        {
                          val left: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
                            balance(tl.key, tl.value, subl(tl.left), tl.right.left)
                          val right: scala.collection.immutable.RedBlackTree.BlackTree[A, B] = 
                            /* inlined from scala.collection.immutable.RedBlackTree*/ 
                              {
                                new scala.collection.immutable.RedBlackTree.BlackTree[A, B](x, xv, tl.right.right, tr)
                              }
                          new scala.collection.immutable.RedBlackTree.RedTree[A, B](tl.right.key, tl.right.value, left, 
                            right
                          )
                        }
                     else sys.package.error("Defect: invariance violation")
              def delLeft: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
                if scala.collection.immutable.RedBlackTree.isBlackTree(tree.left) then 
                  balLeft(tree.key, tree.value, 
                    scala.collection.immutable.RedBlackTree.del[A, B](tree.left, k)(ordering)
                  , tree.right)
                 else 
                  /* inlined from scala.collection.immutable.RedBlackTree*/ 
                    {
                      val left: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
                        scala.collection.immutable.RedBlackTree.del[A, B](tree.left, k)(ordering)
                      new scala.collection.immutable.RedBlackTree.RedTree[A, B](tree.key, tree.value, left, tree.right)
                    }
              def delRight: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
                if scala.collection.immutable.RedBlackTree.isBlackTree(tree.right) then 
                  balRight(tree.key, tree.value, tree.left, 
                    scala.collection.immutable.RedBlackTree.del[A, B](tree.right, k)(ordering)
                  )
                 else 
                  /* inlined from scala.collection.immutable.RedBlackTree*/ 
                    {
                      val right: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
                        scala.collection.immutable.RedBlackTree.del[A, B](tree.right, k)(ordering)
                      new scala.collection.immutable.RedBlackTree.RedTree[A, B](tree.key, tree.value, tree.left, right)
                    }
              def append(tl: scala.collection.immutable.RedBlackTree.Tree[A, B], 
                tr: scala.collection.immutable.RedBlackTree.Tree[A, B]
              ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
                if tl.eq(null) then tr else 
                  if tr.eq(null) then tl else 
                    if 
                      scala.collection.immutable.RedBlackTree.isRedTree(tl).&&(
                        scala.collection.immutable.RedBlackTree.isRedTree(tr)
                      )
                     then 
                      {
                        val bc: scala.collection.immutable.RedBlackTree.Tree[A, B] = append(tl.right, tr.left)
                        if scala.collection.immutable.RedBlackTree.isRedTree(bc) then 
                          /* inlined from scala.collection.immutable.RedBlackTree*/ 
                            {
                              val left: scala.collection.immutable.RedBlackTree.RedTree[A, B] = 
                                /* inlined from scala.collection.immutable.RedBlackTree*/ 
                                  {
                                    new scala.collection.immutable.RedBlackTree.RedTree[A, B](tl.key, tl.value, tl.left
                                      , 
                                    bc.left)
                                  }
                              val right: scala.collection.immutable.RedBlackTree.RedTree[A, B] = 
                                /* inlined from scala.collection.immutable.RedBlackTree*/ 
                                  {
                                    new scala.collection.immutable.RedBlackTree.RedTree[A, B](tr.key, tr.value, bc.right
                                      , 
                                    tr.right)
                                  }
                              new scala.collection.immutable.RedBlackTree.RedTree[A, B](bc.key, bc.value, left, right)
                            }
                         else 
                          /* inlined from scala.collection.immutable.RedBlackTree*/ 
                            {
                              val right: scala.collection.immutable.RedBlackTree.RedTree[A, B] = 
                                /* inlined from scala.collection.immutable.RedBlackTree*/ 
                                  {
                                    new scala.collection.immutable.RedBlackTree.RedTree[A, B](tr.key, tr.value, bc, 
                                      tr.right
                                    )
                                  }
                              new scala.collection.immutable.RedBlackTree.RedTree[A, B](tl.key, tl.value, tl.left, right
                                )
                            }
                      }
                     else 
                      if 
                        scala.collection.immutable.RedBlackTree.isBlackTree(tl).&&(
                          scala.collection.immutable.RedBlackTree.isBlackTree(tr)
                        )
                       then 
                        {
                          val bc: scala.collection.immutable.RedBlackTree.Tree[A, B] = append(tl.right, tr.left)
                          if scala.collection.immutable.RedBlackTree.isRedTree(bc) then 
                            /* inlined from scala.collection.immutable.RedBlackTree*/ 
                              {
                                val left: scala.collection.immutable.RedBlackTree.BlackTree[A, B] = 
                                  /* inlined from scala.collection.immutable.RedBlackTree*/ 
                                    {
                                      new scala.collection.immutable.RedBlackTree.BlackTree[A, B](tl.key, tl.value, 
                                        tl.left
                                      , bc.left)
                                    }
                                val right: scala.collection.immutable.RedBlackTree.BlackTree[A, B] = 
                                  /* inlined from scala.collection.immutable.RedBlackTree*/ 
                                    {
                                      new scala.collection.immutable.RedBlackTree.BlackTree[A, B](tr.key, tr.value, 
                                        bc.right
                                      , tr.right)
                                    }
                                new scala.collection.immutable.RedBlackTree.RedTree[A, B](bc.key, bc.value, left, right)
                              }
                           else 
                            balLeft(tl.key, tl.value, tl.left, 
                              /* inlined from scala.collection.immutable.RedBlackTree*/ 
                                {
                                  new scala.collection.immutable.RedBlackTree.BlackTree[A, B](tr.key, tr.value, bc, 
                                    tr.right
                                  )
                                }
                            )
                        }
                       else 
                        if scala.collection.immutable.RedBlackTree.isRedTree(tr) then 
                          /* inlined from scala.collection.immutable.RedBlackTree*/ 
                            {
                              val left: scala.collection.immutable.RedBlackTree.Tree[A, B] = append(tl, tr.left)
                              new scala.collection.immutable.RedBlackTree.RedTree[A, B](tr.key, tr.value, left, tr.right
                                )
                            }
                         else 
                          if scala.collection.immutable.RedBlackTree.isRedTree(tl) then 
                            /* inlined from scala.collection.immutable.RedBlackTree*/ 
                              {
                                val right: scala.collection.immutable.RedBlackTree.Tree[A, B] = append(tl.right, tr)
                                new scala.collection.immutable.RedBlackTree.RedTree[A, B](tl.key, tl.value, tl.left, 
                                  right
                                )
                              }
                           else sys.package.error("unmatched tree on append: ".+(tl).+(", ").+(tr))
              val cmp: Int = ordering.compare(k, tree.key)
              if cmp.<(0) then delLeft else if cmp.>(0) then delRight else append(tree.left, tree.right)
            }
        private def doFrom[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], from: A)(
          implicit ordering: Ordering[A]
        ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
          {
            if tree.eq(null) then return null else ()
            if ordering.lt(tree.key, from) then 
              return scala.collection.immutable.RedBlackTree.doFrom[A, B](tree.right, from)(ordering)
             else ()
            val newLeft: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
              scala.collection.immutable.RedBlackTree.doFrom[A, B](tree.left, from)(ordering)
            if newLeft.eq(tree.left) then tree else 
              if newLeft.eq(null) then 
                scala.collection.immutable.RedBlackTree.upd[A, B, B](tree.right, tree.key, tree.value, false)(ordering)
               else scala.collection.immutable.RedBlackTree.rebalance[A, B](tree, newLeft, tree.right)
          }
        private def doTo[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], to: A)(
          implicit ordering: Ordering[A]
        ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
          {
            if tree.eq(null) then return null else ()
            if ordering.lt(to, tree.key) then 
              return scala.collection.immutable.RedBlackTree.doTo[A, B](tree.left, to)(ordering)
             else ()
            val newRight: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
              scala.collection.immutable.RedBlackTree.doTo[A, B](tree.right, to)(ordering)
            if newRight.eq(tree.right) then tree else 
              if newRight.eq(null) then 
                scala.collection.immutable.RedBlackTree.upd[A, B, B](tree.left, tree.key, tree.value, false)(ordering)
               else scala.collection.immutable.RedBlackTree.rebalance[A, B](tree, tree.left, newRight)
          }
        private def doUntil[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], until: A)(
          implicit ordering: Ordering[A]
        ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
          {
            if tree.eq(null) then return null else ()
            if ordering.lteq(until, tree.key) then 
              return scala.collection.immutable.RedBlackTree.doUntil[A, B](tree.left, until)(ordering)
             else ()
            val newRight: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
              scala.collection.immutable.RedBlackTree.doUntil[A, B](tree.right, until)(ordering)
            if newRight.eq(tree.right) then tree else 
              if newRight.eq(null) then 
                scala.collection.immutable.RedBlackTree.upd[A, B, B](tree.left, tree.key, tree.value, false)(ordering)
               else scala.collection.immutable.RedBlackTree.rebalance[A, B](tree, tree.left, newRight)
          }
        private def doRange[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], from: A, until: A)(
          implicit ordering: Ordering[A]
        ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
          {
            if tree.eq(null) then return null else ()
            if ordering.lt(tree.key, from) then 
              return scala.collection.immutable.RedBlackTree.doRange[A, B](tree.right, from, until)(ordering)
             else ()
            if ordering.lteq(until, tree.key) then 
              return scala.collection.immutable.RedBlackTree.doRange[A, B](tree.left, from, until)(ordering)
             else ()
            val newLeft: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
              scala.collection.immutable.RedBlackTree.doFrom[A, B](tree.left, from)(ordering)
            val newRight: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
              scala.collection.immutable.RedBlackTree.doUntil[A, B](tree.right, until)(ordering)
            if newLeft.eq(tree.left).&&(newRight.eq(tree.right)) then tree else 
              if newLeft.eq(null) then 
                scala.collection.immutable.RedBlackTree.upd[A, B, B](newRight, tree.key, tree.value, false)(ordering)
               else 
                if newRight.eq(null) then 
                  scala.collection.immutable.RedBlackTree.upd[A, B, B](newLeft, tree.key, tree.value, false)(ordering)
                 else scala.collection.immutable.RedBlackTree.rebalance[A, B](tree, newLeft, newRight)
          }
        private def doDrop[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], n: Int): 
          scala.collection.immutable.RedBlackTree.Tree[A, B]
         = 
          {
            if n.<=(0) then return tree else ()
            if n.>=(this.count(tree)) then return null else ()
            val count: Int = this.count(tree.left)
            if n.>(count) then return scala.collection.immutable.RedBlackTree.doDrop[A, B](tree.right, n.-(count).-(1))
               else 
            ()
            val newLeft: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
              scala.collection.immutable.RedBlackTree.doDrop[A, B](tree.left, n)
            if newLeft.eq(tree.left) then tree else 
              if newLeft.eq(null) then 
                scala.collection.immutable.RedBlackTree.updNth[A, B, B](tree.right, n.-(count).-(1), tree.key, 
                  tree.value
                , false)
               else scala.collection.immutable.RedBlackTree.rebalance[A, B](tree, newLeft, tree.right)
          }
        private def doTake[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], n: Int): 
          scala.collection.immutable.RedBlackTree.Tree[A, B]
         = 
          {
            if n.<=(0) then return null else ()
            if n.>=(this.count(tree)) then return tree else ()
            val count: Int = this.count(tree.left)
            if n.<=(count) then return scala.collection.immutable.RedBlackTree.doTake[A, B](tree.left, n) else ()
            val newRight: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
              scala.collection.immutable.RedBlackTree.doTake[A, B](tree.right, n.-(count).-(1))
            if newRight.eq(tree.right) then tree else 
              if newRight.eq(null) then 
                scala.collection.immutable.RedBlackTree.updNth[A, B, B](tree.left, n, tree.key, tree.value, false)
               else scala.collection.immutable.RedBlackTree.rebalance[A, B](tree, tree.left, newRight)
          }
        private def doSlice[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], from: Int, until: Int): 
          scala.collection.immutable.RedBlackTree.Tree[A, B]
         = 
          {
            if tree.eq(null) then return null else ()
            val count: Int = this.count(tree.left)
            if from.>(count) then 
              return 
                scala.collection.immutable.RedBlackTree.doSlice[A, B](tree.right, from.-(count).-(1), 
                  until.-(count).-(1)
                )
             else ()
            if until.<=(count) then return scala.collection.immutable.RedBlackTree.doSlice[A, B](tree.left, from, until)
               else 
            ()
            val newLeft: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
              scala.collection.immutable.RedBlackTree.doDrop[A, B](tree.left, from)
            val newRight: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
              scala.collection.immutable.RedBlackTree.doTake[A, B](tree.right, until.-(count).-(1))
            if newLeft.eq(tree.left).&&(newRight.eq(tree.right)) then tree else 
              if newLeft.eq(null) then 
                scala.collection.immutable.RedBlackTree.updNth[A, B, B](newRight, from.-(count).-(1), tree.key, 
                  tree.value
                , false)
               else 
                if newRight.eq(null) then 
                  scala.collection.immutable.RedBlackTree.updNth[A, B, B](newLeft, until, tree.key, tree.value, false)
                 else scala.collection.immutable.RedBlackTree.rebalance[A, B](tree, newLeft, newRight)
          }
        private def compareDepth[A, B](left: scala.collection.immutable.RedBlackTree.Tree[A, B], 
          right: scala.collection.immutable.RedBlackTree.Tree[A, B]
        ): 
          (scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]], Boolean, 
            Boolean
          , Int)
         = 
          {
            def unzip(
              zipper: scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]]
            , leftMost: Boolean): 
              scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]]
             = 
              {
                def tailLabel54(
                  zipper: 
                    scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]]
                , leftMost: Boolean): 
                  scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]]
                 = 
                  {
                    val next: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
                      if leftMost then zipper.head.left else zipper.head.right
                    if next.eq(null) then zipper else 
                      tailLabel54(
                        scala.collection.immutable.RedBlackTree.NList.cons[
                          scala.collection.immutable.RedBlackTree.Tree[A, B]
                        ](next, zipper)
                      , leftMost)
                  }
                tailLabel54(zipper, leftMost)
              }
            def unzipBoth(left: scala.collection.immutable.RedBlackTree.Tree[A, B], 
              right: scala.collection.immutable.RedBlackTree.Tree[A, B]
            , 
              leftZipper: 
                scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]]
            , 
              rightZipper: 
                scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]]
            , smallerDepth: Int): 
              (scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]], 
                Boolean
              , Boolean, Int)
             = 
              {
                def tailLabel55(left: scala.collection.immutable.RedBlackTree.Tree[A, B], 
                  right: scala.collection.immutable.RedBlackTree.Tree[A, B]
                , 
                  leftZipper: 
                    scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]]
                , 
                  rightZipper: 
                    scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]]
                , smallerDepth: Int): 
                  (scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]], 
                    Boolean
                  , Boolean, Int)
                 = 
                  if 
                    scala.collection.immutable.RedBlackTree.isBlackTree(left).&&(
                      scala.collection.immutable.RedBlackTree.isBlackTree(right)
                    )
                   then 
                    tailLabel55(left.right, right.left, 
                      scala.collection.immutable.RedBlackTree.NList.cons[
                        scala.collection.immutable.RedBlackTree.Tree[A, B]
                      ](left, leftZipper)
                    , 
                      scala.collection.immutable.RedBlackTree.NList.cons[
                        scala.collection.immutable.RedBlackTree.Tree[A, B]
                      ](right, rightZipper)
                    , 1.+(smallerDepth))
                   else 
                    if 
                      scala.collection.immutable.RedBlackTree.isRedTree(left).&&(
                        scala.collection.immutable.RedBlackTree.isRedTree(right)
                      )
                     then 
                      tailLabel55(left.right, right.left, 
                        scala.collection.immutable.RedBlackTree.NList.cons[
                          scala.collection.immutable.RedBlackTree.Tree[A, B]
                        ](left, leftZipper)
                      , 
                        scala.collection.immutable.RedBlackTree.NList.cons[
                          scala.collection.immutable.RedBlackTree.Tree[A, B]
                        ](right, rightZipper)
                      , smallerDepth)
                     else 
                      if scala.collection.immutable.RedBlackTree.isRedTree(right) then 
                        tailLabel55(left, right.left, leftZipper, 
                          scala.collection.immutable.RedBlackTree.NList.cons[
                            scala.collection.immutable.RedBlackTree.Tree[A, B]
                          ](right, rightZipper)
                        , smallerDepth)
                       else 
                        if scala.collection.immutable.RedBlackTree.isRedTree(left) then 
                          tailLabel55(left.right, right, 
                            scala.collection.immutable.RedBlackTree.NList.cons[
                              scala.collection.immutable.RedBlackTree.Tree[A, B]
                            ](left, leftZipper)
                          , rightZipper, smallerDepth)
                         else 
                          if left.eq(null).&&(right.eq(null)) then 
                            new Tuple4[Null, Boolean, Boolean, Int](null, true, false, smallerDepth)
                           else sys.package.error("unmatched trees in unzip: ".+(left).+(", ").+(right))
                tailLabel55(left, right, leftZipper, rightZipper, smallerDepth)
              }
            unzipBoth(left, right, null, null, 0)
          }
        private def rebalance[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], 
          newLeft: scala.collection.immutable.RedBlackTree.Tree[A, B]
        , newRight: scala.collection.immutable.RedBlackTree.Tree[A, B]): 
          scala.collection.immutable.RedBlackTree.Tree[A, B]
         = 
          {
            @annotation.tailrec() def findDepth(
              zipper: scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]]
            , depth: Int): 
              scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]]
             = 
              {
                def tailLabel57(
                  zipper: 
                    scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]]
                , depth: Int): 
                  scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]]
                 = 
                  if zipper.eq(null) then sys.package.error("Defect: unexpected empty zipper while computing range")
                     else 
                  if scala.collection.immutable.RedBlackTree.isBlackTree(zipper.head) then 
                    if depth.==(1) then zipper else tailLabel57(zipper.tail, depth.-(1))
                   else tailLabel57(zipper.tail, depth)
                tailLabel57(zipper, depth)
              }
            val blkNewLeft: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
              scala.collection.immutable.RedBlackTree.blacken[A, B](newLeft)
            val blkNewRight: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
              scala.collection.immutable.RedBlackTree.blacken[A, B](newRight)
            var ilo5: scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]]
            var ilo6: Boolean
            var ilo7: Boolean
            var ilo8: Int
            case val x46: 
              (scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]], 
                Boolean
              , Boolean, Int) @unchecked
             = 
              scala.collection.immutable.RedBlackTree.compareDepth[A, B](blkNewLeft, blkNewRight): 
                (scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]], 
                  Boolean
                , Boolean, Int) @unchecked
            if x46.ne(null) then 
              {
                ilo5 = x46._1
                ilo6 = x46._2
                ilo7 = x46._3
                ilo8 = x46._4
                ()
              }
             else throw new MatchError(x46)
            val leftMost: Boolean = ilo7
            if ilo6 then 
              /* inlined from scala.collection.immutable.RedBlackTree*/ 
                {
                  new scala.collection.immutable.RedBlackTree.BlackTree[A, B](tree.key, tree.value, blkNewLeft, 
                    blkNewRight
                  )
                }
             else 
              {
                val zipFrom: 
                  scala.collection.immutable.RedBlackTree.NList[scala.collection.immutable.RedBlackTree.Tree[A, B]]
                 = findDepth(ilo5, ilo8)
                val union: scala.collection.immutable.RedBlackTree.RedTree[A, B] = 
                  if leftMost then 
                    /* inlined from scala.collection.immutable.RedBlackTree*/ 
                      {
                        new scala.collection.immutable.RedBlackTree.RedTree[A, B](tree.key, tree.value, blkNewLeft, 
                          zipFrom.head
                        )
                      }
                   else 
                    /* inlined from scala.collection.immutable.RedBlackTree*/ 
                      {
                        new scala.collection.immutable.RedBlackTree.RedTree[A, B](tree.key, tree.value, zipFrom.head, 
                          blkNewRight
                        )
                      }
                val zippedTree: scala.collection.immutable.RedBlackTree.Tree[A, B] = 
                  scala.collection.immutable.RedBlackTree.NList.foldLeft[
                    scala.collection.immutable.RedBlackTree.Tree[A, B]
                  , scala.collection.immutable.RedBlackTree.Tree[A, B]](zipFrom.tail, 
                    union: scala.collection.immutable.RedBlackTree.Tree[A, B]
                  )(
                    {
                      def $anonfun(tree: scala.collection.immutable.RedBlackTree.Tree[A, B], 
                        node: scala.collection.immutable.RedBlackTree.Tree[A, B]
                      ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
                        if leftMost then 
                          scala.collection.immutable.RedBlackTree.balanceLeft[A, B, B](
                            scala.collection.immutable.RedBlackTree.isBlackTree(node)
                          , node.key, node.value, tree, node.right)
                         else 
                          scala.collection.immutable.RedBlackTree.balanceRight[A, B, B](
                            scala.collection.immutable.RedBlackTree.isBlackTree(node)
                          , node.key, node.value, node.left, tree)
                      closure($anonfun)
                    }
                  )
                zippedTree: scala.collection.immutable.RedBlackTree.Tree[A, B]
              }
          }
        private final class NList[A](head: A, tail: scala.collection.immutable.RedBlackTree.NList[A]) extends Object() {
           
          private type A
          <accessor> def head: NList.this.A
          <accessor> def tail: scala.collection.immutable.RedBlackTree.NList[NList.this.A]
        }
        private final lazy module val NList: scala.collection.immutable.RedBlackTree.NList = 
          new scala.collection.immutable.RedBlackTree.NList()
        private final module class NList() extends Object() { 
          def cons[B](x: B, xs: scala.collection.immutable.RedBlackTree.NList[B]): 
            scala.collection.immutable.RedBlackTree.NList[B]
           = new scala.collection.immutable.RedBlackTree.NList[B](x, xs)
          def foldLeft[A, B](xs: scala.collection.immutable.RedBlackTree.NList[A], z: B)(f: (B, A) => B): B = 
            {
              var acc: B = z
              var these: scala.collection.immutable.RedBlackTree.NList[A] = xs
              {
                def while$(): Unit = 
                  if these.ne(null) then 
                    {
                      {
                        acc = f.apply(acc, these.head)
                        these = these.tail
                      }
                      while$()
                    }
                   else ()
                while$()
              }
              acc: B
            }
        }
        @scala.annotation.internal.Child[scala.collection.immutable.RedBlackTree.BlackTree]() @
          scala.annotation.internal.Child
        [scala.collection.immutable.RedBlackTree.RedTree]() sealed abstract class Tree[A, B](@inline() key: A, 
          @inline() value: B
        , @inline() left: scala.collection.immutable.RedBlackTree.Tree[A, B], 
          @inline() right: scala.collection.immutable.RedBlackTree.Tree[A, B]
        ) extends Object() with Serializable { 
          private type A
          private type +B
          @inline() final <accessor> def key: Tree.this.A
          @inline() final <accessor> def value: Tree.this.B
          @inline() final <accessor> def left: scala.collection.immutable.RedBlackTree.Tree[Tree.this.A, Tree.this.B]
          @inline() final <accessor> def right: scala.collection.immutable.RedBlackTree.Tree[Tree.this.A, Tree.this.B]
          @inline() final <accessor> def count: Int = 
            1.+(scala.collection.immutable.RedBlackTree.count(Tree.this.left)).+(
              scala.collection.immutable.RedBlackTree.count(Tree.this.right)
            )
          def black: scala.collection.immutable.RedBlackTree.Tree[Tree.this.A, Tree.this.B]
          def red: scala.collection.immutable.RedBlackTree.Tree[Tree.this.A, Tree.this.B]
        }
        final class RedTree[A, B](key: A, value: B, left: scala.collection.immutable.RedBlackTree.Tree[A, B], 
          right: scala.collection.immutable.RedBlackTree.Tree[A, B]
        ) extends scala.collection.immutable.RedBlackTree.Tree[RedTree.this.A, RedTree.this.B](key, value, left, right) 
          {
         
          private type A
          private type +B
          private def key: RedTree.this.A = super.key
          private def value: RedTree.this.B = super.value
          private def left: scala.collection.immutable.RedBlackTree.Tree[RedTree.this.A, RedTree.this.B] = super.left
          private def right: scala.collection.immutable.RedBlackTree.Tree[RedTree.this.A, RedTree.this.B] = super.right
          override def black: scala.collection.immutable.RedBlackTree.Tree[RedTree.this.A, RedTree.this.B] = 
            /* inlined from scala.collection.immutable.RedBlackTree*/ 
              {
                new scala.collection.immutable.RedBlackTree.BlackTree[RedTree.this.A, RedTree.this.B](RedTree.this.key, 
                  RedTree.this.value
                , RedTree.this.left, RedTree.this.right)
              }
          override def red: scala.collection.immutable.RedBlackTree.Tree[RedTree.this.A, RedTree.this.B] = this
          override def toString: String = 
            "RedTree(".+(RedTree.this.key).+(", ").+(RedTree.this.value).+(", ").+(RedTree.this.left).+(", ").+(
              RedTree.this.right
            ).+(")")
        }
        final class BlackTree[A, B](key: A, value: B, left: scala.collection.immutable.RedBlackTree.Tree[A, B], 
          right: scala.collection.immutable.RedBlackTree.Tree[A, B]
        ) extends scala.collection.immutable.RedBlackTree.Tree[BlackTree.this.A, BlackTree.this.B](key, value, left, 
          right
        ) { 
          private type A
          private type +B
          private def key: BlackTree.this.A = super.key
          private def value: BlackTree.this.B = super.value
          private def left: scala.collection.immutable.RedBlackTree.Tree[BlackTree.this.A, BlackTree.this.B] = 
            super.left
          private def right: scala.collection.immutable.RedBlackTree.Tree[BlackTree.this.A, BlackTree.this.B] = 
            super.right
          override def black: scala.collection.immutable.RedBlackTree.Tree[BlackTree.this.A, BlackTree.this.B] = this
          override def red: scala.collection.immutable.RedBlackTree.Tree[BlackTree.this.A, BlackTree.this.B] = 
            /* inlined from scala.collection.immutable.RedBlackTree*/ 
              {
                new scala.collection.immutable.RedBlackTree.RedTree[BlackTree.this.A, BlackTree.this.B](
                  BlackTree.this.key
                , BlackTree.this.value, BlackTree.this.left, BlackTree.this.right)
              }
          override def toString: String = 
            "BlackTree(".+(BlackTree.this.key).+(", ").+(BlackTree.this.value).+(", ").+(BlackTree.this.left).+(", ").+(
              BlackTree.this.right
            ).+(")")
        }
        final lazy module val RedTree: scala.collection.immutable.RedBlackTree.RedTree = 
          new scala.collection.immutable.RedBlackTree.RedTree()
        final module class RedTree() extends Object() { 
          @scala.collection.immutable.RedBlackTree.RedTree[A, B](key, value, left, right) @inline() inline def apply[A, 
            B
          ](key: A, value: B, left: scala.collection.immutable.RedBlackTree.Tree[A, B], 
            right: scala.collection.immutable.RedBlackTree.Tree[A, B]
          ): scala.collection.immutable.RedBlackTree.RedTree[A, B] = 
            new scala.collection.immutable.RedBlackTree.RedTree[A, B](key, value, left, right)
          def unapply[A, B](t: scala.collection.immutable.RedBlackTree.RedTree[A, B]): 
            Some[(A, B, scala.collection.immutable.RedBlackTree.Tree[A, B], 
              scala.collection.immutable.RedBlackTree.Tree[A, B]
            )]
           = 
            new Some[
              (A, B, scala.collection.immutable.RedBlackTree.Tree[A, B], 
                scala.collection.immutable.RedBlackTree.Tree[A, B]
              )
            ](
              new Tuple4[A, B, scala.collection.immutable.RedBlackTree.Tree[A, B], 
                scala.collection.immutable.RedBlackTree.Tree[A, B]
              ](t.key, t.value, t.left, t.right)
            )
        }
        final lazy module val BlackTree: scala.collection.immutable.RedBlackTree.BlackTree = 
          new scala.collection.immutable.RedBlackTree.BlackTree()
        final module class BlackTree() extends Object() { 
          @scala.collection.immutable.RedBlackTree.BlackTree[A, B](key, value, left, right) @inline() inline def apply[A
            , 
          B](key: A, value: B, left: scala.collection.immutable.RedBlackTree.Tree[A, B], 
            right: scala.collection.immutable.RedBlackTree.Tree[A, B]
          ): scala.collection.immutable.RedBlackTree.BlackTree[A, B] = 
            new scala.collection.immutable.RedBlackTree.BlackTree[A, B](key, value, left, right)
          def unapply[A, B](t: scala.collection.immutable.RedBlackTree.BlackTree[A, B]): 
            Some[(A, B, scala.collection.immutable.RedBlackTree.Tree[A, B], 
              scala.collection.immutable.RedBlackTree.Tree[A, B]
            )]
           = 
            new Some[
              (A, B, scala.collection.immutable.RedBlackTree.Tree[A, B], 
                scala.collection.immutable.RedBlackTree.Tree[A, B]
              )
            ](
              new Tuple4[A, B, scala.collection.immutable.RedBlackTree.Tree[A, B], 
                scala.collection.immutable.RedBlackTree.Tree[A, B]
              ](t.key, t.value, t.left, t.right)
            )
        }
        private abstract class TreeIterator[A, B, R](root: scala.collection.immutable.RedBlackTree.Tree[A, B], 
          start: Option[A]
        )(implicit ordering: Ordering[A]) extends Object() with Iterator[TreeIterator.this.R] { 
          protected def sizeHintIfCheap: Int = super[GenTraversableOnce].sizeHintIfCheap
          protected def reversed: List[TreeIterator.this.R] = super[TraversableOnce].reversed
          def size: Int = super[TraversableOnce].size
          def nonEmpty: Boolean = super[TraversableOnce].nonEmpty
          def count(p: TreeIterator.this.R => Boolean): Int = super[TraversableOnce].count(p)
          def collectFirst[B](pf: PartialFunction[TreeIterator.this.R, B]): Option[B] = 
            super[TraversableOnce].collectFirst[B](pf)
          def /:[B](z: B)(op: (B, TreeIterator.this.R) => B): B = super[TraversableOnce]./:[B](z)(op)
          def :\[B](z: B)(op: (TreeIterator.this.R, B) => B): B = super[TraversableOnce].:\[B](z)(op)
          def foldLeft[B](z: B)(op: (B, TreeIterator.this.R) => B): B = super[TraversableOnce].foldLeft[B](z)(op)
          def foldRight[B](z: B)(op: (TreeIterator.this.R, B) => B): B = super[TraversableOnce].foldRight[B](z)(op)
          def reduceLeft[B >: TreeIterator.this.R](op: (B, TreeIterator.this.R) => B): B = 
            super[TraversableOnce].reduceLeft[B](op)
          def reduceRight[B >: TreeIterator.this.R](op: (TreeIterator.this.R, B) => B): B = 
            super[TraversableOnce].reduceRight[B](op)
          def reduceLeftOption[B >: TreeIterator.this.R](op: (B, TreeIterator.this.R) => B): Option[B] = 
            super[TraversableOnce].reduceLeftOption[B](op)
          def reduceRightOption[B >: TreeIterator.this.R](op: (TreeIterator.this.R, B) => B): Option[B] = 
            super[TraversableOnce].reduceRightOption[B](op)
          def reduce[A1 >: TreeIterator.this.R](op: (A1, A1) => A1): A1 = super[TraversableOnce].reduce[A1](op)
          def reduceOption[A1 >: TreeIterator.this.R](op: (A1, A1) => A1): Option[A1] = 
            super[TraversableOnce].reduceOption[A1](op)
          def fold[A1 >: TreeIterator.this.R](z: A1)(op: (A1, A1) => A1): A1 = super[TraversableOnce].fold[A1](z)(op)
          def aggregate[B](z: => B)(seqop: (B, TreeIterator.this.R) => B, combop: (B, B) => B): B = 
            super[TraversableOnce].aggregate[B](z)(seqop, combop)
          def sum[B >: TreeIterator.this.R](implicit num: Numeric[B]): B = super[TraversableOnce].sum[B](num)
          def product[B >: TreeIterator.this.R](implicit num: Numeric[B]): B = super[TraversableOnce].product[B](num)
          def min[B >: TreeIterator.this.R](implicit cmp: Ordering[B]): TreeIterator.this.R = 
            super[TraversableOnce].min[B](cmp)
          def max[B >: TreeIterator.this.R](implicit cmp: Ordering[B]): TreeIterator.this.R = 
            super[TraversableOnce].max[B](cmp)
          def maxBy[B](f: TreeIterator.this.R => B)(implicit cmp: Ordering[B]): TreeIterator.this.R = 
            super[TraversableOnce].maxBy[B](f)(cmp)
          def minBy[B](f: TreeIterator.this.R => B)(implicit cmp: Ordering[B]): TreeIterator.this.R = 
            super[TraversableOnce].minBy[B](f)(cmp)
          def copyToBuffer[B >: TreeIterator.this.R](dest: scala.collection.mutable.Buffer[B]): Unit = 
            super[TraversableOnce].copyToBuffer[B](dest)
          def copyToArray[B >: TreeIterator.this.R](xs: Array[B], start: Int): Unit = 
            super[TraversableOnce].copyToArray[B](xs, start)
          def copyToArray[B >: TreeIterator.this.R](xs: Array[B]): Unit = super[TraversableOnce].copyToArray[B](xs)
          def toArray[B >: TreeIterator.this.R](implicit evidence$1: ClassTag[B]): Array[B] = 
            super[TraversableOnce].toArray[B](evidence$1)
          def toList: List[TreeIterator.this.R] = super[TraversableOnce].toList
          def toIterable: Iterable[TreeIterator.this.R] = super[TraversableOnce].toIterable
          def toSeq: Seq[TreeIterator.this.R] = super[TraversableOnce].toSeq
          def toIndexedSeq: scala.collection.immutable.IndexedSeq[TreeIterator.this.R] = 
            super[TraversableOnce].toIndexedSeq
          def toBuffer[B >: TreeIterator.this.R]: scala.collection.mutable.Buffer[B] = 
            super[TraversableOnce].toBuffer[B]
          def toSet[B >: TreeIterator.this.R]: Set[B] = super[TraversableOnce].toSet[B]
          def toVector: Vector[TreeIterator.this.R] = super[TraversableOnce].toVector
          def to[Col <: [_] => Any](
            implicit cbf: 
              scala.collection.generic.CanBuildFrom[Nothing, TreeIterator.this.R, 
                Col[TreeIterator.this.R @uncheckedVariance]
              ]
          ): Col[TreeIterator.this.R @uncheckedVariance] = super[TraversableOnce].to[Col](cbf)
          def toMap[T, U](implicit ev: TreeIterator.this.R <:< (T, U)): Map[T, U] = 
            super[TraversableOnce].toMap[T, U](ev)
          def mkString(start: String, sep: String, end: String): String = 
            super[TraversableOnce].mkString(start, sep, end)
          def mkString(sep: String): String = super[TraversableOnce].mkString(sep)
          def mkString: String = super[TraversableOnce].mkString
          def addString(b: StringBuilder, start: String, sep: String, end: String): StringBuilder = 
            super[TraversableOnce].addString(b, start, sep, end)
          def addString(b: StringBuilder, sep: String): StringBuilder = super[TraversableOnce].addString(b, sep)
          def addString(b: StringBuilder): StringBuilder = super[TraversableOnce].addString(b)
          def seq: Iterator[TreeIterator.this.R] = super[Iterator].seq
          def isEmpty: Boolean = super[Iterator].isEmpty
          def isTraversableAgain: Boolean = super[Iterator].isTraversableAgain
          def hasDefiniteSize: Boolean = super[Iterator].hasDefiniteSize
          def take(n: Int): Iterator[TreeIterator.this.R] = super[Iterator].take(n)
          def drop(n: Int): Iterator[TreeIterator.this.R] = super[Iterator].drop(n)
          def slice(from: Int, until: Int): Iterator[TreeIterator.this.R] = super[Iterator].slice(from, until)
          protected def sliceIterator(from: Int, until: Int): Iterator[TreeIterator.this.R] = 
            super[Iterator].sliceIterator(from, until)
          def map[B](f: TreeIterator.this.R => B): Iterator[B] = super[Iterator].map[B](f)
          def ++[B >: TreeIterator.this.R](that: => scala.collection.GenTraversableOnce[B]): Iterator[B] = 
            super[Iterator].++[B](that)
          def flatMap[B](f: TreeIterator.this.R => scala.collection.GenTraversableOnce[B]): Iterator[B] = 
            super[Iterator].flatMap[B](f)
          def filter(p: TreeIterator.this.R => Boolean): Iterator[TreeIterator.this.R] = super[Iterator].filter(p)
          def corresponds[B](that: scala.collection.GenTraversableOnce[B])(p: (TreeIterator.this.R, B) => Boolean): 
            Boolean
           = super[Iterator].corresponds[B](that)(p)
          def withFilter(p: TreeIterator.this.R => Boolean): Iterator[TreeIterator.this.R] = 
            super[Iterator].withFilter(p)
          def filterNot(p: TreeIterator.this.R => Boolean): Iterator[TreeIterator.this.R] = super[Iterator].filterNot(p)
          @scala.annotation.migration("`collect` has changed. The previous behavior can be reproduced with `toSeq`.", 
            "2.8.0"
          ) def collect[B](pf: PartialFunction[TreeIterator.this.R, B]): Iterator[B] = super[Iterator].collect[B](pf)
          def scanLeft[B](z: B)(op: (B, TreeIterator.this.R) => B): Iterator[B] = super[Iterator].scanLeft[B](z)(op)
          def scanRight[B](z: B)(op: (TreeIterator.this.R, B) => B): Iterator[B] = super[Iterator].scanRight[B](z)(op)
          def takeWhile(p: TreeIterator.this.R => Boolean): Iterator[TreeIterator.this.R] = super[Iterator].takeWhile(p)
          def partition(p: TreeIterator.this.R => Boolean): 
            (Iterator[TreeIterator.this.R], Iterator[TreeIterator.this.R])
           = super[Iterator].partition(p)
          def span(p: TreeIterator.this.R => Boolean): (Iterator[TreeIterator.this.R], Iterator[TreeIterator.this.R]) = 
            super[Iterator].span(p)
          def dropWhile(p: TreeIterator.this.R => Boolean): Iterator[TreeIterator.this.R] = super[Iterator].dropWhile(p)
          def zip[B](that: Iterator[B]): Iterator[(TreeIterator.this.R, B)] = super[Iterator].zip[B](that)
          def padTo[A1 >: TreeIterator.this.R](len: Int, elem: A1): Iterator[A1] = super[Iterator].padTo[A1](len, elem)
          def zipWithIndex: Iterator[(TreeIterator.this.R, Int)] = super[Iterator].zipWithIndex
          def zipAll[B, A1 >: TreeIterator.this.R, B1 >: B](that: Iterator[B], thisElem: A1, thatElem: B1): 
            Iterator[(A1, B1)]
           = super[Iterator].zipAll[B, A1, B1](that, thisElem, thatElem)
          def foreach[U](f: TreeIterator.this.R => U): Unit = super[Iterator].foreach[U](f)
          def forall(p: TreeIterator.this.R => Boolean): Boolean = super[Iterator].forall(p)
          def exists(p: TreeIterator.this.R => Boolean): Boolean = super[Iterator].exists(p)
          def contains(elem: Any): Boolean = super[Iterator].contains(elem)
          def find(p: TreeIterator.this.R => Boolean): Option[TreeIterator.this.R] = super[Iterator].find(p)
          def indexWhere(p: TreeIterator.this.R => Boolean): Int = super[Iterator].indexWhere(p)
          def indexWhere(p: TreeIterator.this.R => Boolean, from: Int): Int = super[Iterator].indexWhere(p, from)
          def indexOf[B >: TreeIterator.this.R](elem: B): Int = super[Iterator].indexOf[B](elem)
          def indexOf[B >: TreeIterator.this.R](elem: B, from: Int): Int = super[Iterator].indexOf[B](elem, from)
          def buffered: BufferedIterator[TreeIterator.this.R] = super[Iterator].buffered
          def grouped[B >: TreeIterator.this.R](size: Int): TreeIterator.this.GroupedIterator[B] = 
            super[Iterator].grouped[B](size)
          def sliding[B >: TreeIterator.this.R](size: Int, step: Int): TreeIterator.this.GroupedIterator[B] = 
            super[Iterator].sliding[B](size, step)
          def length: Int = super[Iterator].length
          def duplicate: (Iterator[TreeIterator.this.R], Iterator[TreeIterator.this.R]) = super[Iterator].duplicate
          def patch[B >: TreeIterator.this.R](from: Int, patchElems: Iterator[B], replaced: Int): Iterator[B] = 
            super[Iterator].patch[B](from, patchElems, replaced)
          def copyToArray[B >: TreeIterator.this.R](xs: Array[B], start: Int, len: Int): Unit = 
            super[Iterator].copyToArray[B](xs, start, len)
          def sameElements(that: Iterator[_]): Boolean = super[Iterator].sameElements(that)
          def toTraversable: Traversable[TreeIterator.this.R] = super[Iterator].toTraversable
          def toIterator: Iterator[TreeIterator.this.R] = super[Iterator].toIterator
          def toStream: Stream[TreeIterator.this.R] = super[Iterator].toStream
          override def toString(): String = super[Iterator].toString()
          def sliding$default$2[B >: TreeIterator.this.R]: Int @uncheckedVariance = super[Iterator].sliding$default$2[B]
          private type A
          private type B
          private type R
          private val root: scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]
          private val start: Option[TreeIterator.this.A]
          private implicit val ordering: Ordering[TreeIterator.this.A]
          protected def nextResult(
            tree: scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]
          ): TreeIterator.this.R
          override def hasNext: Boolean = this.lookahead.ne(null)
          override def next(): TreeIterator.this.R = 
            {
              case val x51: 
                scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B](TreeIterator.this
                  .
                lookahead)
               = this.lookahead
              if null.==(x51) then throw new NoSuchElementException("next on empty iterator") else 
                {
                  this.lookahead = this.findLeftMostOrPopOnEmpty(this.goRight(x51))
                  this.nextResult(x51)
                }
            }
          private def findLeftMostOrPopOnEmpty(
            tree: scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]
          ): scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B] = 
            {
              def tailLabel80[A, B, R]($this: scala.collection.immutable.RedBlackTree.TreeIterator[A, B, R])(
                tree: scala.collection.immutable.RedBlackTree.Tree[A, B]
              ): scala.collection.immutable.RedBlackTree.Tree[A, B] = 
                if tree.eq(null) then $this.popNext() else 
                  if tree.left.eq(null) then tree else tailLabel80[A, B, R]($this)($this.goLeft(tree))
              tailLabel80[TreeIterator.this.A, TreeIterator.this.B, TreeIterator.this.R](this)(tree)
            }
          private def pushNext(
            tree: scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]
          ): Unit = 
            {
              def tailLabel81[A, B, R]($this: scala.collection.immutable.RedBlackTree.TreeIterator[A, B, R])(
                tree: scala.collection.immutable.RedBlackTree.Tree[A, B]
              ): Unit = 
                try 
                  {
                    $this.stackOfNexts.update($this.index, tree)
                    $this.index = 1.+($this.index)
                  }
                 catch 
                  {
                    case _: ArrayIndexOutOfBoundsException => 
                      assert($this.index.>=($this.stackOfNexts.length))
                      $this.stackOfNexts = 
                        refArrayOps[scala.collection.immutable.RedBlackTree.Tree[A, B]]($this.stackOfNexts).:+[
                          scala.collection.immutable.RedBlackTree.Tree[A, B]
                        ](null)(
                          scala.reflect.ClassTag.apply[scala.collection.immutable.RedBlackTree.Tree[A, B]](
                            classOf[class Tree]
                          )
                        )
                      tailLabel81[A, B, R]($this)(tree)
                  }
              tailLabel81[TreeIterator.this.A, TreeIterator.this.B, TreeIterator.this.R](this)(tree)
            }
          private def popNext(): scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]
             = 
          if this.index.==(0) then null else 
            {
              this.index = this.index.-(1)
              this.stackOfNexts.apply(this.index)
            }
          private var stackOfNexts: 
            Array[scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]]
           = 
            if TreeIterator.this.root.eq(null) then null else 
              {
                val maximumHeight: Int = 
                  2.*(32.-(Integer.numberOfLeadingZeros(TreeIterator.this.root.count.+(2).-(1)))).-(2).-(1)
                dotty.runtime.Arrays.newArray[
                  Array[scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]]
                ](classOf[class Tree], classOf[class Array], [maximumHeight : Int])
              }
          private var index: Int = 0
          private var lookahead: scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]
             = 
          TreeIterator.this.start.map[
            scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]
          ](
            {
              def $anonfun(key: TreeIterator.this.A): 
                scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]
               = this.startFrom(key)
              closure($anonfun)
            }
          ).getOrElse[scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]](
            <special-ops>.<cbn-arg>[
              scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]
            ](
              {
                def $anonfun(): scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]
                   = 
                this.findLeftMostOrPopOnEmpty(TreeIterator.this.root)
                closure($anonfun)
              }
            )
          )
          private def startFrom(key: TreeIterator.this.A): 
            scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]
           = 
            if TreeIterator.this.root.eq(null) then null else 
              {
                @annotation.tailrec() def find(
                  tree: scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]
                ): scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B] = 
                  {
                    def tailLabel84(
                      tree: scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]
                    ): scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B] = 
                      if tree.eq(null) then this.popNext() else 
                        tailLabel84(
                          if TreeIterator.this.ordering.lteq(key, tree.key) then this.goLeft(tree) else 
                            this.goRight(tree)
                        )
                    tailLabel84(tree)
                  }
                find(TreeIterator.this.root)
              }
          private def goLeft(
            tree: scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]
          ): scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B] = 
            {
              this.pushNext(tree)
              tree.left
            }
          private def goRight(
            tree: scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B]
          ): scala.collection.immutable.RedBlackTree.Tree[TreeIterator.this.A, TreeIterator.this.B] = tree.right
        }
        private class EntriesIterator[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], focus: Option[A])(
          implicit evidence$16: Ordering[A]
        ) extends scala.collection.immutable.RedBlackTree.TreeIterator[EntriesIterator.this.A, EntriesIterator.this.B, 
          (EntriesIterator.this.A, EntriesIterator.this.B)
        ](tree, focus)(evidence$16) { 
          private type A
          private type B
          private val tree: scala.collection.immutable.RedBlackTree.Tree[EntriesIterator.this.A, EntriesIterator.this.B]
          private val focus: Option[EntriesIterator.this.A]
          private implicit val evidence$16: Ordering[EntriesIterator.this.A]
          override def nextResult(
            tree: scala.collection.immutable.RedBlackTree.Tree[EntriesIterator.this.A, EntriesIterator.this.B]
          ): (EntriesIterator.this.A, EntriesIterator.this.B) = 
            new Tuple2[EntriesIterator.this.A, EntriesIterator.this.B](tree.key, tree.value)
        }
        private class KeysIterator[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], focus: Option[A])(
          implicit evidence$17: Ordering[A]
        ) extends scala.collection.immutable.RedBlackTree.TreeIterator[KeysIterator.this.A, KeysIterator.this.B, 
          KeysIterator.this.A
        ](tree, focus)(evidence$17) { 
          private type A
          private type B
          private val tree: scala.collection.immutable.RedBlackTree.Tree[KeysIterator.this.A, KeysIterator.this.B]
          private val focus: Option[KeysIterator.this.A]
          private implicit val evidence$17: Ordering[KeysIterator.this.A]
          override def nextResult(
            tree: scala.collection.immutable.RedBlackTree.Tree[KeysIterator.this.A, KeysIterator.this.B]
          ): KeysIterator.this.A = tree.key
        }
        private class ValuesIterator[A, B](tree: scala.collection.immutable.RedBlackTree.Tree[A, B], focus: Option[A])(
          implicit evidence$18: Ordering[A]
        ) extends scala.collection.immutable.RedBlackTree.TreeIterator[ValuesIterator.this.A, ValuesIterator.this.B, 
          ValuesIterator.this.B
        ](tree, focus)(evidence$18) { 
          private type A
          private type B
          private val tree: scala.collection.immutable.RedBlackTree.Tree[ValuesIterator.this.A, ValuesIterator.this.B]
          private val focus: Option[ValuesIterator.this.A]
          private implicit val evidence$18: Ordering[ValuesIterator.this.A]
          override def nextResult(
            tree: scala.collection.immutable.RedBlackTree.Tree[ValuesIterator.this.A, ValuesIterator.this.B]
          ): ValuesIterator.this.B = tree.value
        }
      }
      final lazy module val Test: scala.collection.immutable.Test = new scala.collection.immutable.Test()
      @scala.annotation.internal.SourceFile(
        "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/rbtree.scala"
      ) final module class Test() extends Object() { 
        def main(args: Array[String]): Unit = ()
      }
    }
  }
} of class class dotty.tools.dotc.ast.Trees$PackageDef # 732667
*** error while checking /mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/rbtree.scala after phase arrayConstructors ***
[====================>                  ] completed (513/940, 55s)[====================>                  ] completed (513/940, 55s)[====================>                  ] completed (513/940, 55s)[====================>                  ] completed (514/940, 55s)[====================>                  ] completed (514/940, 55s)[====================>                  ] completed (514/940, 55s)[====================>                  ] completed (514/940, 55s)[====================>                  ] completed (516/940, 55s)[====================>                  ] completed (516/940, 55s)[====================>                  ] completed (516/940, 56s)[=====================>                 ] completed (518/940, 56s)[=====================>                 ] completed (518/940, 56s)[=====================>                 ] completed (520/940, 56s)[=====================>                 ] completed (521/940, 56s)[=====================>                 ] completed (523/940, 56s)[=====================>                 ] completed (524/940, 56s)[=====================>                 ] completed (526/940, 56s)[=====================>                 ] completed (527/940, 56s)[=====================>                 ] completed (528/940, 56s)[=====================>                 ] completed (528/940, 57s)[=====================>                 ] completed (530/940, 57s)[=====================>                 ] completed (531/940, 57s)[=====================>                 ] completed (532/940, 57s)[=====================>                 ] completed (532/940, 57s)[=====================>                 ] completed (536/940, 57s)[=====================>                 ] completed (536/940, 57s)[=====================>                 ] completed (538/940, 57s)[=====================>                 ] completed (540/940, 57s)[=====================>                 ] completed (540/940, 57s)[=====================>                 ] completed (540/940, 58s)[======================>                ] completed (541/940, 58s)[======================>                ] completed (541/940, 58s)[======================>                ] completed (542/940, 58s)[======================>                ] completed (542/940, 58s)[======================>                ] completed (544/940, 58s)[======================>                ] completed (544/940, 58s)[======================>                ] completed (544/940, 58s)[======================>                ] completed (547/940, 58s)[======================>                ] completed (547/940, 58s)[======================>                ] completed (547/940, 59s)[======================>                ] completed (550/940, 59s)[======================>                ] completed (550/940, 59s)[======================>                ] completed (550/940, 59s)[======================>                ] completed (551/940, 59s)[======================>                ] completed (551/940, 59s)[======================>                ] completed (551/940, 59s)[======================>                ] completed (552/940, 59s)[======================>                ] completed (552/940, 59s)[======================>                ] completed (553/940, 59s)[======================>                ] completed (553/940, 60s)[======================>                ] completed (553/940, 60s)[======================>                ] completed (553/940, 60s)[======================>                ] completed (553/940, 60s)[======================>                ] completed (553/940, 60s)[======================>                ] completed (553/940, 60s)[======================>                ] completed (554/940, 60s)[======================>                ] completed (554/940, 60s)[======================>                ] completed (554/940, 60s)[======================>                ] completed (554/940, 60s)[======================>                ] completed (554/940, 61s)[======================>                ] completed (554/940, 61s)[======================>                ] completed (554/940, 61s)[======================>                ] completed (554/940, 61s)[======================>                ] completed (555/940, 61s)[======================>                ] completed (555/940, 61s)[======================>                ] completed (555/940, 61s)[======================>                ] completed (555/940, 61s)[======================>                ] completed (555/940, 61s)[======================>                ] completed (555/940, 61s)[======================>                ] completed (555/940, 62s)exception while typing {
  var ilo1: dotty1.collections.immutable.Iter2.ArrayIterator[B]
  var ilo2: Array[AnyRef]
  var ilo3: Int
  case val x20: dotty1.collections.immutable.Iter2.ArrayIterator[B] @unchecked = 
    dotty1.collections.immutable.Iter2.ArrayIterator.fromIterator[B](that.iterator): 
      dotty1.collections.immutable.Iter2.ArrayIterator[B] @unchecked
  if x20.ne(null) then 
    {
      case val x21: dotty1.collections.immutable.Iter2.ArrayIterator[B] = 
        {
          dotty1.collections.immutable.Iter2.ArrayIterator
          x20
        }
      case val x22: Array[AnyRef] = x21._1
      case val x23: Int = x21._2
      ilo1 = x20
      ilo2 = x22
      ilo3 = x23
      ()
    }
   else throw new MatchError(x20)
  val len2: Int = ilo3
  if ArrayIterator.this.len.==(0) then ilo1 else 
    if len2.==(0) then this else 
      {
        val resLen: Int = ArrayIterator.this.len.+(len2)
        val resElems: Array[AnyRef] = 
          dotty.runtime.Arrays.newArray[Array[AnyRef]](classOf[class Object], classOf[class Array], [resLen : Int])
        Array.copy(ArrayIterator.this.elems, 0, resElems, 0, ArrayIterator.this.len)
        Array.copy(ilo2, 0, resElems, ArrayIterator.this.len, len2)
        new dotty1.collections.immutable.Iter2.ArrayIterator[Nothing](resElems, resLen)
      }
} of class class dotty.tools.dotc.ast.Trees$Block # 931539
exception while typing override def ++[B >: ArrayIterator.this.A](that: dotty1.collections.immutable.Iter2.IterableOnce[B]): 
  dotty1.collections.immutable.Iter2.ArrayIterator[B]
 = 
  {
    var ilo1: dotty1.collections.immutable.Iter2.ArrayIterator[B]
    var ilo2: Array[AnyRef]
    var ilo3: Int
    case val x20: dotty1.collections.immutable.Iter2.ArrayIterator[B] @unchecked = 
      dotty1.collections.immutable.Iter2.ArrayIterator.fromIterator[B](that.iterator): 
        dotty1.collections.immutable.Iter2.ArrayIterator[B] @unchecked
    if x20.ne(null) then 
      {
        case val x21: dotty1.collections.immutable.Iter2.ArrayIterator[B] = 
          {
            dotty1.collections.immutable.Iter2.ArrayIterator
            x20
          }
        case val x22: Array[AnyRef] = x21._1
        case val x23: Int = x21._2
        ilo1 = x20
        ilo2 = x22
        ilo3 = x23
        ()
      }
     else throw new MatchError(x20)
    val len2: Int = ilo3
    if ArrayIterator.this.len.==(0) then ilo1 else 
      if len2.==(0) then this else 
        {
          val resLen: Int = ArrayIterator.this.len.+(len2)
          val resElems: Array[AnyRef] = 
            dotty.runtime.Arrays.newArray[Array[AnyRef]](classOf[class Object], classOf[class Array], [resLen : Int])
          Array.copy(ArrayIterator.this.elems, 0, resElems, 0, ArrayIterator.this.len)
          Array.copy(ilo2, 0, resElems, ArrayIterator.this.len, len2)
          new dotty1.collections.immutable.Iter2.ArrayIterator[Nothing](resElems, resLen)
        }
  } of class class dotty.tools.dotc.ast.Trees$DefDef # 931839
exception while typing case class ArrayIterator[A](elems: Array[AnyRef], len: Int) extends Object() with dotty1.collections.immutable.Iter2.
  Iterator
[ArrayIterator.this.A] with Product { 
  def productIterator: Iterator[Any] = super[Product].productIterator
  private type +A
  <accessor> def elems: Array[AnyRef]
  <accessor> def len: Int
  private def elem(i: Int): ArrayIterator.this.A = ArrayIterator.this.elems.apply(i).asInstanceOf[ArrayIterator.this.A]
  private <accessor> def cur: Int = 0
  private <accessor> def cur_=(x$1: Int): Unit = ()
  def hasNext: Boolean = this.cur.<(ArrayIterator.this.len)
  def next: ArrayIterator.this.A = 
    {
      val res: ArrayIterator.this.A = this.elem(this.cur)
      this.cur_=(1.+(this.cur))
      res: ArrayIterator.this.A
    }
  override def foreach(f: ArrayIterator.this.A => Unit): Unit = 
    scala.runtime.RichInt.until$extension0(intWrapper(0))(ArrayIterator.this.len).foreach[Unit](
      {
        def $anonfun(i: Int): Unit = f.apply(this.elem(i))
        closure($anonfun)
      }
    )
  override def map[B](f: ArrayIterator.this.A => B): dotty1.collections.immutable.Iter2.ArrayIterator[B] = 
    {
      var mapped: Array[AnyRef] = ArrayIterator.this.elems
      scala.runtime.RichInt.until$extension0(intWrapper(0))(ArrayIterator.this.len).foreach[Unit](
        {
          def $anonfun(i: Int): Unit = 
            {
              val x: ArrayIterator.this.A = this.elem(i)
              val y: AnyRef = dotty1.collections.immutable.Iter2.ArrayIterator.widen(f.apply(x))
              if dotty1.collections.immutable.Iter2.ArrayIterator.widen(x).ne(y) then 
                {
                  if mapped.eq(ArrayIterator.this.elems) then 
                    mapped = 
                      dotty.runtime.Arrays.newArray[Array[AnyRef]](classOf[class Object], classOf[class Array], 
                        [ArrayIterator.this.len : Int]
                      )
                   else ()
                  mapped.update(i, y)
                }
               else ()
            }
          closure($anonfun)
        }
      )
      if mapped.eq(ArrayIterator.this.elems) then this.asInstanceOf[dotty1.collections.immutable.Iter2.ArrayIterator[B]]
         else 
      new dotty1.collections.immutable.Iter2.ArrayIterator[Nothing](mapped, ArrayIterator.this.len)
    }
  override def flatMap[B](f: ArrayIterator.this.A => dotty1.collections.immutable.Iter2.IterableOnce[B]): 
    dotty1.collections.immutable.Iter2.ArrayIterator[B]
   = 
    dotty1.collections.immutable.Iter2.ArrayIterator.flatten[B](
      this.map[dotty1.collections.immutable.Iter2.Iterator[B]](
        {
          def $anonfun(_$2: ArrayIterator.this.A): dotty1.collections.immutable.Iter2.Iterator[B] = 
            f.apply(_$2).buildIterator
          closure($anonfun)
        }
      )
    )
  override def ++[B >: ArrayIterator.this.A](that: dotty1.collections.immutable.Iter2.IterableOnce[B]): 
    dotty1.collections.immutable.Iter2.ArrayIterator[B]
   = 
    {
      var ilo1: dotty1.collections.immutable.Iter2.ArrayIterator[B]
      var ilo2: Array[AnyRef]
      var ilo3: Int
      case val x20: dotty1.collections.immutable.Iter2.ArrayIterator[B] @unchecked = 
        dotty1.collections.immutable.Iter2.ArrayIterator.fromIterator[B](that.iterator): 
          dotty1.collections.immutable.Iter2.ArrayIterator[B] @unchecked
      if x20.ne(null) then 
        {
          case val x21: dotty1.collections.immutable.Iter2.ArrayIterator[B] = 
            {
              dotty1.collections.immutable.Iter2.ArrayIterator
              x20
            }
          case val x22: Array[AnyRef] = x21._1
          case val x23: Int = x21._2
          ilo1 = x20
          ilo2 = x22
          ilo3 = x23
          ()
        }
       else throw new MatchError(x20)
      val len2: Int = ilo3
      if ArrayIterator.this.len.==(0) then ilo1 else 
        if len2.==(0) then this else 
          {
            val resLen: Int = ArrayIterator.this.len.+(len2)
            val resElems: Array[AnyRef] = 
              dotty.runtime.Arrays.newArray[Array[AnyRef]](classOf[class Object], classOf[class Array], [resLen : Int])
            Array.copy(ArrayIterator.this.elems, 0, resElems, 0, ArrayIterator.this.len)
            Array.copy(ilo2, 0, resElems, ArrayIterator.this.len, len2)
            new dotty1.collections.immutable.Iter2.ArrayIterator[Nothing](resElems, resLen)
          }
    }
  def copy[A](elems: Array[AnyRef], len: Int): dotty1.collections.immutable.Iter2.ArrayIterator[A] = 
    new dotty1.collections.immutable.Iter2.ArrayIterator[A](elems, len)
  def copy$default$1[A]: Array[AnyRef] = 
    ArrayIterator.this.elems: => Array[AnyRef](ArrayIterator.this.elems) @uncheckedVariance
  def copy$default$2[A]: Int = ArrayIterator.this.len: => Int(ArrayIterator.this.len) @uncheckedVariance
  def _1: Array[AnyRef] = this.elems
  def _2: Int = this.len
  override def hashCode(): Int = 
    {
      val valify23: Int = scala.runtime.Statics#mix(1454198035, scala.runtime.Statics#anyHash(ArrayIterator.this.elems))
      val valify24: Int = scala.runtime.Statics#mix(valify23, ArrayIterator.this.len)
      scala.runtime.Statics#finalizeHash(valify24, 2)
    }
  override def equals(x$0: Any): Boolean = 
    this.eq(x$0.asInstanceOf[Object]).||(
      if x$0.$isInstanceOf$[dotty1.collections.immutable.Iter2.ArrayIterator[ArrayIterator.this.A]] then 
        {
          case val x26: dotty1.collections.immutable.Iter2.ArrayIterator[ArrayIterator.this.A] = 
            x$0.asInstanceOf[dotty1.collections.immutable.Iter2.ArrayIterator[ArrayIterator.this.A]]
          this.elems.==(x26.elems).&&(this.len.==(x26.len))
        }
       else 
        if x$0.$isInstanceOf$[Any] then 
          {
            x$0.asInstanceOf[Any]
            false
          }
         else throw new MatchError(x$0)
    )
  override def toString(): String = scala.runtime.ScalaRunTime._toString(this)
  override def canEqual(that: Any): Boolean = 
    that.isInstanceOf[dotty1.collections.immutable.Iter2.ArrayIterator[ArrayIterator.this.A]]
  override def productArity: Int = 2
  override def productPrefix: String = "ArrayIterator"
  override def productElement(n: Int): Any = 
    if 0.==(n) then this._1 else if 1.==(n) then this._2 else throw new IndexOutOfBoundsException(n.toString())
} of class class dotty.tools.dotc.ast.Trees$TypeDef # 932340
[======================>                ] completed (556/940, 62s)exception while typing @scala.annotation.internal.SourceFile(
  "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/Iter2.scala"
) final module class Iter2() extends Object() { 
  <trait> trait Iterator[A]() extends Object with dotty1.collections.immutable.Iter2.IterableOnce[Iterator.this.A] { 
    private type +A
    def hasNext: Boolean
    def next: Iterator.this.A
    def iterator: dotty1.collections.immutable.Iter2.Iterator[Iterator.this.A] = this
    def foreach(f: Iterator.this.A => Unit): Unit = ???
    def map[B](f: Iterator.this.A => B): dotty1.collections.immutable.Iter2.Iterator[B] = ???
    def flatMap[B](f: Iterator.this.A => dotty1.collections.immutable.Iter2.IterableOnce[B]): 
      dotty1.collections.immutable.Iter2.Iterator[B]
     = ???
    def ++[B >: Iterator.this.A](xs: dotty1.collections.immutable.Iter2.IterableOnce[B]): 
      dotty1.collections.immutable.Iter2.Iterator[B]
     = ???
    def drop(n: Int): dotty1.collections.immutable.Iter2.Iterator[Iterator.this.A] = ???
    def indexWhere(p: Iterator.this.A => Boolean): Int = 
      {
        var i: Int = 0
        {
          def while$(): Unit = 
            if this.hasNext then 
              {
                {
                  if p.apply(this.next) then return i else ()
                  i = 1.+(i)
                }
                while$()
              }
             else ()
          while$()
        }
        -1
      }
    def zip[B](that: dotty1.collections.immutable.Iter2.Iterator[B]): 
      dotty1.collections.immutable.Iter2.Iterator[(Iterator.this.A, B)]
     = ???
    def copy: dotty1.collections.immutable.Iter2.Iterator[Iterator.this.A] = ???
  }
  <trait> trait IterableOnce[A]() extends Object { 
    private type +A
    def iterator: dotty1.collections.immutable.Iter2.Iterator[IterableOnce.this.A]
    def buildIterator: dotty1.collections.immutable.Iter2.Iterator[IterableOnce.this.A] = this.iterator
  }
  <trait> interface trait FromIterator[C <: dotty1.collections.immutable.Iter2.Iterable]() extends Object { 
    private type +C <: dotty1.collections.immutable.Iter2.Iterable
    def fromIterator[B](it: dotty1.collections.immutable.Iter2.Iterator[B]): FromIterator.this.C[B]
  }
  <trait> trait Iterable[IA]() extends Object with dotty1.collections.immutable.Iter2.IterableOnce[Iterable.this.IA]
     with 
  dotty1.collections.immutable.Iter2.FromIterator[dotty1.collections.immutable.Iter2.Iterable] { 
    private type +IA
    def view: dotty1.collections.immutable.Iter2.View[Iterable.this.IA] = 
      new dotty1.collections.immutable.Iter2.View[Iterable.this.IA](this.iterator)
  }
  <trait> interface trait Seq[AA]() extends Object with dotty1.collections.immutable.Iter2.Iterable[Seq.this.AA] with 
    dotty1.collections.immutable.Iter2
  .FromIterator[dotty1.collections.immutable.Iter2.Seq] { 
    private type +AA
    def apply(i: Int): Seq.this.AA
    def length: Int
  }
  @scala.annotation.internal.Child[dotty1.collections.immutable.Iter2.Nil.type]() @scala.annotation.internal.Child[
    dotty1.collections.immutable.Iter2.Cons
  ]() <trait> sealed trait List[A]() extends Object with dotty1.collections.immutable.Iter2.Seq[List.this.A] with 
    dotty1.collections.immutable.Iter2
  .FromIterator[dotty1.collections.immutable.Iter2.List] { 
    private type +A
    def isEmpty: Boolean
    def head: List.this.A
    def tail: dotty1.collections.immutable.Iter2.List[List.this.A]
    def iterator: dotty1.collections.immutable.Iter2.Iterator[List.this.A] = 
      new dotty1.collections.immutable.Iter2.ListIterator[List.this.A](this)
    def fromIterator[B](it: dotty1.collections.immutable.Iter2.Iterator[B]): dotty1.collections.immutable.Iter2.List[B]
       = 
    if it.$isInstanceOf$[dotty1.collections.immutable.Iter2.ListIterator[B]] then 
      {
        case val x2: dotty1.collections.immutable.Iter2.ListIterator[B] = 
          it.asInstanceOf[dotty1.collections.immutable.Iter2.ListIterator[B]]
        case val x3: dotty1.collections.immutable.Iter2.ListIterator[B] = 
          {
            Iter2$.this.ListIterator
            x2
          }
        case val x4: dotty1.collections.immutable.Iter2.List[B] = x3._1
        x4: dotty1.collections.immutable.Iter2.List[B]
      }
     else 
      if it.hasNext then 
        {
          Iter2$.this.Cons
          new dotty1.collections.immutable.Iter2.Cons[B](it.next, this.fromIterator[B](it))
        }
       else dotty1.collections.immutable.Iter2.Nil
    def apply(i: Int): List.this.A = 
      {
        require(this.isEmpty.unary_!)
        if i.==(0) then this.head else this.tail.apply(i.-(1))
      }
    def length: Int = if this.isEmpty then 0 else 1.+(this.tail.length)
  }
  class View[A](it: dotty1.collections.immutable.Iter2.Iterator[A]) extends Object() with 
    dotty1.collections.immutable.Iter2
  .Iterable[View.this.A] with dotty1.collections.immutable.Iter2.FromIterator[dotty1.collections.immutable.Iter2.View] {
     
    private type +A
    private val it: dotty1.collections.immutable.Iter2.Iterator[View.this.A]
    def iterator: dotty1.collections.immutable.Iter2.Iterator[View.this.A] = View.this.it.copy
    def fromIterator[B](it: dotty1.collections.immutable.Iter2.Iterator[B]): dotty1.collections.immutable.Iter2.View[B]
       = 
    new dotty1.collections.immutable.Iter2.View[B](it)
  }
  case class Cons[A](x: A, xs: dotty1.collections.immutable.Iter2.List[A]) extends Object() with 
    dotty1.collections.immutable.Iter2
  .List[Cons.this.A] with Product { 
    def productIterator: Iterator[Any] = super[Product].productIterator
    private type +A
    <accessor> def x: Cons.this.A
    <accessor> def xs: dotty1.collections.immutable.Iter2.List[Cons.this.A]
    def isEmpty: Boolean = false
    def head: Cons.this.A = Cons.this.x
    def tail: dotty1.collections.immutable.Iter2.List[Cons.this.A] = Cons.this.xs
    def copy[A](x: A, xs: dotty1.collections.immutable.Iter2.List[A]): dotty1.collections.immutable.Iter2.Cons[A] = 
      new dotty1.collections.immutable.Iter2.Cons[A](x, xs)
    def copy$default$1[A]: Cons.this.A = Cons.this.x: => Cons.this.A(Cons.this.x) @uncheckedVariance
    def copy$default$2[A]: dotty1.collections.immutable.Iter2.List[Cons.this.A] = 
      Cons.this.xs: => dotty1.collections.immutable.Iter2.List[Cons.this.A](Cons.this.xs) @uncheckedVariance
    def _1: Cons.this.A = this.x
    def _2: dotty1.collections.immutable.Iter2.List[Cons.this.A] = this.xs
    override def hashCode(): Int = 
      {
        val valify4: Int = scala.runtime.Statics#mix(-1034824059, scala.runtime.Statics#anyHash(Cons.this.x))
        val valify5: Int = scala.runtime.Statics#mix(valify4, scala.runtime.Statics#anyHash(Cons.this.xs))
        scala.runtime.Statics#finalizeHash(valify5, 2)
      }
    override def equals(x$0: Any): Boolean = 
      this.eq(x$0.asInstanceOf[Object]).||(
        if x$0.$isInstanceOf$[dotty1.collections.immutable.Iter2.Cons[Cons.this.A]] then 
          {
            case val x7: dotty1.collections.immutable.Iter2.Cons[Cons.this.A] = 
              x$0.asInstanceOf[dotty1.collections.immutable.Iter2.Cons[Cons.this.A]]
            this.x.==(x7.x).&&(this.xs.==(x7.xs))
          }
         else 
          if x$0.$isInstanceOf$[Any] then 
            {
              x$0.asInstanceOf[Any]
              false
            }
           else throw new MatchError(x$0)
      )
    override def toString(): String = scala.runtime.ScalaRunTime._toString(this)
    override def canEqual(that: Any): Boolean = that.isInstanceOf[dotty1.collections.immutable.Iter2.Cons[Cons.this.A]]
    override def productArity: Int = 2
    override def productPrefix: String = "Cons"
    override def productElement(n: Int): Any = 
      if 0.==(n) then this._1 else if 1.==(n) then this._2 else throw new IndexOutOfBoundsException(n.toString())
  }
  final lazy module val Cons: dotty1.collections.immutable.Iter2.Cons = new dotty1.collections.immutable.Iter2.Cons()
  final module class Cons() extends Object() { 
    def apply[A](x: A, xs: dotty1.collections.immutable.Iter2.List[A]): dotty1.collections.immutable.Iter2.Cons[A] = 
      new dotty1.collections.immutable.Iter2.Cons[A](x, xs)
    def unapply[A](x$1: dotty1.collections.immutable.Iter2.Cons[A]): dotty1.collections.immutable.Iter2.Cons[A] = x$1
  }
  final lazy module case val Nil: dotty1.collections.immutable.Iter2.Nil = new dotty1.collections.immutable.Iter2.Nil()
  final module case class Nil() extends Object() with dotty1.collections.immutable.Iter2.List[Nothing] with Product { 
    def productIterator: Iterator[Any] = super[Product].productIterator
    def isEmpty: Boolean = true
    def head: Nothing = ???
    def tail: dotty1.collections.immutable.Iter2.List[Nothing] = ???
    override def hashCode(): Int = scala.runtime.Statics#finalizeHash(-1034502265, 0)
    override def toString(): String = "Nil"
    override def canEqual(that: Any): Boolean = that.isInstanceOf[dotty1.collections.immutable.Iter2.Nil]
    override def productArity: Int = 0
    override def productPrefix: String = "Nil"
    override def productElement(n: Int): Any = throw new IndexOutOfBoundsException(n.toString())
  }
  class ArrayBuffer[A]  private(initElems: Array[AnyRef], initLen: Int) extends Object() with 
    dotty1.collections.immutable.Iter2
  .Seq[ArrayBuffer.this.A] with dotty1.collections.immutable.Iter2.FromIterator[
    dotty1.collections.immutable.Iter2.ArrayBuffer
  ] { 
    private type A
    private val initElems: Array[AnyRef]
    private val initLen: Int
    def <init>[A](): Unit = 
      {
        this[ArrayBuffer.this.A](
          dotty.runtime.Arrays.newArray[Array[AnyRef]](classOf[class Object], classOf[class Array], [16 : Int])
        , 0)
        ()
      }
    def <init>[A](it: dotty1.collections.immutable.Iter2.ArrayIterator[A]): Unit = 
      {
        this[ArrayBuffer.this.A](it.elems, it.len)
        ()
      }
    private <accessor> def elems: Array[AnyRef] = ArrayBuffer.this.initElems
    private <accessor> def elems_=(x$1: Array[AnyRef]): Unit = ()
    private <accessor> def len: Int = 0
    private <accessor> def len_=(x$1: Int): Unit = ()
    def iterator: dotty1.collections.immutable.Iter2.Iterator[ArrayBuffer.this.A] = 
      refArrayOps[Object](this.elems).iterator.take(this.len).asInstanceOf[
        dotty1.collections.immutable.Iter2.Iterator[ArrayBuffer.this.A]
      ]
    override def buildIterator: dotty1.collections.immutable.Iter2.Iterator[ArrayBuffer.this.A] = 
      new dotty1.collections.immutable.Iter2.ArrayIterator[Nothing](this.elems, this.len).asInstanceOf[
        dotty1.collections.immutable.Iter2.Iterator[ArrayBuffer.this.A]
      ]
    def fromIterator[B](it: dotty1.collections.immutable.Iter2.Iterator[B]): 
      dotty1.collections.immutable.Iter2.ArrayBuffer[B]
     = 
      new dotty1.collections.immutable.Iter2.ArrayBuffer[B](
        dotty1.collections.immutable.Iter2.ArrayIterator.fromIterator[B](it)
      )
    def apply(i: Int): ArrayBuffer.this.A = this.elems.apply(i).asInstanceOf[ArrayBuffer.this.A]
    def length: Int = this.len
  }
  final class IterableTransforms[A, C <: dotty1.collections.immutable.Iter2.Iterable](
    c: dotty1.collections.immutable.Iter2.Iterable[A] & dotty1.collections.immutable.Iter2.FromIterator[C]
  ) extends AnyVal() { 
    private type A
    private type C <: dotty1.collections.immutable.Iter2.Iterable
    <accessor> def c: 
      dotty1.collections.immutable.Iter2.Iterable[IterableTransforms.this.A] & 
        dotty1.collections.immutable.Iter2.FromIterator[IterableTransforms.this.C]
    def map[B](f: IterableTransforms.this.A => B): IterableTransforms.this.C[B] = 
      dotty1.collections.immutable.Iter2.IterableTransforms.map$extension[B, IterableTransforms.this.A, 
        IterableTransforms.this.C
      ](this)(f)
    def flatMap[B](f: IterableTransforms.this.A => dotty1.collections.immutable.Iter2.IterableOnce[B]): 
      IterableTransforms.this.C[B]
     = 
      dotty1.collections.immutable.Iter2.IterableTransforms.flatMap$extension[B, IterableTransforms.this.A, 
        IterableTransforms.this.C
      ](this)(f)
    def ++[B >: IterableTransforms.this.A](xs: dotty1.collections.immutable.Iter2.IterableOnce[B]): 
      IterableTransforms.this.C[B]
     = 
      dotty1.collections.immutable.Iter2.IterableTransforms.++$extension[B, IterableTransforms.this.A, 
        IterableTransforms.this.C
      ](this)(xs)
    def drop(n: Int): IterableTransforms.this.C[IterableTransforms.this.A] = 
      dotty1.collections.immutable.Iter2.IterableTransforms.drop$extension[IterableTransforms.this.A, 
        IterableTransforms.this.C
      ](this)(n)
    def head: IterableTransforms.this.A = 
      dotty1.collections.immutable.Iter2.IterableTransforms.head$extension[IterableTransforms.this.A, 
        IterableTransforms.this.C
      ](this)
    def zip[B](xs: dotty1.collections.immutable.Iter2.IterableOnce[B]): 
      IterableTransforms.this.C[(IterableTransforms.this.A, B)]
     = 
      dotty1.collections.immutable.Iter2.IterableTransforms.zip$extension[B, IterableTransforms.this.A, 
        IterableTransforms.this.C
      ](this)(xs)
    override def hashCode(): Int = 
      dotty1.collections.immutable.Iter2.IterableTransforms.hashCode$extension[IterableTransforms.this.A, 
        IterableTransforms.this.C
      ](this)()
    override def equals(x$0: Any): Boolean = 
      dotty1.collections.immutable.Iter2.IterableTransforms.equals$extension[IterableTransforms.this.A, 
        IterableTransforms.this.C
      ](this)(x$0)
  }
  final lazy module val IterableTransforms: dotty1.collections.immutable.Iter2.IterableTransforms = 
    new dotty1.collections.immutable.Iter2.IterableTransforms()
  final module class IterableTransforms() extends Object() { 
    final def map$extension[B, A, C <: dotty1.collections.immutable.Iter2.Iterable](
      $this: dotty1.collections.immutable.Iter2.IterableTransforms[A, C]
    )(f: A => B): dotty1.collections.immutable.Iter2.Iterable[B] = 
      $this.c.fromIterator[B]($this.c.buildIterator.map[B](f))
    final def flatMap$extension[B, A, C <: dotty1.collections.immutable.Iter2.Iterable](
      $this: dotty1.collections.immutable.Iter2.IterableTransforms[A, C]
    )(f: A => dotty1.collections.immutable.Iter2.IterableOnce[B]): dotty1.collections.immutable.Iter2.Iterable[B] = 
      $this.c.fromIterator[B](
        $this.c.buildIterator.flatMap[B](
          {
            def $anonfun(_$1: A): dotty1.collections.immutable.Iter2.IterableOnce[B] = f.apply(_$1).buildIterator
            closure($anonfun)
          }
        )
      )
    final def ++$extension[B >: A, A, C <: dotty1.collections.immutable.Iter2.Iterable](
      $this: dotty1.collections.immutable.Iter2.IterableTransforms[A, C]
    )(xs: dotty1.collections.immutable.Iter2.IterableOnce[B]): dotty1.collections.immutable.Iter2.Iterable[B] = 
      $this.c.fromIterator[B]($this.c.buildIterator.++[B](xs.buildIterator))
    final def drop$extension[A, C <: dotty1.collections.immutable.Iter2.Iterable](
      $this: dotty1.collections.immutable.Iter2.IterableTransforms[A, C]
    )(n: Int): dotty1.collections.immutable.Iter2.Iterable[A] = $this.c.fromIterator[A]($this.c.buildIterator.drop(n))
    final def head$extension[A, C <: dotty1.collections.immutable.Iter2.Iterable](
      $this: dotty1.collections.immutable.Iter2.IterableTransforms[A, C]
    ): A = $this.c.iterator.next
    final def zip$extension[B, A, C <: dotty1.collections.immutable.Iter2.Iterable](
      $this: dotty1.collections.immutable.Iter2.IterableTransforms[A, C]
    )(xs: dotty1.collections.immutable.Iter2.IterableOnce[B]): dotty1.collections.immutable.Iter2.Iterable[(A, B)] = 
      $this.c.fromIterator[(A, B)]($this.c.iterator.zip[B](xs.iterator))
    final def hashCode$extension[A, C <: dotty1.collections.immutable.Iter2.Iterable](
      $this: dotty1.collections.immutable.Iter2.IterableTransforms[A, C]
    )(): Int = $this.c.hashCode()
    final def equals$extension[A, C <: dotty1.collections.immutable.Iter2.Iterable](
      $this: dotty1.collections.immutable.Iter2.IterableTransforms[A, C]
    )(x$0: Any): Boolean = 
      if x$0.$isInstanceOf$[dotty1.collections.immutable.Iter2.IterableTransforms[A, C]] then 
        {
          case val x12: dotty1.collections.immutable.Iter2.IterableTransforms[A, C] = 
            x$0.asInstanceOf[dotty1.collections.immutable.Iter2.IterableTransforms[A, C]]
          $this.c.==(x12.c)
        }
       else 
        if x$0.$isInstanceOf$[Any] then 
          {
            x$0.asInstanceOf[Any]
            false
          }
         else throw new MatchError(x$0)
  }
  implicit def IterableTransforms[A, C <: dotty1.collections.immutable.Iter2.Iterable](
    c: dotty1.collections.immutable.Iter2.Iterable[A] & dotty1.collections.immutable.Iter2.FromIterator[C]
  ): dotty1.collections.immutable.Iter2.IterableTransforms[A, C] = 
    new dotty1.collections.immutable.Iter2.IterableTransforms[A, C](c)
  final class SeqTransforms[SA, C <: dotty1.collections.immutable.Iter2.Seq](
    c: dotty1.collections.immutable.Iter2.Seq[SA] & dotty1.collections.immutable.Iter2.FromIterator[C]
  ) extends AnyVal() { 
    private type SA
    private type C <: dotty1.collections.immutable.Iter2.Seq
    <accessor> def c: 
      dotty1.collections.immutable.Iter2.Seq[SeqTransforms.this.SA] & 
        dotty1.collections.immutable.Iter2.FromIterator[SeqTransforms.this.C]
    def reverse: SeqTransforms.this.C[SeqTransforms.this.SA] = 
      dotty1.collections.immutable.Iter2.SeqTransforms.reverse$extension[SeqTransforms.this.SA, SeqTransforms.this.C](
        this
      )
    def indexWhere(p: SeqTransforms.this.SA => Boolean): Int = 
      dotty1.collections.immutable.Iter2.SeqTransforms.indexWhere$extension[SeqTransforms.this.SA, SeqTransforms.this.C]
        (
      this)(p)
    override def hashCode(): Int = 
      dotty1.collections.immutable.Iter2.SeqTransforms.hashCode$extension[SeqTransforms.this.SA, SeqTransforms.this.C](
        this
      )()
    override def equals(x$0: Any): Boolean = 
      dotty1.collections.immutable.Iter2.SeqTransforms.equals$extension[SeqTransforms.this.SA, SeqTransforms.this.C](
        this
      )(x$0)
  }
  final lazy module val SeqTransforms: dotty1.collections.immutable.Iter2.SeqTransforms = 
    new dotty1.collections.immutable.Iter2.SeqTransforms()
  final module class SeqTransforms() extends Object() { 
    final def reverse$extension[SA, C <: dotty1.collections.immutable.Iter2.Seq](
      $this: dotty1.collections.immutable.Iter2.SeqTransforms[SA, C]
    ): dotty1.collections.immutable.Iter2.Seq[SA] = 
      {
        val elems: Array[AnyRef] = 
          dotty.runtime.Arrays.newArray[Array[AnyRef]](classOf[class Object], classOf[class Array], 
            [$this.c.length : Int]
          )
        var i: Int = elems.length
        val it: dotty1.collections.immutable.Iter2.Iterator[SA] = $this.c.iterator
        {
          def while$(): Unit = 
            if it.hasNext then 
              {
                {
                  val valify7: Int = i.-(1)
                  i = valify7
                  elems.update(valify7, it.next.asInstanceOf[AnyRef])
                }
                while$()
              }
             else ()
          while$()
        }
        val xzz: dotty1.collections.immutable.Iter2.Seq[SA] = 
          $this.c.fromIterator[SA](
            {
              dotty1.collections.immutable.Iter2.ArrayIterator
              new dotty1.collections.immutable.Iter2.ArrayIterator[SA](elems, $this.c.length)
            }
          )
        xzz: dotty1.collections.immutable.Iter2.Seq[SA]
      }
    final def indexWhere$extension[SA, C <: dotty1.collections.immutable.Iter2.Seq](
      $this: dotty1.collections.immutable.Iter2.SeqTransforms[SA, C]
    )(p: SA => Boolean): Int = $this.c.iterator.indexWhere(p)
    final def hashCode$extension[SA, C <: dotty1.collections.immutable.Iter2.Seq](
      $this: dotty1.collections.immutable.Iter2.SeqTransforms[SA, C]
    )(): Int = $this.c.hashCode()
    final def equals$extension[SA, C <: dotty1.collections.immutable.Iter2.Seq](
      $this: dotty1.collections.immutable.Iter2.SeqTransforms[SA, C]
    )(x$0: Any): Boolean = 
      if x$0.$isInstanceOf$[dotty1.collections.immutable.Iter2.SeqTransforms[SA, C]] then 
        {
          case val x15: dotty1.collections.immutable.Iter2.SeqTransforms[SA, C] = 
            x$0.asInstanceOf[dotty1.collections.immutable.Iter2.SeqTransforms[SA, C]]
          $this.c.==(x15.c)
        }
       else 
        if x$0.$isInstanceOf$[Any] then 
          {
            x$0.asInstanceOf[Any]
            false
          }
         else throw new MatchError(x$0)
  }
  implicit def SeqTransforms[SA, C <: dotty1.collections.immutable.Iter2.Seq](
    c: dotty1.collections.immutable.Iter2.Seq[SA] & dotty1.collections.immutable.Iter2.FromIterator[C]
  ): dotty1.collections.immutable.Iter2.SeqTransforms[SA, C] = 
    new dotty1.collections.immutable.Iter2.SeqTransforms[SA, C](c)
  case class ListIterator[A](xs: dotty1.collections.immutable.Iter2.List[A]) extends Object() with 
    dotty1.collections.immutable.Iter2
  .Iterator[ListIterator.this.A] with Product { 
    def productIterator: Iterator[Any] = super[Product].productIterator
    private type +A
    <accessor> def xs: dotty1.collections.immutable.Iter2.List[ListIterator.this.A]
    private var current: dotty1.collections.immutable.Iter2.List[ListIterator.this.A] = ListIterator.this.xs
    def hasNext: Boolean = this.current.isEmpty.unary_!
    def next: ListIterator.this.A = 
      {
        val res: ListIterator.this.A = this.current.head
        this.current = this.current.tail
        res: ListIterator.this.A
      }
    def copy[A](xs: dotty1.collections.immutable.Iter2.List[A]): dotty1.collections.immutable.Iter2.ListIterator[A] = 
      new dotty1.collections.immutable.Iter2.ListIterator[A](xs)
    def copy$default$1[A]: dotty1.collections.immutable.Iter2.List[ListIterator.this.A] = 
      ListIterator.this.xs: 
        => dotty1.collections.immutable.Iter2.List[ListIterator.this.A](ListIterator.this.xs) @uncheckedVariance
    def _1: dotty1.collections.immutable.Iter2.List[ListIterator.this.A] = this.xs
    override def hashCode(): Int = 
      {
        val valify11: Int = scala.runtime.Statics#mix(-1986645376, scala.runtime.Statics#anyHash(ListIterator.this.xs))
        scala.runtime.Statics#finalizeHash(valify11, 1)
      }
    override def equals(x$0: Any): Boolean = 
      this.eq(x$0.asInstanceOf[Object]).||(
        if x$0.$isInstanceOf$[dotty1.collections.immutable.Iter2.ListIterator[ListIterator.this.A]] then 
          {
            case val x18: dotty1.collections.immutable.Iter2.ListIterator[ListIterator.this.A] = 
              x$0.asInstanceOf[dotty1.collections.immutable.Iter2.ListIterator[ListIterator.this.A]]
            this.xs.==(x18.xs)
          }
         else 
          if x$0.$isInstanceOf$[Any] then 
            {
              x$0.asInstanceOf[Any]
              false
            }
           else throw new MatchError(x$0)
      )
    override def toString(): String = scala.runtime.ScalaRunTime._toString(this)
    override def canEqual(that: Any): Boolean = 
      that.isInstanceOf[dotty1.collections.immutable.Iter2.ListIterator[ListIterator.this.A]]
    override def productArity: Int = 1
    override def productPrefix: String = "ListIterator"
    override def productElement(n: Int): Any = 
      if 0.==(n) then this._1 else throw new IndexOutOfBoundsException(n.toString())
  }
  final lazy module val ListIterator: dotty1.collections.immutable.Iter2.ListIterator = 
    new dotty1.collections.immutable.Iter2.ListIterator()
  final module class ListIterator() extends Object() { 
    def apply[A](xs: dotty1.collections.immutable.Iter2.List[A]): dotty1.collections.immutable.Iter2.ListIterator[A] = 
      new dotty1.collections.immutable.Iter2.ListIterator[A](xs)
    def unapply[A](x$1: dotty1.collections.immutable.Iter2.ListIterator[A]): 
      dotty1.collections.immutable.Iter2.ListIterator[A]
     = x$1
  }
  case class ArrayIterator[A](elems: Array[AnyRef], len: Int) extends Object() with dotty1.collections.immutable.Iter2.
    Iterator
  [ArrayIterator.this.A] with Product { 
    def productIterator: Iterator[Any] = super[Product].productIterator
    private type +A
    <accessor> def elems: Array[AnyRef]
    <accessor> def len: Int
    private def elem(i: Int): ArrayIterator.this.A = 
      ArrayIterator.this.elems.apply(i).asInstanceOf[ArrayIterator.this.A]
    private <accessor> def cur: Int = 0
    private <accessor> def cur_=(x$1: Int): Unit = ()
    def hasNext: Boolean = this.cur.<(ArrayIterator.this.len)
    def next: ArrayIterator.this.A = 
      {
        val res: ArrayIterator.this.A = this.elem(this.cur)
        this.cur_=(1.+(this.cur))
        res: ArrayIterator.this.A
      }
    override def foreach(f: ArrayIterator.this.A => Unit): Unit = 
      scala.runtime.RichInt.until$extension0(intWrapper(0))(ArrayIterator.this.len).foreach[Unit](
        {
          def $anonfun(i: Int): Unit = f.apply(this.elem(i))
          closure($anonfun)
        }
      )
    override def map[B](f: ArrayIterator.this.A => B): dotty1.collections.immutable.Iter2.ArrayIterator[B] = 
      {
        var mapped: Array[AnyRef] = ArrayIterator.this.elems
        scala.runtime.RichInt.until$extension0(intWrapper(0))(ArrayIterator.this.len).foreach[Unit](
          {
            def $anonfun(i: Int): Unit = 
              {
                val x: ArrayIterator.this.A = this.elem(i)
                val y: AnyRef = dotty1.collections.immutable.Iter2.ArrayIterator.widen(f.apply(x))
                if dotty1.collections.immutable.Iter2.ArrayIterator.widen(x).ne(y) then 
                  {
                    if mapped.eq(ArrayIterator.this.elems) then 
                      mapped = 
                        dotty.runtime.Arrays.newArray[Array[AnyRef]](classOf[class Object], classOf[class Array], 
                          [ArrayIterator.this.len : Int]
                        )
                     else ()
                    mapped.update(i, y)
                  }
                 else ()
              }
            closure($anonfun)
          }
        )
        if mapped.eq(ArrayIterator.this.elems) then 
          this.asInstanceOf[dotty1.collections.immutable.Iter2.ArrayIterator[B]]
         else new dotty1.collections.immutable.Iter2.ArrayIterator[Nothing](mapped, ArrayIterator.this.len)
      }
    override def flatMap[B](f: ArrayIterator.this.A => dotty1.collections.immutable.Iter2.IterableOnce[B]): 
      dotty1.collections.immutable.Iter2.ArrayIterator[B]
     = 
      dotty1.collections.immutable.Iter2.ArrayIterator.flatten[B](
        this.map[dotty1.collections.immutable.Iter2.Iterator[B]](
          {
            def $anonfun(_$2: ArrayIterator.this.A): dotty1.collections.immutable.Iter2.Iterator[B] = 
              f.apply(_$2).buildIterator
            closure($anonfun)
          }
        )
      )
    override def ++[B >: ArrayIterator.this.A](that: dotty1.collections.immutable.Iter2.IterableOnce[B]): 
      dotty1.collections.immutable.Iter2.ArrayIterator[B]
     = 
      {
        var ilo1: dotty1.collections.immutable.Iter2.ArrayIterator[B]
        var ilo2: Array[AnyRef]
        var ilo3: Int
        case val x20: dotty1.collections.immutable.Iter2.ArrayIterator[B] @unchecked = 
          dotty1.collections.immutable.Iter2.ArrayIterator.fromIterator[B](that.iterator): 
            dotty1.collections.immutable.Iter2.ArrayIterator[B] @unchecked
        if x20.ne(null) then 
          {
            case val x21: dotty1.collections.immutable.Iter2.ArrayIterator[B] = 
              {
                dotty1.collections.immutable.Iter2.ArrayIterator
                x20
              }
            case val x22: Array[AnyRef] = x21._1
            case val x23: Int = x21._2
            ilo1 = x20
            ilo2 = x22
            ilo3 = x23
            ()
          }
         else throw new MatchError(x20)
        val len2: Int = ilo3
        if ArrayIterator.this.len.==(0) then ilo1 else 
          if len2.==(0) then this else 
            {
              val resLen: Int = ArrayIterator.this.len.+(len2)
              val resElems: Array[AnyRef] = 
                dotty.runtime.Arrays.newArray[Array[AnyRef]](classOf[class Object], classOf[class Array], [resLen : Int]
                  )
              Array.copy(ArrayIterator.this.elems, 0, resElems, 0, ArrayIterator.this.len)
              Array.copy(ilo2, 0, resElems, ArrayIterator.this.len, len2)
              new dotty1.collections.immutable.Iter2.ArrayIterator[Nothing](resElems, resLen)
            }
      }
    def copy[A](elems: Array[AnyRef], len: Int): dotty1.collections.immutable.Iter2.ArrayIterator[A] = 
      new dotty1.collections.immutable.Iter2.ArrayIterator[A](elems, len)
    def copy$default$1[A]: Array[AnyRef] = 
      ArrayIterator.this.elems: => Array[AnyRef](ArrayIterator.this.elems) @uncheckedVariance
    def copy$default$2[A]: Int = ArrayIterator.this.len: => Int(ArrayIterator.this.len) @uncheckedVariance
    def _1: Array[AnyRef] = this.elems
    def _2: Int = this.len
    override def hashCode(): Int = 
      {
        val valify23: Int = 
          scala.runtime.Statics#mix(1454198035, scala.runtime.Statics#anyHash(ArrayIterator.this.elems))
        val valify24: Int = scala.runtime.Statics#mix(valify23, ArrayIterator.this.len)
        scala.runtime.Statics#finalizeHash(valify24, 2)
      }
    override def equals(x$0: Any): Boolean = 
      this.eq(x$0.asInstanceOf[Object]).||(
        if x$0.$isInstanceOf$[dotty1.collections.immutable.Iter2.ArrayIterator[ArrayIterator.this.A]] then 
          {
            case val x26: dotty1.collections.immutable.Iter2.ArrayIterator[ArrayIterator.this.A] = 
              x$0.asInstanceOf[dotty1.collections.immutable.Iter2.ArrayIterator[ArrayIterator.this.A]]
            this.elems.==(x26.elems).&&(this.len.==(x26.len))
          }
         else 
          if x$0.$isInstanceOf$[Any] then 
            {
              x$0.asInstanceOf[Any]
              false
            }
           else throw new MatchError(x$0)
      )
    override def toString(): String = scala.runtime.ScalaRunTime._toString(this)
    override def canEqual(that: Any): Boolean = 
      that.isInstanceOf[dotty1.collections.immutable.Iter2.ArrayIterator[ArrayIterator.this.A]]
    override def productArity: Int = 2
    override def productPrefix: String = "ArrayIterator"
    override def productElement(n: Int): Any = 
      if 0.==(n) then this._1 else if 1.==(n) then this._2 else throw new IndexOutOfBoundsException(n.toString())
  }
  final lazy module val ArrayIterator: dotty1.collections.immutable.Iter2.ArrayIterator = 
    new dotty1.collections.immutable.Iter2.ArrayIterator()
  final module class ArrayIterator() extends Object() { 
    def apply[A](elems: Array[AnyRef], len: Int): dotty1.collections.immutable.Iter2.ArrayIterator[A] = 
      new dotty1.collections.immutable.Iter2.ArrayIterator[A](elems, len)
    def unapply[A](x$1: dotty1.collections.immutable.Iter2.ArrayIterator[A]): 
      dotty1.collections.immutable.Iter2.ArrayIterator[A]
     = x$1
    private def widen(x: Any): AnyRef = x.asInstanceOf[AnyRef]
    def fromIterator[A](it: dotty1.collections.immutable.Iter2.Iterator[A]): 
      dotty1.collections.immutable.Iter2.ArrayIterator[A]
     = 
      if it.$isInstanceOf$[dotty1.collections.immutable.Iter2.ArrayIterator[A]] then 
        {
          case val x29: dotty1.collections.immutable.Iter2.ArrayIterator[A] = 
            it.asInstanceOf[dotty1.collections.immutable.Iter2.ArrayIterator[A]]
          x29: dotty1.collections.immutable.Iter2.ArrayIterator[A]
        }
       else 
        {
          var elems: Array[AnyRef] = 
            dotty.runtime.Arrays.newArray[Array[AnyRef]](classOf[class Object], classOf[class Array], [32 : Int])
          var len: Int = 0
          def ensureCapacity(): Unit = 
            {
              def while$(): Unit = 
                if len.>(elems.length) then 
                  {
                    {
                      val newElems: Array[AnyRef] = 
                        dotty.runtime.Arrays.newArray[Array[AnyRef]](classOf[class Object], classOf[class Array], 
                          [2.*(elems.length) : Int]
                        )
                      Array.copy(elems, 0, newElems, 0, elems.length)
                      elems = newElems
                    }
                    while$()
                  }
                 else ()
              while$()
            }
          {
            def while$(): Unit = 
              if it.hasNext then 
                {
                  {
                    val valify25: Int = 1.+(len)
                    len = valify25
                    ensureCapacity()
                    elems.update(valify25.-(1), dotty1.collections.immutable.Iter2.ArrayIterator.widen(it.next))
                  }
                  while$()
                }
               else ()
            while$()
          }
          dotty1.collections.immutable.Iter2.ArrayIterator
          new dotty1.collections.immutable.Iter2.ArrayIterator[Nothing](elems, len)
        }
    def flatten[A](its: dotty1.collections.immutable.Iter2.ArrayIterator[dotty1.collections.immutable.Iter2.Iterator[A]]
      )
    : dotty1.collections.immutable.Iter2.ArrayIterator[A] = 
      {
        val valify30: 
          dotty1.collections.immutable.Iter2.ArrayIterator[dotty1.collections.immutable.Iter2.ArrayIterator[A]]
         = 
          its.map[dotty1.collections.immutable.Iter2.ArrayIterator[A]](
            {
              def $anonfun(it: dotty1.collections.immutable.Iter2.Iterator[A]): 
                dotty1.collections.immutable.Iter2.ArrayIterator[A]
               = dotty1.collections.immutable.Iter2.ArrayIterator.fromIterator[A](it)
              closure($anonfun)
            }
          )
        var totalLen: Int = 0
        valify30.foreach(
          {
            def $anonfun(_$3: dotty1.collections.immutable.Iter2.ArrayIterator[A]): Unit = 
              totalLen = totalLen.+(_$3.len)
            closure($anonfun)
          }
        )
        val allElems: Array[AnyRef] = 
          dotty.runtime.Arrays.newArray[Array[AnyRef]](classOf[class Object], classOf[class Array], [totalLen : Int])
        var j: Int = 0
        valify30.foreach(
          {
            def $anonfun(it: dotty1.collections.immutable.Iter2.ArrayIterator[A]): Unit = 
              {
                Array.copy(it.elems, 0, allElems, j, it.len)
                j = j.+(it.len)
              }
            closure($anonfun)
          }
        )
        new dotty1.collections.immutable.Iter2.ArrayIterator[Nothing](allElems, totalLen)
      }
  }
} of class class dotty.tools.dotc.ast.Trees$TypeDef # 933786
[======================>                ] completed (556/940, 62s)exception while typing package dotty1.collections.immutable {
  final lazy module val Iter2: dotty1.collections.immutable.Iter2 = new dotty1.collections.immutable.Iter2()
  @scala.annotation.internal.SourceFile(
    "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/Iter2.scala"
  ) final module class Iter2() extends Object() { 
    <trait> trait Iterator[A]() extends Object with dotty1.collections.immutable.Iter2.IterableOnce[Iterator.this.A] { 
      private type +A
      def hasNext: Boolean
      def next: Iterator.this.A
      def iterator: dotty1.collections.immutable.Iter2.Iterator[Iterator.this.A] = this
      def foreach(f: Iterator.this.A => Unit): Unit = ???
      def map[B](f: Iterator.this.A => B): dotty1.collections.immutable.Iter2.Iterator[B] = ???
      def flatMap[B](f: Iterator.this.A => dotty1.collections.immutable.Iter2.IterableOnce[B]): 
        dotty1.collections.immutable.Iter2.Iterator[B]
       = ???
      def ++[B >: Iterator.this.A](xs: dotty1.collections.immutable.Iter2.IterableOnce[B]): 
        dotty1.collections.immutable.Iter2.Iterator[B]
       = ???
      def drop(n: Int): dotty1.collections.immutable.Iter2.Iterator[Iterator.this.A] = ???
      def indexWhere(p: Iterator.this.A => Boolean): Int = 
        {
          var i: Int = 0
          {
            def while$(): Unit = 
              if this.hasNext then 
                {
                  {
                    if p.apply(this.next) then return i else ()
                    i = 1.+(i)
                  }
                  while$()
                }
               else ()
            while$()
          }
          -1
        }
      def zip[B](that: dotty1.collections.immutable.Iter2.Iterator[B]): 
        dotty1.collections.immutable.Iter2.Iterator[(Iterator.this.A, B)]
       = ???
      def copy: dotty1.collections.immutable.Iter2.Iterator[Iterator.this.A] = ???
    }
    <trait> trait IterableOnce[A]() extends Object { 
      private type +A
      def iterator: dotty1.collections.immutable.Iter2.Iterator[IterableOnce.this.A]
      def buildIterator: dotty1.collections.immutable.Iter2.Iterator[IterableOnce.this.A] = this.iterator
    }
    <trait> interface trait FromIterator[C <: dotty1.collections.immutable.Iter2.Iterable]() extends Object { 
      private type +C <: dotty1.collections.immutable.Iter2.Iterable
      def fromIterator[B](it: dotty1.collections.immutable.Iter2.Iterator[B]): FromIterator.this.C[B]
    }
    <trait> trait Iterable[IA]() extends Object with dotty1.collections.immutable.Iter2.IterableOnce[Iterable.this.IA]
       with 
    dotty1.collections.immutable.Iter2.FromIterator[dotty1.collections.immutable.Iter2.Iterable] { 
      private type +IA
      def view: dotty1.collections.immutable.Iter2.View[Iterable.this.IA] = 
        new dotty1.collections.immutable.Iter2.View[Iterable.this.IA](this.iterator)
    }
    <trait> interface trait Seq[AA]() extends Object with dotty1.collections.immutable.Iter2.Iterable[Seq.this.AA] with 
      dotty1.collections.immutable.Iter2
    .FromIterator[dotty1.collections.immutable.Iter2.Seq] { 
      private type +AA
      def apply(i: Int): Seq.this.AA
      def length: Int
    }
    @scala.annotation.internal.Child[dotty1.collections.immutable.Iter2.Nil.type]() @scala.annotation.internal.Child[
      dotty1.collections.immutable.Iter2.Cons
    ]() <trait> sealed trait List[A]() extends Object with dotty1.collections.immutable.Iter2.Seq[List.this.A] with 
      dotty1.collections.immutable.Iter2
    .FromIterator[dotty1.collections.immutable.Iter2.List] { 
      private type +A
      def isEmpty: Boolean
      def head: List.this.A
      def tail: dotty1.collections.immutable.Iter2.List[List.this.A]
      def iterator: dotty1.collections.immutable.Iter2.Iterator[List.this.A] = 
        new dotty1.collections.immutable.Iter2.ListIterator[List.this.A](this)
      def fromIterator[B](it: dotty1.collections.immutable.Iter2.Iterator[B]): 
        dotty1.collections.immutable.Iter2.List[B]
       = 
        if it.$isInstanceOf$[dotty1.collections.immutable.Iter2.ListIterator[B]] then 
          {
            case val x2: dotty1.collections.immutable.Iter2.ListIterator[B] = 
              it.asInstanceOf[dotty1.collections.immutable.Iter2.ListIterator[B]]
            case val x3: dotty1.collections.immutable.Iter2.ListIterator[B] = 
              {
                Iter2$.this.ListIterator
                x2
              }
            case val x4: dotty1.collections.immutable.Iter2.List[B] = x3._1
            x4: dotty1.collections.immutable.Iter2.List[B]
          }
         else 
          if it.hasNext then 
            {
              Iter2$.this.Cons
              new dotty1.collections.immutable.Iter2.Cons[B](it.next, this.fromIterator[B](it))
            }
           else dotty1.collections.immutable.Iter2.Nil
      def apply(i: Int): List.this.A = 
        {
          require(this.isEmpty.unary_!)
          if i.==(0) then this.head else this.tail.apply(i.-(1))
        }
      def length: Int = if this.isEmpty then 0 else 1.+(this.tail.length)
    }
    class View[A](it: dotty1.collections.immutable.Iter2.Iterator[A]) extends Object() with 
      dotty1.collections.immutable.Iter2
    .Iterable[View.this.A] with dotty1.collections.immutable.Iter2.FromIterator[dotty1.collections.immutable.Iter2.View]
       
    { 
      private type +A
      private val it: dotty1.collections.immutable.Iter2.Iterator[View.this.A]
      def iterator: dotty1.collections.immutable.Iter2.Iterator[View.this.A] = View.this.it.copy
      def fromIterator[B](it: dotty1.collections.immutable.Iter2.Iterator[B]): 
        dotty1.collections.immutable.Iter2.View[B]
       = new dotty1.collections.immutable.Iter2.View[B](it)
    }
    case class Cons[A](x: A, xs: dotty1.collections.immutable.Iter2.List[A]) extends Object() with 
      dotty1.collections.immutable.Iter2
    .List[Cons.this.A] with Product { 
      def productIterator: Iterator[Any] = super[Product].productIterator
      private type +A
      <accessor> def x: Cons.this.A
      <accessor> def xs: dotty1.collections.immutable.Iter2.List[Cons.this.A]
      def isEmpty: Boolean = false
      def head: Cons.this.A = Cons.this.x
      def tail: dotty1.collections.immutable.Iter2.List[Cons.this.A] = Cons.this.xs
      def copy[A](x: A, xs: dotty1.collections.immutable.Iter2.List[A]): dotty1.collections.immutable.Iter2.Cons[A] = 
        new dotty1.collections.immutable.Iter2.Cons[A](x, xs)
      def copy$default$1[A]: Cons.this.A = Cons.this.x: => Cons.this.A(Cons.this.x) @uncheckedVariance
      def copy$default$2[A]: dotty1.collections.immutable.Iter2.List[Cons.this.A] = 
        Cons.this.xs: => dotty1.collections.immutable.Iter2.List[Cons.this.A](Cons.this.xs) @uncheckedVariance
      def _1: Cons.this.A = this.x
      def _2: dotty1.collections.immutable.Iter2.List[Cons.this.A] = this.xs
      override def hashCode(): Int = 
        {
          val valify4: Int = scala.runtime.Statics#mix(-1034824059, scala.runtime.Statics#anyHash(Cons.this.x))
          val valify5: Int = scala.runtime.Statics#mix(valify4, scala.runtime.Statics#anyHash(Cons.this.xs))
          scala.runtime.Statics#finalizeHash(valify5, 2)
        }
      override def equals(x$0: Any): Boolean = 
        this.eq(x$0.asInstanceOf[Object]).||(
          if x$0.$isInstanceOf$[dotty1.collections.immutable.Iter2.Cons[Cons.this.A]] then 
            {
              case val x7: dotty1.collections.immutable.Iter2.Cons[Cons.this.A] = 
                x$0.asInstanceOf[dotty1.collections.immutable.Iter2.Cons[Cons.this.A]]
              this.x.==(x7.x).&&(this.xs.==(x7.xs))
            }
           else 
            if x$0.$isInstanceOf$[Any] then 
              {
                x$0.asInstanceOf[Any]
                false
              }
             else throw new MatchError(x$0)
        )
      override def toString(): String = scala.runtime.ScalaRunTime._toString(this)
      override def canEqual(that: Any): Boolean = 
        that.isInstanceOf[dotty1.collections.immutable.Iter2.Cons[Cons.this.A]]
      override def productArity: Int = 2
      override def productPrefix: String = "Cons"
      override def productElement(n: Int): Any = 
        if 0.==(n) then this._1 else if 1.==(n) then this._2 else throw new IndexOutOfBoundsException(n.toString())
    }
    final lazy module val Cons: dotty1.collections.immutable.Iter2.Cons = new dotty1.collections.immutable.Iter2.Cons()
    final module class Cons() extends Object() { 
      def apply[A](x: A, xs: dotty1.collections.immutable.Iter2.List[A]): dotty1.collections.immutable.Iter2.Cons[A] = 
        new dotty1.collections.immutable.Iter2.Cons[A](x, xs)
      def unapply[A](x$1: dotty1.collections.immutable.Iter2.Cons[A]): dotty1.collections.immutable.Iter2.Cons[A] = x$1
    }
    final lazy module case val Nil: dotty1.collections.immutable.Iter2.Nil = 
      new dotty1.collections.immutable.Iter2.Nil()
    final module case class Nil() extends Object() with dotty1.collections.immutable.Iter2.List[Nothing] with Product { 
      def productIterator: Iterator[Any] = super[Product].productIterator
      def isEmpty: Boolean = true
      def head: Nothing = ???
      def tail: dotty1.collections.immutable.Iter2.List[Nothing] = ???
      override def hashCode(): Int = scala.runtime.Statics#finalizeHash(-1034502265, 0)
      override def toString(): String = "Nil"
      override def canEqual(that: Any): Boolean = that.isInstanceOf[dotty1.collections.immutable.Iter2.Nil]
      override def productArity: Int = 0
      override def productPrefix: String = "Nil"
      override def productElement(n: Int): Any = throw new IndexOutOfBoundsException(n.toString())
    }
    class ArrayBuffer[A]  private(initElems: Array[AnyRef], initLen: Int) extends Object() with 
      dotty1.collections.immutable.Iter2
    .Seq[ArrayBuffer.this.A] with dotty1.collections.immutable.Iter2.FromIterator[
      dotty1.collections.immutable.Iter2.ArrayBuffer
    ] { 
      private type A
      private val initElems: Array[AnyRef]
      private val initLen: Int
      def <init>[A](): Unit = 
        {
          this[ArrayBuffer.this.A](
            dotty.runtime.Arrays.newArray[Array[AnyRef]](classOf[class Object], classOf[class Array], [16 : Int])
          , 0)
          ()
        }
      def <init>[A](it: dotty1.collections.immutable.Iter2.ArrayIterator[A]): Unit = 
        {
          this[ArrayBuffer.this.A](it.elems, it.len)
          ()
        }
      private <accessor> def elems: Array[AnyRef] = ArrayBuffer.this.initElems
      private <accessor> def elems_=(x$1: Array[AnyRef]): Unit = ()
      private <accessor> def len: Int = 0
      private <accessor> def len_=(x$1: Int): Unit = ()
      def iterator: dotty1.collections.immutable.Iter2.Iterator[ArrayBuffer.this.A] = 
        refArrayOps[Object](this.elems).iterator.take(this.len).asInstanceOf[
          dotty1.collections.immutable.Iter2.Iterator[ArrayBuffer.this.A]
        ]
      override def buildIterator: dotty1.collections.immutable.Iter2.Iterator[ArrayBuffer.this.A] = 
        new dotty1.collections.immutable.Iter2.ArrayIterator[Nothing](this.elems, this.len).asInstanceOf[
          dotty1.collections.immutable.Iter2.Iterator[ArrayBuffer.this.A]
        ]
      def fromIterator[B](it: dotty1.collections.immutable.Iter2.Iterator[B]): 
        dotty1.collections.immutable.Iter2.ArrayBuffer[B]
       = 
        new dotty1.collections.immutable.Iter2.ArrayBuffer[B](
          dotty1.collections.immutable.Iter2.ArrayIterator.fromIterator[B](it)
        )
      def apply(i: Int): ArrayBuffer.this.A = this.elems.apply(i).asInstanceOf[ArrayBuffer.this.A]
      def length: Int = this.len
    }
    final class IterableTransforms[A, C <: dotty1.collections.immutable.Iter2.Iterable](
      c: dotty1.collections.immutable.Iter2.Iterable[A] & dotty1.collections.immutable.Iter2.FromIterator[C]
    ) extends AnyVal() { 
      private type A
      private type C <: dotty1.collections.immutable.Iter2.Iterable
      <accessor> def c: 
        dotty1.collections.immutable.Iter2.Iterable[IterableTransforms.this.A] & 
          dotty1.collections.immutable.Iter2.FromIterator[IterableTransforms.this.C]
      def map[B](f: IterableTransforms.this.A => B): IterableTransforms.this.C[B] = 
        dotty1.collections.immutable.Iter2.IterableTransforms.map$extension[B, IterableTransforms.this.A, 
          IterableTransforms.this.C
        ](this)(f)
      def flatMap[B](f: IterableTransforms.this.A => dotty1.collections.immutable.Iter2.IterableOnce[B]): 
        IterableTransforms.this.C[B]
       = 
        dotty1.collections.immutable.Iter2.IterableTransforms.flatMap$extension[B, IterableTransforms.this.A, 
          IterableTransforms.this.C
        ](this)(f)
      def ++[B >: IterableTransforms.this.A](xs: dotty1.collections.immutable.Iter2.IterableOnce[B]): 
        IterableTransforms.this.C[B]
       = 
        dotty1.collections.immutable.Iter2.IterableTransforms.++$extension[B, IterableTransforms.this.A, 
          IterableTransforms.this.C
        ](this)(xs)
      def drop(n: Int): IterableTransforms.this.C[IterableTransforms.this.A] = 
        dotty1.collections.immutable.Iter2.IterableTransforms.drop$extension[IterableTransforms.this.A, 
          IterableTransforms.this.C
        ](this)(n)
      def head: IterableTransforms.this.A = 
        dotty1.collections.immutable.Iter2.IterableTransforms.head$extension[IterableTransforms.this.A, 
          IterableTransforms.this.C
        ](this)
      def zip[B](xs: dotty1.collections.immutable.Iter2.IterableOnce[B]): 
        IterableTransforms.this.C[(IterableTransforms.this.A, B)]
       = 
        dotty1.collections.immutable.Iter2.IterableTransforms.zip$extension[B, IterableTransforms.this.A, 
          IterableTransforms.this.C
        ](this)(xs)
      override def hashCode(): Int = 
        dotty1.collections.immutable.Iter2.IterableTransforms.hashCode$extension[IterableTransforms.this.A, 
          IterableTransforms.this.C
        ](this)()
      override def equals(x$0: Any): Boolean = 
        dotty1.collections.immutable.Iter2.IterableTransforms.equals$extension[IterableTransforms.this.A, 
          IterableTransforms.this.C
        ](this)(x$0)
    }
    final lazy module val IterableTransforms: dotty1.collections.immutable.Iter2.IterableTransforms = 
      new dotty1.collections.immutable.Iter2.IterableTransforms()
    final module class IterableTransforms() extends Object() { 
      final def map$extension[B, A, C <: dotty1.collections.immutable.Iter2.Iterable](
        $this: dotty1.collections.immutable.Iter2.IterableTransforms[A, C]
      )(f: A => B): dotty1.collections.immutable.Iter2.Iterable[B] = 
        $this.c.fromIterator[B]($this.c.buildIterator.map[B](f))
      final def flatMap$extension[B, A, C <: dotty1.collections.immutable.Iter2.Iterable](
        $this: dotty1.collections.immutable.Iter2.IterableTransforms[A, C]
      )(f: A => dotty1.collections.immutable.Iter2.IterableOnce[B]): dotty1.collections.immutable.Iter2.Iterable[B] = 
        $this.c.fromIterator[B](
          $this.c.buildIterator.flatMap[B](
            {
              def $anonfun(_$1: A): dotty1.collections.immutable.Iter2.IterableOnce[B] = f.apply(_$1).buildIterator
              closure($anonfun)
            }
          )
        )
      final def ++$extension[B >: A, A, C <: dotty1.collections.immutable.Iter2.Iterable](
        $this: dotty1.collections.immutable.Iter2.IterableTransforms[A, C]
      )(xs: dotty1.collections.immutable.Iter2.IterableOnce[B]): dotty1.collections.immutable.Iter2.Iterable[B] = 
        $this.c.fromIterator[B]($this.c.buildIterator.++[B](xs.buildIterator))
      final def drop$extension[A, C <: dotty1.collections.immutable.Iter2.Iterable](
        $this: dotty1.collections.immutable.Iter2.IterableTransforms[A, C]
      )(n: Int): dotty1.collections.immutable.Iter2.Iterable[A] = $this.c.fromIterator[A]($this.c.buildIterator.drop(n))
      final def head$extension[A, C <: dotty1.collections.immutable.Iter2.Iterable](
        $this: dotty1.collections.immutable.Iter2.IterableTransforms[A, C]
      ): A = $this.c.iterator.next
      final def zip$extension[B, A, C <: dotty1.collections.immutable.Iter2.Iterable](
        $this: dotty1.collections.immutable.Iter2.IterableTransforms[A, C]
      )(xs: dotty1.collections.immutable.Iter2.IterableOnce[B]): dotty1.collections.immutable.Iter2.Iterable[(A, B)] = 
        $this.c.fromIterator[(A, B)]($this.c.iterator.zip[B](xs.iterator))
      final def hashCode$extension[A, C <: dotty1.collections.immutable.Iter2.Iterable](
        $this: dotty1.collections.immutable.Iter2.IterableTransforms[A, C]
      )(): Int = $this.c.hashCode()
      final def equals$extension[A, C <: dotty1.collections.immutable.Iter2.Iterable](
        $this: dotty1.collections.immutable.Iter2.IterableTransforms[A, C]
      )(x$0: Any): Boolean = 
        if x$0.$isInstanceOf$[dotty1.collections.immutable.Iter2.IterableTransforms[A, C]] then 
          {
            case val x12: dotty1.collections.immutable.Iter2.IterableTransforms[A, C] = 
              x$0.asInstanceOf[dotty1.collections.immutable.Iter2.IterableTransforms[A, C]]
            $this.c.==(x12.c)
          }
         else 
          if x$0.$isInstanceOf$[Any] then 
            {
              x$0.asInstanceOf[Any]
              false
            }
           else throw new MatchError(x$0)
    }
    implicit def IterableTransforms[A, C <: dotty1.collections.immutable.Iter2.Iterable](
      c: dotty1.collections.immutable.Iter2.Iterable[A] & dotty1.collections.immutable.Iter2.FromIterator[C]
    ): dotty1.collections.immutable.Iter2.IterableTransforms[A, C] = 
      new dotty1.collections.immutable.Iter2.IterableTransforms[A, C](c)
    final class SeqTransforms[SA, C <: dotty1.collections.immutable.Iter2.Seq](
      c: dotty1.collections.immutable.Iter2.Seq[SA] & dotty1.collections.immutable.Iter2.FromIterator[C]
    ) extends AnyVal() { 
      private type SA
      private type C <: dotty1.collections.immutable.Iter2.Seq
      <accessor> def c: 
        dotty1.collections.immutable.Iter2.Seq[SeqTransforms.this.SA] & 
          dotty1.collections.immutable.Iter2.FromIterator[SeqTransforms.this.C]
      def reverse: SeqTransforms.this.C[SeqTransforms.this.SA] = 
        dotty1.collections.immutable.Iter2.SeqTransforms.reverse$extension[SeqTransforms.this.SA, SeqTransforms.this.C](
          this
        )
      def indexWhere(p: SeqTransforms.this.SA => Boolean): Int = 
        dotty1.collections.immutable.Iter2.SeqTransforms.indexWhere$extension[SeqTransforms.this.SA, 
          SeqTransforms.this.C
        ](this)(p)
      override def hashCode(): Int = 
        dotty1.collections.immutable.Iter2.SeqTransforms.hashCode$extension[SeqTransforms.this.SA, SeqTransforms.this.C]
          (
        this)()
      override def equals(x$0: Any): Boolean = 
        dotty1.collections.immutable.Iter2.SeqTransforms.equals$extension[SeqTransforms.this.SA, SeqTransforms.this.C](
          this
        )(x$0)
    }
    final lazy module val SeqTransforms: dotty1.collections.immutable.Iter2.SeqTransforms = 
      new dotty1.collections.immutable.Iter2.SeqTransforms()
    final module class SeqTransforms() extends Object() { 
      final def reverse$extension[SA, C <: dotty1.collections.immutable.Iter2.Seq](
        $this: dotty1.collections.immutable.Iter2.SeqTransforms[SA, C]
      ): dotty1.collections.immutable.Iter2.Seq[SA] = 
        {
          val elems: Array[AnyRef] = 
            dotty.runtime.Arrays.newArray[Array[AnyRef]](classOf[class Object], classOf[class Array], 
              [$this.c.length : Int]
            )
          var i: Int = elems.length
          val it: dotty1.collections.immutable.Iter2.Iterator[SA] = $this.c.iterator
          {
            def while$(): Unit = 
              if it.hasNext then 
                {
                  {
                    val valify7: Int = i.-(1)
                    i = valify7
                    elems.update(valify7, it.next.asInstanceOf[AnyRef])
                  }
                  while$()
                }
               else ()
            while$()
          }
          val xzz: dotty1.collections.immutable.Iter2.Seq[SA] = 
            $this.c.fromIterator[SA](
              {
                dotty1.collections.immutable.Iter2.ArrayIterator
                new dotty1.collections.immutable.Iter2.ArrayIterator[SA](elems, $this.c.length)
              }
            )
          xzz: dotty1.collections.immutable.Iter2.Seq[SA]
        }
      final def indexWhere$extension[SA, C <: dotty1.collections.immutable.Iter2.Seq](
        $this: dotty1.collections.immutable.Iter2.SeqTransforms[SA, C]
      )(p: SA => Boolean): Int = $this.c.iterator.indexWhere(p)
      final def hashCode$extension[SA, C <: dotty1.collections.immutable.Iter2.Seq](
        $this: dotty1.collections.immutable.Iter2.SeqTransforms[SA, C]
      )(): Int = $this.c.hashCode()
      final def equals$extension[SA, C <: dotty1.collections.immutable.Iter2.Seq](
        $this: dotty1.collections.immutable.Iter2.SeqTransforms[SA, C]
      )(x$0: Any): Boolean = 
        if x$0.$isInstanceOf$[dotty1.collections.immutable.Iter2.SeqTransforms[SA, C]] then 
          {
            case val x15: dotty1.collections.immutable.Iter2.SeqTransforms[SA, C] = 
              x$0.asInstanceOf[dotty1.collections.immutable.Iter2.SeqTransforms[SA, C]]
            $this.c.==(x15.c)
          }
         else 
          if x$0.$isInstanceOf$[Any] then 
            {
              x$0.asInstanceOf[Any]
              false
            }
           else throw new MatchError(x$0)
    }
    implicit def SeqTransforms[SA, C <: dotty1.collections.immutable.Iter2.Seq](
      c: dotty1.collections.immutable.Iter2.Seq[SA] & dotty1.collections.immutable.Iter2.FromIterator[C]
    ): dotty1.collections.immutable.Iter2.SeqTransforms[SA, C] = 
      new dotty1.collections.immutable.Iter2.SeqTransforms[SA, C](c)
    case class ListIterator[A](xs: dotty1.collections.immutable.Iter2.List[A]) extends Object() with 
      dotty1.collections.immutable.Iter2
    .Iterator[ListIterator.this.A] with Product { 
      def productIterator: Iterator[Any] = super[Product].productIterator
      private type +A
      <accessor> def xs: dotty1.collections.immutable.Iter2.List[ListIterator.this.A]
      private var current: dotty1.collections.immutable.Iter2.List[ListIterator.this.A] = ListIterator.this.xs
      def hasNext: Boolean = this.current.isEmpty.unary_!
      def next: ListIterator.this.A = 
        {
          val res: ListIterator.this.A = this.current.head
          this.current = this.current.tail
          res: ListIterator.this.A
        }
      def copy[A](xs: dotty1.collections.immutable.Iter2.List[A]): dotty1.collections.immutable.Iter2.ListIterator[A] = 
        new dotty1.collections.immutable.Iter2.ListIterator[A](xs)
      def copy$default$1[A]: dotty1.collections.immutable.Iter2.List[ListIterator.this.A] = 
        ListIterator.this.xs: 
          => dotty1.collections.immutable.Iter2.List[ListIterator.this.A](ListIterator.this.xs) @uncheckedVariance
      def _1: dotty1.collections.immutable.Iter2.List[ListIterator.this.A] = this.xs
      override def hashCode(): Int = 
        {
          val valify11: Int = 
            scala.runtime.Statics#mix(-1986645376, scala.runtime.Statics#anyHash(ListIterator.this.xs))
          scala.runtime.Statics#finalizeHash(valify11, 1)
        }
      override def equals(x$0: Any): Boolean = 
        this.eq(x$0.asInstanceOf[Object]).||(
          if x$0.$isInstanceOf$[dotty1.collections.immutable.Iter2.ListIterator[ListIterator.this.A]] then 
            {
              case val x18: dotty1.collections.immutable.Iter2.ListIterator[ListIterator.this.A] = 
                x$0.asInstanceOf[dotty1.collections.immutable.Iter2.ListIterator[ListIterator.this.A]]
              this.xs.==(x18.xs)
            }
           else 
            if x$0.$isInstanceOf$[Any] then 
              {
                x$0.asInstanceOf[Any]
                false
              }
             else throw new MatchError(x$0)
        )
      override def toString(): String = scala.runtime.ScalaRunTime._toString(this)
      override def canEqual(that: Any): Boolean = 
        that.isInstanceOf[dotty1.collections.immutable.Iter2.ListIterator[ListIterator.this.A]]
      override def productArity: Int = 1
      override def productPrefix: String = "ListIterator"
      override def productElement(n: Int): Any = 
        if 0.==(n) then this._1 else throw new IndexOutOfBoundsException(n.toString())
    }
    final lazy module val ListIterator: dotty1.collections.immutable.Iter2.ListIterator = 
      new dotty1.collections.immutable.Iter2.ListIterator()
    final module class ListIterator() extends Object() { 
      def apply[A](xs: dotty1.collections.immutable.Iter2.List[A]): dotty1.collections.immutable.Iter2.ListIterator[A]
         = 
      new dotty1.collections.immutable.Iter2.ListIterator[A](xs)
      def unapply[A](x$1: dotty1.collections.immutable.Iter2.ListIterator[A]): 
        dotty1.collections.immutable.Iter2.ListIterator[A]
       = x$1
    }
    case class ArrayIterator[A](elems: Array[AnyRef], len: Int) extends Object() with dotty1.collections.immutable.Iter2
      .
    Iterator[ArrayIterator.this.A] with Product { 
      def productIterator: Iterator[Any] = super[Product].productIterator
      private type +A
      <accessor> def elems: Array[AnyRef]
      <accessor> def len: Int
      private def elem(i: Int): ArrayIterator.this.A = 
        ArrayIterator.this.elems.apply(i).asInstanceOf[ArrayIterator.this.A]
      private <accessor> def cur: Int = 0
      private <accessor> def cur_=(x$1: Int): Unit = ()
      def hasNext: Boolean = this.cur.<(ArrayIterator.this.len)
      def next: ArrayIterator.this.A = 
        {
          val res: ArrayIterator.this.A = this.elem(this.cur)
          this.cur_=(1.+(this.cur))
          res: ArrayIterator.this.A
        }
      override def foreach(f: ArrayIterator.this.A => Unit): Unit = 
        scala.runtime.RichInt.until$extension0(intWrapper(0))(ArrayIterator.this.len).foreach[Unit](
          {
            def $anonfun(i: Int): Unit = f.apply(this.elem(i))
            closure($anonfun)
          }
        )
      override def map[B](f: ArrayIterator.this.A => B): dotty1.collections.immutable.Iter2.ArrayIterator[B] = 
        {
          var mapped: Array[AnyRef] = ArrayIterator.this.elems
          scala.runtime.RichInt.until$extension0(intWrapper(0))(ArrayIterator.this.len).foreach[Unit](
            {
              def $anonfun(i: Int): Unit = 
                {
                  val x: ArrayIterator.this.A = this.elem(i)
                  val y: AnyRef = dotty1.collections.immutable.Iter2.ArrayIterator.widen(f.apply(x))
                  if dotty1.collections.immutable.Iter2.ArrayIterator.widen(x).ne(y) then 
                    {
                      if mapped.eq(ArrayIterator.this.elems) then 
                        mapped = 
                          dotty.runtime.Arrays.newArray[Array[AnyRef]](classOf[class Object], classOf[class Array], 
                            [ArrayIterator.this.len : Int]
                          )
                       else ()
                      mapped.update(i, y)
                    }
                   else ()
                }
              closure($anonfun)
            }
          )
          if mapped.eq(ArrayIterator.this.elems) then 
            this.asInstanceOf[dotty1.collections.immutable.Iter2.ArrayIterator[B]]
           else new dotty1.collections.immutable.Iter2.ArrayIterator[Nothing](mapped, ArrayIterator.this.len)
        }
      override def flatMap[B](f: ArrayIterator.this.A => dotty1.collections.immutable.Iter2.IterableOnce[B]): 
        dotty1.collections.immutable.Iter2.ArrayIterator[B]
       = 
        dotty1.collections.immutable.Iter2.ArrayIterator.flatten[B](
          this.map[dotty1.collections.immutable.Iter2.Iterator[B]](
            {
              def $anonfun(_$2: ArrayIterator.this.A): dotty1.collections.immutable.Iter2.Iterator[B] = 
                f.apply(_$2).buildIterator
              closure($anonfun)
            }
          )
        )
      override def ++[B >: ArrayIterator.this.A](that: dotty1.collections.immutable.Iter2.IterableOnce[B]): 
        dotty1.collections.immutable.Iter2.ArrayIterator[B]
       = 
        {
          var ilo1: dotty1.collections.immutable.Iter2.ArrayIterator[B]
          var ilo2: Array[AnyRef]
          var ilo3: Int
          case val x20: dotty1.collections.immutable.Iter2.ArrayIterator[B] @unchecked = 
            dotty1.collections.immutable.Iter2.ArrayIterator.fromIterator[B](that.iterator): 
              dotty1.collections.immutable.Iter2.ArrayIterator[B] @unchecked
          if x20.ne(null) then 
            {
              case val x21: dotty1.collections.immutable.Iter2.ArrayIterator[B] = 
                {
                  dotty1.collections.immutable.Iter2.ArrayIterator
                  x20
                }
              case val x22: Array[AnyRef] = x21._1
              case val x23: Int = x21._2
              ilo1 = x20
              ilo2 = x22
              ilo3 = x23
              ()
            }
           else throw new MatchError(x20)
          val len2: Int = ilo3
          if ArrayIterator.this.len.==(0) then ilo1 else 
            if len2.==(0) then this else 
              {
                val resLen: Int = ArrayIterator.this.len.+(len2)
                val resElems: Array[AnyRef] = 
                  dotty.runtime.Arrays.newArray[Array[AnyRef]](classOf[class Object], classOf[class Array], 
                    [resLen : Int]
                  )
                Array.copy(ArrayIterator.this.elems, 0, resElems, 0, ArrayIterator.this.len)
                Array.copy(ilo2, 0, resElems, ArrayIterator.this.len, len2)
                new dotty1.collections.immutable.Iter2.ArrayIterator[Nothing](resElems, resLen)
              }
        }
      def copy[A](elems: Array[AnyRef], len: Int): dotty1.collections.immutable.Iter2.ArrayIterator[A] = 
        new dotty1.collections.immutable.Iter2.ArrayIterator[A](elems, len)
      def copy$default$1[A]: Array[AnyRef] = 
        ArrayIterator.this.elems: => Array[AnyRef](ArrayIterator.this.elems) @uncheckedVariance
      def copy$default$2[A]: Int = ArrayIterator.this.len: => Int(ArrayIterator.this.len) @uncheckedVariance
      def _1: Array[AnyRef] = this.elems
      def _2: Int = this.len
      override def hashCode(): Int = 
        {
          val valify23: Int = 
            scala.runtime.Statics#mix(1454198035, scala.runtime.Statics#anyHash(ArrayIterator.this.elems))
          val valify24: Int = scala.runtime.Statics#mix(valify23, ArrayIterator.this.len)
          scala.runtime.Statics#finalizeHash(valify24, 2)
        }
      override def equals(x$0: Any): Boolean = 
        this.eq(x$0.asInstanceOf[Object]).||(
          if x$0.$isInstanceOf$[dotty1.collections.immutable.Iter2.ArrayIterator[ArrayIterator.this.A]] then 
            {
              case val x26: dotty1.collections.immutable.Iter2.ArrayIterator[ArrayIterator.this.A] = 
                x$0.asInstanceOf[dotty1.collections.immutable.Iter2.ArrayIterator[ArrayIterator.this.A]]
              this.elems.==(x26.elems).&&(this.len.==(x26.len))
            }
           else 
            if x$0.$isInstanceOf$[Any] then 
              {
                x$0.asInstanceOf[Any]
                false
              }
             else throw new MatchError(x$0)
        )
      override def toString(): String = scala.runtime.ScalaRunTime._toString(this)
      override def canEqual(that: Any): Boolean = 
        that.isInstanceOf[dotty1.collections.immutable.Iter2.ArrayIterator[ArrayIterator.this.A]]
      override def productArity: Int = 2
      override def productPrefix: String = "ArrayIterator"
      override def productElement(n: Int): Any = 
        if 0.==(n) then this._1 else if 1.==(n) then this._2 else throw new IndexOutOfBoundsException(n.toString())
    }
    final lazy module val ArrayIterator: dotty1.collections.immutable.Iter2.ArrayIterator = 
      new dotty1.collections.immutable.Iter2.ArrayIterator()
    final module class ArrayIterator() extends Object() { 
      def apply[A](elems: Array[AnyRef], len: Int): dotty1.collections.immutable.Iter2.ArrayIterator[A] = 
        new dotty1.collections.immutable.Iter2.ArrayIterator[A](elems, len)
      def unapply[A](x$1: dotty1.collections.immutable.Iter2.ArrayIterator[A]): 
        dotty1.collections.immutable.Iter2.ArrayIterator[A]
       = x$1
      private def widen(x: Any): AnyRef = x.asInstanceOf[AnyRef]
      def fromIterator[A](it: dotty1.collections.immutable.Iter2.Iterator[A]): 
        dotty1.collections.immutable.Iter2.ArrayIterator[A]
       = 
        if it.$isInstanceOf$[dotty1.collections.immutable.Iter2.ArrayIterator[A]] then 
          {
            case val x29: dotty1.collections.immutable.Iter2.ArrayIterator[A] = 
              it.asInstanceOf[dotty1.collections.immutable.Iter2.ArrayIterator[A]]
            x29: dotty1.collections.immutable.Iter2.ArrayIterator[A]
          }
         else 
          {
            var elems: Array[AnyRef] = 
              dotty.runtime.Arrays.newArray[Array[AnyRef]](classOf[class Object], classOf[class Array], [32 : Int])
            var len: Int = 0
            def ensureCapacity(): Unit = 
              {
                def while$(): Unit = 
                  if len.>(elems.length) then 
                    {
                      {
                        val newElems: Array[AnyRef] = 
                          dotty.runtime.Arrays.newArray[Array[AnyRef]](classOf[class Object], classOf[class Array], 
                            [2.*(elems.length) : Int]
                          )
                        Array.copy(elems, 0, newElems, 0, elems.length)
                        elems = newElems
                      }
                      while$()
                    }
                   else ()
                while$()
              }
            {
              def while$(): Unit = 
                if it.hasNext then 
                  {
                    {
                      val valify25: Int = 1.+(len)
                      len = valify25
                      ensureCapacity()
                      elems.update(valify25.-(1), dotty1.collections.immutable.Iter2.ArrayIterator.widen(it.next))
                    }
                    while$()
                  }
                 else ()
              while$()
            }
            dotty1.collections.immutable.Iter2.ArrayIterator
            new dotty1.collections.immutable.Iter2.ArrayIterator[Nothing](elems, len)
          }
      def flatten[A](
        its: dotty1.collections.immutable.Iter2.ArrayIterator[dotty1.collections.immutable.Iter2.Iterator[A]]
      ): dotty1.collections.immutable.Iter2.ArrayIterator[A] = 
        {
          val valify30: 
            dotty1.collections.immutable.Iter2.ArrayIterator[dotty1.collections.immutable.Iter2.ArrayIterator[A]]
           = 
            its.map[dotty1.collections.immutable.Iter2.ArrayIterator[A]](
              {
                def $anonfun(it: dotty1.collections.immutable.Iter2.Iterator[A]): 
                  dotty1.collections.immutable.Iter2.ArrayIterator[A]
                 = dotty1.collections.immutable.Iter2.ArrayIterator.fromIterator[A](it)
                closure($anonfun)
              }
            )
          var totalLen: Int = 0
          valify30.foreach(
            {
              def $anonfun(_$3: dotty1.collections.immutable.Iter2.ArrayIterator[A]): Unit = 
                totalLen = totalLen.+(_$3.len)
              closure($anonfun)
            }
          )
          val allElems: Array[AnyRef] = 
            dotty.runtime.Arrays.newArray[Array[AnyRef]](classOf[class Object], classOf[class Array], [totalLen : Int])
          var j: Int = 0
          valify30.foreach(
            {
              def $anonfun(it: dotty1.collections.immutable.Iter2.ArrayIterator[A]): Unit = 
                {
                  Array.copy(it.elems, 0, allElems, j, it.len)
                  j = j.+(it.len)
                }
              closure($anonfun)
            }
          )
          new dotty1.collections.immutable.Iter2.ArrayIterator[Nothing](allElems, totalLen)
        }
    }
  }
} of class class dotty.tools.dotc.ast.Trees$PackageDef # 933787
[======================>                ] completed (556/940, 62s)[======================>                ] completed (557/940, 62s)exception while typing package dotty1.collections {
  package dotty1.collections.immutable {
    final lazy module val Iter2: dotty1.collections.immutable.Iter2 = new dotty1.collections.immutable.Iter2()
    @scala.annotation.internal.SourceFile(
      "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/Iter2.scala"
    ) final module class Iter2() extends Object() { 
      <trait> trait Iterator[A]() extends Object with dotty1.collections.immutable.Iter2.IterableOnce[Iterator.this.A] {
         
        private type +A
        def hasNext: Boolean
        def next: Iterator.this.A
        def iterator: dotty1.collections.immutable.Iter2.Iterator[Iterator.this.A] = this
        def foreach(f: Iterator.this.A => Unit): Unit = ???
        def map[B](f: Iterator.this.A => B): dotty1.collections.immutable.Iter2.Iterator[B] = ???
        def flatMap[B](f: Iterator.this.A => dotty1.collections.immutable.Iter2.IterableOnce[B]): 
          dotty1.collections.immutable.Iter2.Iterator[B]
         = ???
        def ++[B >: Iterator.this.A](xs: dotty1.collections.immutable.Iter2.IterableOnce[B]): 
          dotty1.collections.immutable.Iter2.Iterator[B]
         = ???
        def drop(n: Int): dotty1.collections.immutable.Iter2.Iterator[Iterator.this.A] = ???
        def indexWhere(p: Iterator.this.A => Boolean): Int = 
          {
            var i: Int = 0
            {
              def while$(): Unit = 
                if this.hasNext then 
                  {
                    {
                      if p.apply(this.next) then return i else ()
                      i = 1.+(i)
                    }
                    while$()
                  }
                 else ()
              while$()
            }
            -1
          }
        def zip[B](that: dotty1.collections.immutable.Iter2.Iterator[B]): 
          dotty1.collections.immutable.Iter2.Iterator[(Iterator.this.A, B)]
         = ???
        def copy: dotty1.collections.immutable.Iter2.Iterator[Iterator.this.A] = ???
      }
      <trait> trait IterableOnce[A]() extends Object { 
        private type +A
        def iterator: dotty1.collections.immutable.Iter2.Iterator[IterableOnce.this.A]
        def buildIterator: dotty1.collections.immutable.Iter2.Iterator[IterableOnce.this.A] = this.iterator
      }
      <trait> interface trait FromIterator[C <: dotty1.collections.immutable.Iter2.Iterable]() extends Object { 
        private type +C <: dotty1.collections.immutable.Iter2.Iterable
        def fromIterator[B](it: dotty1.collections.immutable.Iter2.Iterator[B]): FromIterator.this.C[B]
      }
      <trait> trait Iterable[IA]() extends Object with dotty1.collections.immutable.Iter2.IterableOnce[Iterable.this.IA]
         with 
      dotty1.collections.immutable.Iter2.FromIterator[dotty1.collections.immutable.Iter2.Iterable] { 
        private type +IA
        def view: dotty1.collections.immutable.Iter2.View[Iterable.this.IA] = 
          new dotty1.collections.immutable.Iter2.View[Iterable.this.IA](this.iterator)
      }
      <trait> interface trait Seq[AA]() extends Object with dotty1.collections.immutable.Iter2.Iterable[Seq.this.AA]
         with 
      dotty1.collections.immutable.Iter2.FromIterator[dotty1.collections.immutable.Iter2.Seq] { 
        private type +AA
        def apply(i: Int): Seq.this.AA
        def length: Int
      }
      @scala.annotation.internal.Child[dotty1.collections.immutable.Iter2.Nil.type]() @scala.annotation.internal.Child[
        dotty1.collections.immutable.Iter2.Cons
      ]() <trait> sealed trait List[A]() extends Object with dotty1.collections.immutable.Iter2.Seq[List.this.A] with 
        dotty1.collections.immutable.Iter2
      .FromIterator[dotty1.collections.immutable.Iter2.List] { 
        private type +A
        def isEmpty: Boolean
        def head: List.this.A
        def tail: dotty1.collections.immutable.Iter2.List[List.this.A]
        def iterator: dotty1.collections.immutable.Iter2.Iterator[List.this.A] = 
          new dotty1.collections.immutable.Iter2.ListIterator[List.this.A](this)
        def fromIterator[B](it: dotty1.collections.immutable.Iter2.Iterator[B]): 
          dotty1.collections.immutable.Iter2.List[B]
         = 
          if it.$isInstanceOf$[dotty1.collections.immutable.Iter2.ListIterator[B]] then 
            {
              case val x2: dotty1.collections.immutable.Iter2.ListIterator[B] = 
                it.asInstanceOf[dotty1.collections.immutable.Iter2.ListIterator[B]]
              case val x3: dotty1.collections.immutable.Iter2.ListIterator[B] = 
                {
                  Iter2$.this.ListIterator
                  x2
                }
              case val x4: dotty1.collections.immutable.Iter2.List[B] = x3._1
              x4: dotty1.collections.immutable.Iter2.List[B]
            }
           else 
            if it.hasNext then 
              {
                Iter2$.this.Cons
                new dotty1.collections.immutable.Iter2.Cons[B](it.next, this.fromIterator[B](it))
              }
             else dotty1.collections.immutable.Iter2.Nil
        def apply(i: Int): List.this.A = 
          {
            require(this.isEmpty.unary_!)
            if i.==(0) then this.head else this.tail.apply(i.-(1))
          }
        def length: Int = if this.isEmpty then 0 else 1.+(this.tail.length)
      }
      class View[A](it: dotty1.collections.immutable.Iter2.Iterator[A]) extends Object() with 
        dotty1.collections.immutable.Iter2
      .Iterable[View.this.A] with dotty1.collections.immutable.Iter2.FromIterator[
        dotty1.collections.immutable.Iter2.View
      ] { 
        private type +A
        private val it: dotty1.collections.immutable.Iter2.Iterator[View.this.A]
        def iterator: dotty1.collections.immutable.Iter2.Iterator[View.this.A] = View.this.it.copy
        def fromIterator[B](it: dotty1.collections.immutable.Iter2.Iterator[B]): 
          dotty1.collections.immutable.Iter2.View[B]
         = new dotty1.collections.immutable.Iter2.View[B](it)
      }
      case class Cons[A](x: A, xs: dotty1.collections.immutable.Iter2.List[A]) extends Object() with 
        dotty1.collections.immutable.Iter2
      .List[Cons.this.A] with Product { 
        def productIterator: Iterator[Any] = super[Product].productIterator
        private type +A
        <accessor> def x: Cons.this.A
        <accessor> def xs: dotty1.collections.immutable.Iter2.List[Cons.this.A]
        def isEmpty: Boolean = false
        def head: Cons.this.A = Cons.this.x
        def tail: dotty1.collections.immutable.Iter2.List[Cons.this.A] = Cons.this.xs
        def copy[A](x: A, xs: dotty1.collections.immutable.Iter2.List[A]): dotty1.collections.immutable.Iter2.Cons[A] = 
          new dotty1.collections.immutable.Iter2.Cons[A](x, xs)
        def copy$default$1[A]: Cons.this.A = Cons.this.x: => Cons.this.A(Cons.this.x) @uncheckedVariance
        def copy$default$2[A]: dotty1.collections.immutable.Iter2.List[Cons.this.A] = 
          Cons.this.xs: => dotty1.collections.immutable.Iter2.List[Cons.this.A](Cons.this.xs) @uncheckedVariance
        def _1: Cons.this.A = this.x
        def _2: dotty1.collections.immutable.Iter2.List[Cons.this.A] = this.xs
        override def hashCode(): Int = 
          {
            val valify4: Int = scala.runtime.Statics#mix(-1034824059, scala.runtime.Statics#anyHash(Cons.this.x))
            val valify5: Int = scala.runtime.Statics#mix(valify4, scala.runtime.Statics#anyHash(Cons.this.xs))
            scala.runtime.Statics#finalizeHash(valify5, 2)
          }
        override def equals(x$0: Any): Boolean = 
          this.eq(x$0.asInstanceOf[Object]).||(
            if x$0.$isInstanceOf$[dotty1.collections.immutable.Iter2.Cons[Cons.this.A]] then 
              {
                case val x7: dotty1.collections.immutable.Iter2.Cons[Cons.this.A] = 
                  x$0.asInstanceOf[dotty1.collections.immutable.Iter2.Cons[Cons.this.A]]
                this.x.==(x7.x).&&(this.xs.==(x7.xs))
              }
             else 
              if x$0.$isInstanceOf$[Any] then 
                {
                  x$0.asInstanceOf[Any]
                  false
                }
               else throw new MatchError(x$0)
          )
        override def toString(): String = scala.runtime.ScalaRunTime._toString(this)
        override def canEqual(that: Any): Boolean = 
          that.isInstanceOf[dotty1.collections.immutable.Iter2.Cons[Cons.this.A]]
        override def productArity: Int = 2
        override def productPrefix: String = "Cons"
        override def productElement(n: Int): Any = 
          if 0.==(n) then this._1 else if 1.==(n) then this._2 else throw new IndexOutOfBoundsException(n.toString())
      }
      final lazy module val Cons: dotty1.collections.immutable.Iter2.Cons = 
        new dotty1.collections.immutable.Iter2.Cons()
      final module class Cons() extends Object() { 
        def apply[A](x: A, xs: dotty1.collections.immutable.Iter2.List[A]): dotty1.collections.immutable.Iter2.Cons[A]
           = 
        new dotty1.collections.immutable.Iter2.Cons[A](x, xs)
        def unapply[A](x$1: dotty1.collections.immutable.Iter2.Cons[A]): dotty1.collections.immutable.Iter2.Cons[A] = 
          x$1
      }
      final lazy module case val Nil: dotty1.collections.immutable.Iter2.Nil = 
        new dotty1.collections.immutable.Iter2.Nil()
      final module case class Nil() extends Object() with dotty1.collections.immutable.Iter2.List[Nothing] with Product 
        {
       
        def productIterator: Iterator[Any] = super[Product].productIterator
        def isEmpty: Boolean = true
        def head: Nothing = ???
        def tail: dotty1.collections.immutable.Iter2.List[Nothing] = ???
        override def hashCode(): Int = scala.runtime.Statics#finalizeHash(-1034502265, 0)
        override def toString(): String = "Nil"
        override def canEqual(that: Any): Boolean = that.isInstanceOf[dotty1.collections.immutable.Iter2.Nil]
        override def productArity: Int = 0
        override def productPrefix: String = "Nil"
        override def productElement(n: Int): Any = throw new IndexOutOfBoundsException(n.toString())
      }
      class ArrayBuffer[A]  private(initElems: Array[AnyRef], initLen: Int) extends Object() with 
        dotty1.collections.immutable.Iter2
      .Seq[ArrayBuffer.this.A] with dotty1.collections.immutable.Iter2.FromIterator[
        dotty1.collections.immutable.Iter2.ArrayBuffer
      ] { 
        private type A
        private val initElems: Array[AnyRef]
        private val initLen: Int
        def <init>[A](): Unit = 
          {
            this[ArrayBuffer.this.A](
              dotty.runtime.Arrays.newArray[Array[AnyRef]](classOf[class Object], classOf[class Array], [16 : Int])
            , 0)
            ()
          }
        def <init>[A](it: dotty1.collections.immutable.Iter2.ArrayIterator[A]): Unit = 
          {
            this[ArrayBuffer.this.A](it.elems, it.len)
            ()
          }
        private <accessor> def elems: Array[AnyRef] = ArrayBuffer.this.initElems
        private <accessor> def elems_=(x$1: Array[AnyRef]): Unit = ()
        private <accessor> def len: Int = 0
        private <accessor> def len_=(x$1: Int): Unit = ()
        def iterator: dotty1.collections.immutable.Iter2.Iterator[ArrayBuffer.this.A] = 
          refArrayOps[Object](this.elems).iterator.take(this.len).asInstanceOf[
            dotty1.collections.immutable.Iter2.Iterator[ArrayBuffer.this.A]
          ]
        override def buildIterator: dotty1.collections.immutable.Iter2.Iterator[ArrayBuffer.this.A] = 
          new dotty1.collections.immutable.Iter2.ArrayIterator[Nothing](this.elems, this.len).asInstanceOf[
            dotty1.collections.immutable.Iter2.Iterator[ArrayBuffer.this.A]
          ]
        def fromIterator[B](it: dotty1.collections.immutable.Iter2.Iterator[B]): 
          dotty1.collections.immutable.Iter2.ArrayBuffer[B]
         = 
          new dotty1.collections.immutable.Iter2.ArrayBuffer[B](
            dotty1.collections.immutable.Iter2.ArrayIterator.fromIterator[B](it)
          )
        def apply(i: Int): ArrayBuffer.this.A = this.elems.apply(i).asInstanceOf[ArrayBuffer.this.A]
        def length: Int = this.len
      }
      final class IterableTransforms[A, C <: dotty1.collections.immutable.Iter2.Iterable](
        c: dotty1.collections.immutable.Iter2.Iterable[A] & dotty1.collections.immutable.Iter2.FromIterator[C]
      ) extends AnyVal() { 
        private type A
        private type C <: dotty1.collections.immutable.Iter2.Iterable
        <accessor> def c: 
          dotty1.collections.immutable.Iter2.Iterable[IterableTransforms.this.A] & 
            dotty1.collections.immutable.Iter2.FromIterator[IterableTransforms.this.C]
        def map[B](f: IterableTransforms.this.A => B): IterableTransforms.this.C[B] = 
          dotty1.collections.immutable.Iter2.IterableTransforms.map$extension[B, IterableTransforms.this.A, 
            IterableTransforms.this.C
          ](this)(f)
        def flatMap[B](f: IterableTransforms.this.A => dotty1.collections.immutable.Iter2.IterableOnce[B]): 
          IterableTransforms.this.C[B]
         = 
          dotty1.collections.immutable.Iter2.IterableTransforms.flatMap$extension[B, IterableTransforms.this.A, 
            IterableTransforms.this.C
          ](this)(f)
        def ++[B >: IterableTransforms.this.A](xs: dotty1.collections.immutable.Iter2.IterableOnce[B]): 
          IterableTransforms.this.C[B]
         = 
          dotty1.collections.immutable.Iter2.IterableTransforms.++$extension[B, IterableTransforms.this.A, 
            IterableTransforms.this.C
          ](this)(xs)
        def drop(n: Int): IterableTransforms.this.C[IterableTransforms.this.A] = 
          dotty1.collections.immutable.Iter2.IterableTransforms.drop$extension[IterableTransforms.this.A, 
            IterableTransforms.this.C
          ](this)(n)
        def head: IterableTransforms.this.A = 
          dotty1.collections.immutable.Iter2.IterableTransforms.head$extension[IterableTransforms.this.A, 
            IterableTransforms.this.C
          ](this)
        def zip[B](xs: dotty1.collections.immutable.Iter2.IterableOnce[B]): 
          IterableTransforms.this.C[(IterableTransforms.this.A, B)]
         = 
          dotty1.collections.immutable.Iter2.IterableTransforms.zip$extension[B, IterableTransforms.this.A, 
            IterableTransforms.this.C
          ](this)(xs)
        override def hashCode(): Int = 
          dotty1.collections.immutable.Iter2.IterableTransforms.hashCode$extension[IterableTransforms.this.A, 
            IterableTransforms.this.C
          ](this)()
        override def equals(x$0: Any): Boolean = 
          dotty1.collections.immutable.Iter2.IterableTransforms.equals$extension[IterableTransforms.this.A, 
            IterableTransforms.this.C
          ](this)(x$0)
      }
      final lazy module val IterableTransforms: dotty1.collections.immutable.Iter2.IterableTransforms = 
        new dotty1.collections.immutable.Iter2.IterableTransforms()
      final module class IterableTransforms() extends Object() { 
        final def map$extension[B, A, C <: dotty1.collections.immutable.Iter2.Iterable](
          $this: dotty1.collections.immutable.Iter2.IterableTransforms[A, C]
        )(f: A => B): dotty1.collections.immutable.Iter2.Iterable[B] = 
          $this.c.fromIterator[B]($this.c.buildIterator.map[B](f))
        final def flatMap$extension[B, A, C <: dotty1.collections.immutable.Iter2.Iterable](
          $this: dotty1.collections.immutable.Iter2.IterableTransforms[A, C]
        )(f: A => dotty1.collections.immutable.Iter2.IterableOnce[B]): dotty1.collections.immutable.Iter2.Iterable[B] = 
          $this.c.fromIterator[B](
            $this.c.buildIterator.flatMap[B](
              {
                def $anonfun(_$1: A): dotty1.collections.immutable.Iter2.IterableOnce[B] = f.apply(_$1).buildIterator
                closure($anonfun)
              }
            )
          )
        final def ++$extension[B >: A, A, C <: dotty1.collections.immutable.Iter2.Iterable](
          $this: dotty1.collections.immutable.Iter2.IterableTransforms[A, C]
        )(xs: dotty1.collections.immutable.Iter2.IterableOnce[B]): dotty1.collections.immutable.Iter2.Iterable[B] = 
          $this.c.fromIterator[B]($this.c.buildIterator.++[B](xs.buildIterator))
        final def drop$extension[A, C <: dotty1.collections.immutable.Iter2.Iterable](
          $this: dotty1.collections.immutable.Iter2.IterableTransforms[A, C]
        )(n: Int): dotty1.collections.immutable.Iter2.Iterable[A] = 
          $this.c.fromIterator[A]($this.c.buildIterator.drop(n))
        final def head$extension[A, C <: dotty1.collections.immutable.Iter2.Iterable](
          $this: dotty1.collections.immutable.Iter2.IterableTransforms[A, C]
        ): A = $this.c.iterator.next
        final def zip$extension[B, A, C <: dotty1.collections.immutable.Iter2.Iterable](
          $this: dotty1.collections.immutable.Iter2.IterableTransforms[A, C]
        )(xs: dotty1.collections.immutable.Iter2.IterableOnce[B]): dotty1.collections.immutable.Iter2.Iterable[(A, B)]
           = 
        $this.c.fromIterator[(A, B)]($this.c.iterator.zip[B](xs.iterator))
        final def hashCode$extension[A, C <: dotty1.collections.immutable.Iter2.Iterable](
          $this: dotty1.collections.immutable.Iter2.IterableTransforms[A, C]
        )(): Int = $this.c.hashCode()
        final def equals$extension[A, C <: dotty1.collections.immutable.Iter2.Iterable](
          $this: dotty1.collections.immutable.Iter2.IterableTransforms[A, C]
        )(x$0: Any): Boolean = 
          if x$0.$isInstanceOf$[dotty1.collections.immutable.Iter2.IterableTransforms[A, C]] then 
            {
              case val x12: dotty1.collections.immutable.Iter2.IterableTransforms[A, C] = 
                x$0.asInstanceOf[dotty1.collections.immutable.Iter2.IterableTransforms[A, C]]
              $this.c.==(x12.c)
            }
           else 
            if x$0.$isInstanceOf$[Any] then 
              {
                x$0.asInstanceOf[Any]
                false
              }
             else throw new MatchError(x$0)
      }
      implicit def IterableTransforms[A, C <: dotty1.collections.immutable.Iter2.Iterable](
        c: dotty1.collections.immutable.Iter2.Iterable[A] & dotty1.collections.immutable.Iter2.FromIterator[C]
      ): dotty1.collections.immutable.Iter2.IterableTransforms[A, C] = 
        new dotty1.collections.immutable.Iter2.IterableTransforms[A, C](c)
      final class SeqTransforms[SA, C <: dotty1.collections.immutable.Iter2.Seq](
        c: dotty1.collections.immutable.Iter2.Seq[SA] & dotty1.collections.immutable.Iter2.FromIterator[C]
      ) extends AnyVal() { 
        private type SA
        private type C <: dotty1.collections.immutable.Iter2.Seq
        <accessor> def c: 
          dotty1.collections.immutable.Iter2.Seq[SeqTransforms.this.SA] & 
            dotty1.collections.immutable.Iter2.FromIterator[SeqTransforms.this.C]
        def reverse: SeqTransforms.this.C[SeqTransforms.this.SA] = 
          dotty1.collections.immutable.Iter2.SeqTransforms.reverse$extension[SeqTransforms.this.SA, SeqTransforms.this.C
            ]
          (this)
        def indexWhere(p: SeqTransforms.this.SA => Boolean): Int = 
          dotty1.collections.immutable.Iter2.SeqTransforms.indexWhere$extension[SeqTransforms.this.SA, 
            SeqTransforms.this.C
          ](this)(p)
        override def hashCode(): Int = 
          dotty1.collections.immutable.Iter2.SeqTransforms.hashCode$extension[SeqTransforms.this.SA, 
            SeqTransforms.this.C
          ](this)()
        override def equals(x$0: Any): Boolean = 
          dotty1.collections.immutable.Iter2.SeqTransforms.equals$extension[SeqTransforms.this.SA, SeqTransforms.this.C]
            (
          this)(x$0)
      }
      final lazy module val SeqTransforms: dotty1.collections.immutable.Iter2.SeqTransforms = 
        new dotty1.collections.immutable.Iter2.SeqTransforms()
      final module class SeqTransforms() extends Object() { 
        final def reverse$extension[SA, C <: dotty1.collections.immutable.Iter2.Seq](
          $this: dotty1.collections.immutable.Iter2.SeqTransforms[SA, C]
        ): dotty1.collections.immutable.Iter2.Seq[SA] = 
          {
            val elems: Array[AnyRef] = 
              dotty.runtime.Arrays.newArray[Array[AnyRef]](classOf[class Object], classOf[class Array], 
                [$this.c.length : Int]
              )
            var i: Int = elems.length
            val it: dotty1.collections.immutable.Iter2.Iterator[SA] = $this.c.iterator
            {
              def while$(): Unit = 
                if it.hasNext then 
                  {
                    {
                      val valify7: Int = i.-(1)
                      i = valify7
                      elems.update(valify7, it.next.asInstanceOf[AnyRef])
                    }
                    while$()
                  }
                 else ()
              while$()
            }
            val xzz: dotty1.collections.immutable.Iter2.Seq[SA] = 
              $this.c.fromIterator[SA](
                {
                  dotty1.collections.immutable.Iter2.ArrayIterator
                  new dotty1.collections.immutable.Iter2.ArrayIterator[SA](elems, $this.c.length)
                }
              )
            xzz: dotty1.collections.immutable.Iter2.Seq[SA]
          }
        final def indexWhere$extension[SA, C <: dotty1.collections.immutable.Iter2.Seq](
          $this: dotty1.collections.immutable.Iter2.SeqTransforms[SA, C]
        )(p: SA => Boolean): Int = $this.c.iterator.indexWhere(p)
        final def hashCode$extension[SA, C <: dotty1.collections.immutable.Iter2.Seq](
          $this: dotty1.collections.immutable.Iter2.SeqTransforms[SA, C]
        )(): Int = $this.c.hashCode()
        final def equals$extension[SA, C <: dotty1.collections.immutable.Iter2.Seq](
          $this: dotty1.collections.immutable.Iter2.SeqTransforms[SA, C]
        )(x$0: Any): Boolean = 
          if x$0.$isInstanceOf$[dotty1.collections.immutable.Iter2.SeqTransforms[SA, C]] then 
            {
              case val x15: dotty1.collections.immutable.Iter2.SeqTransforms[SA, C] = 
                x$0.asInstanceOf[dotty1.collections.immutable.Iter2.SeqTransforms[SA, C]]
              $this.c.==(x15.c)
            }
           else 
            if x$0.$isInstanceOf$[Any] then 
              {
                x$0.asInstanceOf[Any]
                false
              }
             else throw new MatchError(x$0)
      }
      implicit def SeqTransforms[SA, C <: dotty1.collections.immutable.Iter2.Seq](
        c: dotty1.collections.immutable.Iter2.Seq[SA] & dotty1.collections.immutable.Iter2.FromIterator[C]
      ): dotty1.collections.immutable.Iter2.SeqTransforms[SA, C] = 
        new dotty1.collections.immutable.Iter2.SeqTransforms[SA, C](c)
      case class ListIterator[A](xs: dotty1.collections.immutable.Iter2.List[A]) extends Object() with 
        dotty1.collections.immutable.Iter2
      .Iterator[ListIterator.this.A] with Product { 
        def productIterator: Iterator[Any] = super[Product].productIterator
        private type +A
        <accessor> def xs: dotty1.collections.immutable.Iter2.List[ListIterator.this.A]
        private var current: dotty1.collections.immutable.Iter2.List[ListIterator.this.A] = ListIterator.this.xs
        def hasNext: Boolean = this.current.isEmpty.unary_!
        def next: ListIterator.this.A = 
          {
            val res: ListIterator.this.A = this.current.head
            this.current = this.current.tail
            res: ListIterator.this.A
          }
        def copy[A](xs: dotty1.collections.immutable.Iter2.List[A]): dotty1.collections.immutable.Iter2.ListIterator[A]
           = 
        new dotty1.collections.immutable.Iter2.ListIterator[A](xs)
        def copy$default$1[A]: dotty1.collections.immutable.Iter2.List[ListIterator.this.A] = 
          ListIterator.this.xs: 
            => dotty1.collections.immutable.Iter2.List[ListIterator.this.A](ListIterator.this.xs) @uncheckedVariance
        def _1: dotty1.collections.immutable.Iter2.List[ListIterator.this.A] = this.xs
        override def hashCode(): Int = 
          {
            val valify11: Int = 
              scala.runtime.Statics#mix(-1986645376, scala.runtime.Statics#anyHash(ListIterator.this.xs))
            scala.runtime.Statics#finalizeHash(valify11, 1)
          }
        override def equals(x$0: Any): Boolean = 
          this.eq(x$0.asInstanceOf[Object]).||(
            if x$0.$isInstanceOf$[dotty1.collections.immutable.Iter2.ListIterator[ListIterator.this.A]] then 
              {
                case val x18: dotty1.collections.immutable.Iter2.ListIterator[ListIterator.this.A] = 
                  x$0.asInstanceOf[dotty1.collections.immutable.Iter2.ListIterator[ListIterator.this.A]]
                this.xs.==(x18.xs)
              }
             else 
              if x$0.$isInstanceOf$[Any] then 
                {
                  x$0.asInstanceOf[Any]
                  false
                }
               else throw new MatchError(x$0)
          )
        override def toString(): String = scala.runtime.ScalaRunTime._toString(this)
        override def canEqual(that: Any): Boolean = 
          that.isInstanceOf[dotty1.collections.immutable.Iter2.ListIterator[ListIterator.this.A]]
        override def productArity: Int = 1
        override def productPrefix: String = "ListIterator"
        override def productElement(n: Int): Any = 
          if 0.==(n) then this._1 else throw new IndexOutOfBoundsException(n.toString())
      }
      final lazy module val ListIterator: dotty1.collections.immutable.Iter2.ListIterator = 
        new dotty1.collections.immutable.Iter2.ListIterator()
      final module class ListIterator() extends Object() { 
        def apply[A](xs: dotty1.collections.immutable.Iter2.List[A]): dotty1.collections.immutable.Iter2.ListIterator[A]
           = 
        new dotty1.collections.immutable.Iter2.ListIterator[A](xs)
        def unapply[A](x$1: dotty1.collections.immutable.Iter2.ListIterator[A]): 
          dotty1.collections.immutable.Iter2.ListIterator[A]
         = x$1
      }
      case class ArrayIterator[A](elems: Array[AnyRef], len: Int) extends Object() with 
        dotty1.collections.immutable.Iter2
      .Iterator[ArrayIterator.this.A] with Product { 
        def productIterator: Iterator[Any] = super[Product].productIterator
        private type +A
        <accessor> def elems: Array[AnyRef]
        <accessor> def len: Int
        private def elem(i: Int): ArrayIterator.this.A = 
          ArrayIterator.this.elems.apply(i).asInstanceOf[ArrayIterator.this.A]
        private <accessor> def cur: Int = 0
        private <accessor> def cur_=(x$1: Int): Unit = ()
        def hasNext: Boolean = this.cur.<(ArrayIterator.this.len)
        def next: ArrayIterator.this.A = 
          {
            val res: ArrayIterator.this.A = this.elem(this.cur)
            this.cur_=(1.+(this.cur))
            res: ArrayIterator.this.A
          }
        override def foreach(f: ArrayIterator.this.A => Unit): Unit = 
          scala.runtime.RichInt.until$extension0(intWrapper(0))(ArrayIterator.this.len).foreach[Unit](
            {
              def $anonfun(i: Int): Unit = f.apply(this.elem(i))
              closure($anonfun)
            }
          )
        override def map[B](f: ArrayIterator.this.A => B): dotty1.collections.immutable.Iter2.ArrayIterator[B] = 
          {
            var mapped: Array[AnyRef] = ArrayIterator.this.elems
            scala.runtime.RichInt.until$extension0(intWrapper(0))(ArrayIterator.this.len).foreach[Unit](
              {
                def $anonfun(i: Int): Unit = 
                  {
                    val x: ArrayIterator.this.A = this.elem(i)
                    val y: AnyRef = dotty1.collections.immutable.Iter2.ArrayIterator.widen(f.apply(x))
                    if dotty1.collections.immutable.Iter2.ArrayIterator.widen(x).ne(y) then 
                      {
                        if mapped.eq(ArrayIterator.this.elems) then 
                          mapped = 
                            dotty.runtime.Arrays.newArray[Array[AnyRef]](classOf[class Object], classOf[class Array], 
                              [ArrayIterator.this.len : Int]
                            )
                         else ()
                        mapped.update(i, y)
                      }
                     else ()
                  }
                closure($anonfun)
              }
            )
            if mapped.eq(ArrayIterator.this.elems) then 
              this.asInstanceOf[dotty1.collections.immutable.Iter2.ArrayIterator[B]]
             else new dotty1.collections.immutable.Iter2.ArrayIterator[Nothing](mapped, ArrayIterator.this.len)
          }
        override def flatMap[B](f: ArrayIterator.this.A => dotty1.collections.immutable.Iter2.IterableOnce[B]): 
          dotty1.collections.immutable.Iter2.ArrayIterator[B]
         = 
          dotty1.collections.immutable.Iter2.ArrayIterator.flatten[B](
            this.map[dotty1.collections.immutable.Iter2.Iterator[B]](
              {
                def $anonfun(_$2: ArrayIterator.this.A): dotty1.collections.immutable.Iter2.Iterator[B] = 
                  f.apply(_$2).buildIterator
                closure($anonfun)
              }
            )
          )
        override def ++[B >: ArrayIterator.this.A](that: dotty1.collections.immutable.Iter2.IterableOnce[B]): 
          dotty1.collections.immutable.Iter2.ArrayIterator[B]
         = 
          {
            var ilo1: dotty1.collections.immutable.Iter2.ArrayIterator[B]
            var ilo2: Array[AnyRef]
            var ilo3: Int
            case val x20: dotty1.collections.immutable.Iter2.ArrayIterator[B] @unchecked = 
              dotty1.collections.immutable.Iter2.ArrayIterator.fromIterator[B](that.iterator): 
                dotty1.collections.immutable.Iter2.ArrayIterator[B] @unchecked
            if x20.ne(null) then 
              {
                case val x21: dotty1.collections.immutable.Iter2.ArrayIterator[B] = 
                  {
                    dotty1.collections.immutable.Iter2.ArrayIterator
                    x20
                  }
                case val x22: Array[AnyRef] = x21._1
                case val x23: Int = x21._2
                ilo1 = x20
                ilo2 = x22
                ilo3 = x23
                ()
              }
             else throw new MatchError(x20)
            val len2: Int = ilo3
            if ArrayIterator.this.len.==(0) then ilo1 else 
              if len2.==(0) then this else 
                {
                  val resLen: Int = ArrayIterator.this.len.+(len2)
                  val resElems: Array[AnyRef] = 
                    dotty.runtime.Arrays.newArray[Array[AnyRef]](classOf[class Object], classOf[class Array], 
                      [resLen : Int]
                    )
                  Array.copy(ArrayIterator.this.elems, 0, resElems, 0, ArrayIterator.this.len)
                  Array.copy(ilo2, 0, resElems, ArrayIterator.this.len, len2)
                  new dotty1.collections.immutable.Iter2.ArrayIterator[Nothing](resElems, resLen)
                }
          }
        def copy[A](elems: Array[AnyRef], len: Int): dotty1.collections.immutable.Iter2.ArrayIterator[A] = 
          new dotty1.collections.immutable.Iter2.ArrayIterator[A](elems, len)
        def copy$default$1[A]: Array[AnyRef] = 
          ArrayIterator.this.elems: => Array[AnyRef](ArrayIterator.this.elems) @uncheckedVariance
        def copy$default$2[A]: Int = ArrayIterator.this.len: => Int(ArrayIterator.this.len) @uncheckedVariance
        def _1: Array[AnyRef] = this.elems
        def _2: Int = this.len
        override def hashCode(): Int = 
          {
            val valify23: Int = 
              scala.runtime.Statics#mix(1454198035, scala.runtime.Statics#anyHash(ArrayIterator.this.elems))
            val valify24: Int = scala.runtime.Statics#mix(valify23, ArrayIterator.this.len)
            scala.runtime.Statics#finalizeHash(valify24, 2)
          }
        override def equals(x$0: Any): Boolean = 
          this.eq(x$0.asInstanceOf[Object]).||(
            if x$0.$isInstanceOf$[dotty1.collections.immutable.Iter2.ArrayIterator[ArrayIterator.this.A]] then 
              {
                case val x26: dotty1.collections.immutable.Iter2.ArrayIterator[ArrayIterator.this.A] = 
                  x$0.asInstanceOf[dotty1.collections.immutable.Iter2.ArrayIterator[ArrayIterator.this.A]]
                this.elems.==(x26.elems).&&(this.len.==(x26.len))
              }
             else 
              if x$0.$isInstanceOf$[Any] then 
                {
                  x$0.asInstanceOf[Any]
                  false
                }
               else throw new MatchError(x$0)
          )
        override def toString(): String = scala.runtime.ScalaRunTime._toString(this)
        override def canEqual(that: Any): Boolean = 
          that.isInstanceOf[dotty1.collections.immutable.Iter2.ArrayIterator[ArrayIterator.this.A]]
        override def productArity: Int = 2
        override def productPrefix: String = "ArrayIterator"
        override def productElement(n: Int): Any = 
          if 0.==(n) then this._1 else if 1.==(n) then this._2 else throw new IndexOutOfBoundsException(n.toString())
      }
      final lazy module val ArrayIterator: dotty1.collections.immutable.Iter2.ArrayIterator = 
        new dotty1.collections.immutable.Iter2.ArrayIterator()
      final module class ArrayIterator() extends Object() { 
        def apply[A](elems: Array[AnyRef], len: Int): dotty1.collections.immutable.Iter2.ArrayIterator[A] = 
          new dotty1.collections.immutable.Iter2.ArrayIterator[A](elems, len)
        def unapply[A](x$1: dotty1.collections.immutable.Iter2.ArrayIterator[A]): 
          dotty1.collections.immutable.Iter2.ArrayIterator[A]
         = x$1
        private def widen(x: Any): AnyRef = x.asInstanceOf[AnyRef]
        def fromIterator[A](it: dotty1.collections.immutable.Iter2.Iterator[A]): 
          dotty1.collections.immutable.Iter2.ArrayIterator[A]
         = 
          if it.$isInstanceOf$[dotty1.collections.immutable.Iter2.ArrayIterator[A]] then 
            {
              case val x29: dotty1.collections.immutable.Iter2.ArrayIterator[A] = 
                it.asInstanceOf[dotty1.collections.immutable.Iter2.ArrayIterator[A]]
              x29: dotty1.collections.immutable.Iter2.ArrayIterator[A]
            }
           else 
            {
              var elems: Array[AnyRef] = 
                dotty.runtime.Arrays.newArray[Array[AnyRef]](classOf[class Object], classOf[class Array], [32 : Int])
              var len: Int = 0
              def ensureCapacity(): Unit = 
                {
                  def while$(): Unit = 
                    if len.>(elems.length) then 
                      {
                        {
                          val newElems: Array[AnyRef] = 
                            dotty.runtime.Arrays.newArray[Array[AnyRef]](classOf[class Object], classOf[class Array], 
                              [2.*(elems.length) : Int]
                            )
                          Array.copy(elems, 0, newElems, 0, elems.length)
                          elems = newElems
                        }
                        while$()
                      }
                     else ()
                  while$()
                }
              {
                def while$(): Unit = 
                  if it.hasNext then 
                    {
                      {
                        val valify25: Int = 1.+(len)
                        len = valify25
                        ensureCapacity()
                        elems.update(valify25.-(1), dotty1.collections.immutable.Iter2.ArrayIterator.widen(it.next))
                      }
                      while$()
                    }
                   else ()
                while$()
              }
              dotty1.collections.immutable.Iter2.ArrayIterator
              new dotty1.collections.immutable.Iter2.ArrayIterator[Nothing](elems, len)
            }
        def flatten[A](
          its: dotty1.collections.immutable.Iter2.ArrayIterator[dotty1.collections.immutable.Iter2.Iterator[A]]
        ): dotty1.collections.immutable.Iter2.ArrayIterator[A] = 
          {
            val valify30: 
              dotty1.collections.immutable.Iter2.ArrayIterator[dotty1.collections.immutable.Iter2.ArrayIterator[A]]
             = 
              its.map[dotty1.collections.immutable.Iter2.ArrayIterator[A]](
                {
                  def $anonfun(it: dotty1.collections.immutable.Iter2.Iterator[A]): 
                    dotty1.collections.immutable.Iter2.ArrayIterator[A]
                   = dotty1.collections.immutable.Iter2.ArrayIterator.fromIterator[A](it)
                  closure($anonfun)
                }
              )
            var totalLen: Int = 0
            valify30.foreach(
              {
                def $anonfun(_$3: dotty1.collections.immutable.Iter2.ArrayIterator[A]): Unit = 
                  totalLen = totalLen.+(_$3.len)
                closure($anonfun)
              }
            )
            val allElems: Array[AnyRef] = 
              dotty.runtime.Arrays.newArray[Array[AnyRef]](classOf[class Object], classOf[class Array], [totalLen : Int]
                )
            var j: Int = 0
            valify30.foreach(
              {
                def $anonfun(it: dotty1.collections.immutable.Iter2.ArrayIterator[A]): Unit = 
                  {
                    Array.copy(it.elems, 0, allElems, j, it.len)
                    j = j.+(it.len)
                  }
                closure($anonfun)
              }
            )
            new dotty1.collections.immutable.Iter2.ArrayIterator[Nothing](allElems, totalLen)
          }
      }
    }
  }
} of class class dotty.tools.dotc.ast.Trees$PackageDef # 933788
*** error while checking /mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/Iter2.scala after phase arrayConstructors ***
[======================>                ] completed (558/940, 62s)[======================>                ] completed (559/940, 62s)[======================>                ] completed (559/940, 62s)inlining {
  def $anonfun(implicit ctx: Context): Unit = ()
  closure($anonfun)
}
[======================>                ] completed (560/940, 62s)[======================>                ] completed (561/940, 62s)[======================>                ] completed (561/940, 63s)[======================>                ] completed (561/940, 63s)[======================>                ] completed (561/940, 63s)[======================>                ] completed (561/940, 63s)[======================>                ] completed (563/940, 63s)[======================>                ] completed (563/940, 63s)[======================>                ] completed (563/940, 63s)[======================>                ] completed (563/940, 63s)[=======================>               ] completed (564/940, 63s)[=======================>               ] completed (564/940, 63s)[=======================>               ] completed (564/940, 64s)[=======================>               ] completed (565/940, 64s)[=======================>               ] completed (565/940, 64s)[=======================>               ] completed (566/940, 64s)[=======================>               ] completed (567/940, 64s)[=======================>               ] completed (567/940, 64s)[=======================>               ] completed (568/940, 64s)[=======================>               ] completed (568/940, 64s)[=======================>               ] completed (568/940, 64s)[=======================>               ] completed (569/940, 64s)[=======================>               ] completed (570/940, 65s)[=======================>               ] completed (570/940, 65s)[=======================>               ] completed (571/940, 65s)[=======================>               ] completed (572/940, 65s)[=======================>               ] completed (572/940, 65s)[=======================>               ] completed (572/940, 65s)[=======================>               ] completed (572/940, 65s)[=======================>               ] completed (573/940, 65s)[=======================>               ] completed (573/940, 65s)[=======================>               ] completed (573/940, 65s)[=======================>               ] completed (573/940, 66s)[=======================>               ] completed (574/940, 66s)[=======================>               ] completed (575/940, 66s)[=======================>               ] completed (575/940, 66s)[=======================>               ] completed (575/940, 66s)[=======================>               ] completed (575/940, 66s)[=======================>               ] completed (576/940, 66s)inlining x3
inlining x2
exception while typing {
  def $anonfun(x: (x.A, x.B @uncheckedVariance)): scala.collection.immutable.HashMap[x.A, Any] = 
    scala.collection.immutable.HashMap.apply[x.A, Any](Predef.wrapRefArray[(x.A, Any)]([x : (x.A, Any)]))
  closure($anonfun)
} of class class dotty.tools.dotc.ast.Trees$Block # 1066981
exception while typing (x3: scala.collection.immutable.HashMap.HashMapCollision1[_, _]).kvs.map[scala.collection.immutable.HashMap[x.A, Any], 
  scala.collection.immutable.Iterable[scala.collection.immutable.HashMap[x.A, Any]]
](
  {
    def $anonfun(x: (x.A, x.B @uncheckedVariance)): scala.collection.immutable.HashMap[x.A, Any] = 
      scala.collection.immutable.HashMap.apply[x.A, Any](Predef.wrapRefArray[(x.A, Any)]([x : (x.A, Any)]))
    closure($anonfun)
  }
) of class class dotty.tools.dotc.ast.Trees$Apply # 1067126
exception while typing (x3: scala.collection.immutable.HashMap.HashMapCollision1[_, _]).kvs.map[scala.collection.immutable.HashMap[x.A, Any], 
  scala.collection.immutable.Iterable[scala.collection.immutable.HashMap[x.A, Any]]
](
  {
    def $anonfun(x: (x.A, x.B @uncheckedVariance)): scala.collection.immutable.HashMap[x.A, Any] = 
      scala.collection.immutable.HashMap.apply[x.A, Any](Predef.wrapRefArray[(x.A, Any)]([x : (x.A, Any)]))
    closure($anonfun)
  }
)(scala.collection.immutable.Iterable.canBuildFrom[scala.collection.immutable.HashMap[x.A, Any]]) of class class dotty.tools.dotc.ast.Trees$Apply # 1067127
exception while typing (x3: scala.collection.immutable.HashMap.HashMapCollision1[_, _]).kvs.map[scala.collection.immutable.HashMap[x.A, Any], 
  scala.collection.immutable.Iterable[scala.collection.immutable.HashMap[x.A, Any]]
](
  {
    def $anonfun(x: (x.A, x.B @uncheckedVariance)): scala.collection.immutable.HashMap[x.A, Any] = 
      scala.collection.immutable.HashMap.apply[x.A, Any](Predef.wrapRefArray[(x.A, Any)]([x : (x.A, Any)]))
    closure($anonfun)
  }
)(scala.collection.immutable.Iterable.canBuildFrom[scala.collection.immutable.HashMap[x.A, Any]]).toArray of class class dotty.tools.dotc.ast.Trees$Select # 1067128
exception while typing (x3: scala.collection.immutable.HashMap.HashMapCollision1[_, _]).kvs.map[scala.collection.immutable.HashMap[x.A, Any], 
  scala.collection.immutable.Iterable[scala.collection.immutable.HashMap[x.A, Any]]
](
  {
    def $anonfun(x: (x.A, x.B @uncheckedVariance)): scala.collection.immutable.HashMap[x.A, Any] = 
      scala.collection.immutable.HashMap.apply[x.A, Any](Predef.wrapRefArray[(x.A, Any)]([x : (x.A, Any)]))
    closure($anonfun)
  }
)(scala.collection.immutable.Iterable.canBuildFrom[scala.collection.immutable.HashMap[x.A, Any]]).toArray[
  scala.collection.immutable.HashMap[x.A, Any]
] of class class dotty.tools.dotc.ast.Trees$TypeApply # 1067129
[=======================>               ] completed (576/940, 66s)exception while typing (x3: scala.collection.immutable.HashMap.HashMapCollision1[_, _]).kvs.map[scala.collection.immutable.HashMap[x.A, Any], 
  scala.collection.immutable.Iterable[scala.collection.immutable.HashMap[x.A, Any]]
](
  {
    def $anonfun(x: (x.A, x.B @uncheckedVariance)): scala.collection.immutable.HashMap[x.A, Any] = 
      scala.collection.immutable.HashMap.apply[x.A, Any](Predef.wrapRefArray[(x.A, Any)]([x : (x.A, Any)]))
    closure($anonfun)
  }
)(scala.collection.immutable.Iterable.canBuildFrom[scala.collection.immutable.HashMap[x.A, Any]]).toArray[
  scala.collection.immutable.HashMap[x.A, Any]
](scala.reflect.ClassTag.apply[scala.collection.immutable.HashMap[x.A, Any]](classOf[class HashMap])) of class class dotty.tools.dotc.ast.Trees$Apply # 1067130
exception while typing (x3: scala.collection.immutable.HashMap.HashMapCollision1[_, _]).kvs.map[scala.collection.immutable.HashMap[x.A, Any], 
  scala.collection.immutable.Iterable[scala.collection.immutable.HashMap[x.A, Any]]
](
  {
    def $anonfun(x: (x.A, x.B @uncheckedVariance)): scala.collection.immutable.HashMap[x.A, Any] = 
      scala.collection.immutable.HashMap.apply[x.A, Any](Predef.wrapRefArray[(x.A, Any)]([x : (x.A, Any)]))
    closure($anonfun)
  }
)(scala.collection.immutable.Iterable.canBuildFrom[scala.collection.immutable.HashMap[x.A, Any]]).toArray[
  scala.collection.immutable.HashMap[x.A, Any]
](scala.reflect.ClassTag.apply[scala.collection.immutable.HashMap[x.A, Any]](classOf[class HashMap])): Array[_] of class class dotty.tools.dotc.ast.Trees$Typed # 1067131
exception while typing {
  case val x3: scala.collection.immutable.HashMap.HashMapCollision1[_, _] = 
    x.asInstanceOf[scala.collection.immutable.HashMap.HashMapCollision1[_, _]]
  (x3: scala.collection.immutable.HashMap.HashMapCollision1[_, _]).kvs.map[scala.collection.immutable.HashMap[x.A, Any]
    , 
  scala.collection.immutable.Iterable[scala.collection.immutable.HashMap[x.A, Any]]](
    {
      def $anonfun(x: (x.A, x.B @uncheckedVariance)): scala.collection.immutable.HashMap[x.A, Any] = 
        scala.collection.immutable.HashMap.apply[x.A, Any](Predef.wrapRefArray[(x.A, Any)]([x : (x.A, Any)]))
      closure($anonfun)
    }
  )(scala.collection.immutable.Iterable.canBuildFrom[scala.collection.immutable.HashMap[x.A, Any]]).toArray[
    scala.collection.immutable.HashMap[x.A, Any]
  ](scala.reflect.ClassTag.apply[scala.collection.immutable.HashMap[x.A, Any]](classOf[class HashMap])): Array[_]
} of class class dotty.tools.dotc.ast.Trees$Block # 1067132
exception while typing if x.$isInstanceOf$[scala.collection.immutable.HashMap.HashMapCollision1[_, _]] then 
  {
    case val x3: scala.collection.immutable.HashMap.HashMapCollision1[_, _] = 
      x.asInstanceOf[scala.collection.immutable.HashMap.HashMapCollision1[_, _]]
    (x3: scala.collection.immutable.HashMap.HashMapCollision1[_, _]).kvs.map[
      scala.collection.immutable.HashMap[x.A, Any]
    , scala.collection.immutable.Iterable[scala.collection.immutable.HashMap[x.A, Any]]](
      {
        def $anonfun(x: (x.A, x.B @uncheckedVariance)): scala.collection.immutable.HashMap[x.A, Any] = 
          scala.collection.immutable.HashMap.apply[x.A, Any](Predef.wrapRefArray[(x.A, Any)]([x : (x.A, Any)]))
        closure($anonfun)
      }
    )(scala.collection.immutable.Iterable.canBuildFrom[scala.collection.immutable.HashMap[x.A, Any]]).toArray[
      scala.collection.immutable.HashMap[x.A, Any]
    ](scala.reflect.ClassTag.apply[scala.collection.immutable.HashMap[x.A, Any]](classOf[class HashMap])): Array[_]
  }
 else 
  if x.$isInstanceOf$[scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing]] then 
    {
      case val x2: scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing] = 
        x.asInstanceOf[scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing]]
      (x2: scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing]).ks.map[
        scala.collection.immutable.HashSet[Nothing]
      , scala.collection.immutable.ListSet[scala.collection.immutable.HashSet[Nothing]]](
        {
          def $anonfun(x: x.A): scala.collection.immutable.HashSet[Nothing] = 
            scala.collection.immutable.HashSet.apply[Nothing](Predef.genericWrapArray[Nothing]([x : Nothing]))
          closure($anonfun)
        }
      )(scala.collection.immutable.ListSet.canBuildFrom[scala.collection.immutable.HashSet[Nothing]]).toArray[
        scala.collection.immutable.HashSet[Nothing]
      ](scala.reflect.ClassTag.apply[scala.collection.immutable.HashSet[Nothing]](classOf[class HashSet]))
    }
   else throw new MatchError(x) of class class dotty.tools.dotc.ast.Trees$If # 1067145
exception while typing (if x.$isInstanceOf$[scala.collection.immutable.HashMap.HashMapCollision1[_, _]] then 
  {
    case val x3: scala.collection.immutable.HashMap.HashMapCollision1[_, _] = 
      x.asInstanceOf[scala.collection.immutable.HashMap.HashMapCollision1[_, _]]
    (x3: scala.collection.immutable.HashMap.HashMapCollision1[_, _]).kvs.map[
      scala.collection.immutable.HashMap[x.A, Any]
    , scala.collection.immutable.Iterable[scala.collection.immutable.HashMap[x.A, Any]]](
      {
        def $anonfun(x: (x.A, x.B @uncheckedVariance)): scala.collection.immutable.HashMap[x.A, Any] = 
          scala.collection.immutable.HashMap.apply[x.A, Any](Predef.wrapRefArray[(x.A, Any)]([x : (x.A, Any)]))
        closure($anonfun)
      }
    )(scala.collection.immutable.Iterable.canBuildFrom[scala.collection.immutable.HashMap[x.A, Any]]).toArray[
      scala.collection.immutable.HashMap[x.A, Any]
    ](scala.reflect.ClassTag.apply[scala.collection.immutable.HashMap[x.A, Any]](classOf[class HashMap])): Array[_]
  }
 else 
  if x.$isInstanceOf$[scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing]] then 
    {
      case val x2: scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing] = 
        x.asInstanceOf[scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing]]
      (x2: scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing]).ks.map[
        scala.collection.immutable.HashSet[Nothing]
      , scala.collection.immutable.ListSet[scala.collection.immutable.HashSet[Nothing]]](
        {
          def $anonfun(x: x.A): scala.collection.immutable.HashSet[Nothing] = 
            scala.collection.immutable.HashSet.apply[Nothing](Predef.genericWrapArray[Nothing]([x : Nothing]))
          closure($anonfun)
        }
      )(scala.collection.immutable.ListSet.canBuildFrom[scala.collection.immutable.HashSet[Nothing]]).toArray[
        scala.collection.immutable.HashSet[Nothing]
      ](scala.reflect.ClassTag.apply[scala.collection.immutable.HashSet[Nothing]](classOf[class HashSet]))
    }
   else throw new MatchError(x)
).asInstanceOf of class class dotty.tools.dotc.ast.Trees$Select # 1067146
exception while typing (if x.$isInstanceOf$[scala.collection.immutable.HashMap.HashMapCollision1[_, _]] then 
  {
    case val x3: scala.collection.immutable.HashMap.HashMapCollision1[_, _] = 
      x.asInstanceOf[scala.collection.immutable.HashMap.HashMapCollision1[_, _]]
    (x3: scala.collection.immutable.HashMap.HashMapCollision1[_, _]).kvs.map[
      scala.collection.immutable.HashMap[x.A, Any]
    , scala.collection.immutable.Iterable[scala.collection.immutable.HashMap[x.A, Any]]](
      {
        def $anonfun(x: (x.A, x.B @uncheckedVariance)): scala.collection.immutable.HashMap[x.A, Any] = 
          scala.collection.immutable.HashMap.apply[x.A, Any](Predef.wrapRefArray[(x.A, Any)]([x : (x.A, Any)]))
        closure($anonfun)
      }
    )(scala.collection.immutable.Iterable.canBuildFrom[scala.collection.immutable.HashMap[x.A, Any]]).toArray[
      scala.collection.immutable.HashMap[x.A, Any]
    ](scala.reflect.ClassTag.apply[scala.collection.immutable.HashMap[x.A, Any]](classOf[class HashMap])): Array[_]
  }
 else 
  if x.$isInstanceOf$[scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing]] then 
    {
      case val x2: scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing] = 
        x.asInstanceOf[scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing]]
      (x2: scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing]).ks.map[
        scala.collection.immutable.HashSet[Nothing]
      , scala.collection.immutable.ListSet[scala.collection.immutable.HashSet[Nothing]]](
        {
          def $anonfun(x: x.A): scala.collection.immutable.HashSet[Nothing] = 
            scala.collection.immutable.HashSet.apply[Nothing](Predef.genericWrapArray[Nothing]([x : Nothing]))
          closure($anonfun)
        }
      )(scala.collection.immutable.ListSet.canBuildFrom[scala.collection.immutable.HashSet[Nothing]]).toArray[
        scala.collection.immutable.HashSet[Nothing]
      ](scala.reflect.ClassTag.apply[scala.collection.immutable.HashSet[Nothing]](classOf[class HashSet]))
    }
   else throw new MatchError(x)
).asInstanceOf[Array[scala.collection.immutable.Iterable[T]]] of class class dotty.tools.dotc.ast.Trees$TypeApply # 1067147
exception while typing private def collisionToArray[T](x: scala.collection.immutable.Iterable[T]): 
  Array[scala.collection.immutable.Iterable[T]]
 = 
  (if x.$isInstanceOf$[scala.collection.immutable.HashMap.HashMapCollision1[_, _]] then 
    {
      case val x3: scala.collection.immutable.HashMap.HashMapCollision1[_, _] = 
        x.asInstanceOf[scala.collection.immutable.HashMap.HashMapCollision1[_, _]]
      (x3: scala.collection.immutable.HashMap.HashMapCollision1[_, _]).kvs.map[
        scala.collection.immutable.HashMap[x.A, Any]
      , scala.collection.immutable.Iterable[scala.collection.immutable.HashMap[x.A, Any]]](
        {
          def $anonfun(x: (x.A, x.B @uncheckedVariance)): scala.collection.immutable.HashMap[x.A, Any] = 
            scala.collection.immutable.HashMap.apply[x.A, Any](Predef.wrapRefArray[(x.A, Any)]([x : (x.A, Any)]))
          closure($anonfun)
        }
      )(scala.collection.immutable.Iterable.canBuildFrom[scala.collection.immutable.HashMap[x.A, Any]]).toArray[
        scala.collection.immutable.HashMap[x.A, Any]
      ](scala.reflect.ClassTag.apply[scala.collection.immutable.HashMap[x.A, Any]](classOf[class HashMap])): Array[_]
    }
   else 
    if x.$isInstanceOf$[scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing]] then 
      {
        case val x2: scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing] = 
          x.asInstanceOf[scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing]]
        (x2: scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing]).ks.map[
          scala.collection.immutable.HashSet[Nothing]
        , scala.collection.immutable.ListSet[scala.collection.immutable.HashSet[Nothing]]](
          {
            def $anonfun(x: x.A): scala.collection.immutable.HashSet[Nothing] = 
              scala.collection.immutable.HashSet.apply[Nothing](Predef.genericWrapArray[Nothing]([x : Nothing]))
            closure($anonfun)
          }
        )(scala.collection.immutable.ListSet.canBuildFrom[scala.collection.immutable.HashSet[Nothing]]).toArray[
          scala.collection.immutable.HashSet[Nothing]
        ](scala.reflect.ClassTag.apply[scala.collection.immutable.HashSet[Nothing]](classOf[class HashSet]))
      }
     else throw new MatchError(x)
  ).asInstanceOf[Array[scala.collection.immutable.Iterable[T]]] of class class dotty.tools.dotc.ast.Trees$DefDef # 1067148
exception while typing @scala.annotation.internal.SourceFile(
  "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/i996.scala"
) final module class i996() extends Object() { 
  private def collisionToArray[T](x: scala.collection.immutable.Iterable[T]): 
    Array[scala.collection.immutable.Iterable[T]]
   = 
    (if x.$isInstanceOf$[scala.collection.immutable.HashMap.HashMapCollision1[_, _]] then 
      {
        case val x3: scala.collection.immutable.HashMap.HashMapCollision1[_, _] = 
          x.asInstanceOf[scala.collection.immutable.HashMap.HashMapCollision1[_, _]]
        (x3: scala.collection.immutable.HashMap.HashMapCollision1[_, _]).kvs.map[
          scala.collection.immutable.HashMap[x.A, Any]
        , scala.collection.immutable.Iterable[scala.collection.immutable.HashMap[x.A, Any]]](
          {
            def $anonfun(x: (x.A, x.B @uncheckedVariance)): scala.collection.immutable.HashMap[x.A, Any] = 
              scala.collection.immutable.HashMap.apply[x.A, Any](Predef.wrapRefArray[(x.A, Any)]([x : (x.A, Any)]))
            closure($anonfun)
          }
        )(scala.collection.immutable.Iterable.canBuildFrom[scala.collection.immutable.HashMap[x.A, Any]]).toArray[
          scala.collection.immutable.HashMap[x.A, Any]
        ](scala.reflect.ClassTag.apply[scala.collection.immutable.HashMap[x.A, Any]](classOf[class HashMap])): Array[_]
      }
     else 
      if x.$isInstanceOf$[scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing]] then 
        {
          case val x2: scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing] = 
            x.asInstanceOf[scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing]]
          (x2: scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing]).ks.map[
            scala.collection.immutable.HashSet[Nothing]
          , scala.collection.immutable.ListSet[scala.collection.immutable.HashSet[Nothing]]](
            {
              def $anonfun(x: x.A): scala.collection.immutable.HashSet[Nothing] = 
                scala.collection.immutable.HashSet.apply[Nothing](Predef.genericWrapArray[Nothing]([x : Nothing]))
              closure($anonfun)
            }
          )(scala.collection.immutable.ListSet.canBuildFrom[scala.collection.immutable.HashSet[Nothing]]).toArray[
            scala.collection.immutable.HashSet[Nothing]
          ](scala.reflect.ClassTag.apply[scala.collection.immutable.HashSet[Nothing]](classOf[class HashSet]))
        }
       else throw new MatchError(x)
    ).asInstanceOf[Array[scala.collection.immutable.Iterable[T]]]
} of class class dotty.tools.dotc.ast.Trees$TypeDef # 1067150
exception while typing package scala.collection.immutable {
  final lazy module val i996: scala.collection.immutable.i996 = new scala.collection.immutable.i996()
  @scala.annotation.internal.SourceFile(
    "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/i996.scala"
  ) final module class i996() extends Object() { 
    private def collisionToArray[T](x: scala.collection.immutable.Iterable[T]): 
      Array[scala.collection.immutable.Iterable[T]]
     = 
      (if x.$isInstanceOf$[scala.collection.immutable.HashMap.HashMapCollision1[_, _]] then 
        {
          case val x3: scala.collection.immutable.HashMap.HashMapCollision1[_, _] = 
            x.asInstanceOf[scala.collection.immutable.HashMap.HashMapCollision1[_, _]]
          (x3: scala.collection.immutable.HashMap.HashMapCollision1[_, _]).kvs.map[
            scala.collection.immutable.HashMap[x.A, Any]
          , scala.collection.immutable.Iterable[scala.collection.immutable.HashMap[x.A, Any]]](
            {
              def $anonfun(x: (x.A, x.B @uncheckedVariance)): scala.collection.immutable.HashMap[x.A, Any] = 
                scala.collection.immutable.HashMap.apply[x.A, Any](Predef.wrapRefArray[(x.A, Any)]([x : (x.A, Any)]))
              closure($anonfun)
            }
          )(scala.collection.immutable.Iterable.canBuildFrom[scala.collection.immutable.HashMap[x.A, Any]]).toArray[
            scala.collection.immutable.HashMap[x.A, Any]
          ](scala.reflect.ClassTag.apply[scala.collection.immutable.HashMap[x.A, Any]](classOf[class HashMap])): 
            Array[_]
        }
       else 
        if x.$isInstanceOf$[scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing]] then 
          {
            case val x2: scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing] = 
              x.asInstanceOf[scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing]]
            (x2: scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing]).ks.map[
              scala.collection.immutable.HashSet[Nothing]
            , scala.collection.immutable.ListSet[scala.collection.immutable.HashSet[Nothing]]](
              {
                def $anonfun(x: x.A): scala.collection.immutable.HashSet[Nothing] = 
                  scala.collection.immutable.HashSet.apply[Nothing](Predef.genericWrapArray[Nothing]([x : Nothing]))
                closure($anonfun)
              }
            )(scala.collection.immutable.ListSet.canBuildFrom[scala.collection.immutable.HashSet[Nothing]]).toArray[
              scala.collection.immutable.HashSet[Nothing]
            ](scala.reflect.ClassTag.apply[scala.collection.immutable.HashSet[Nothing]](classOf[class HashSet]))
          }
         else throw new MatchError(x)
      ).asInstanceOf[Array[scala.collection.immutable.Iterable[T]]]
  }
} of class class dotty.tools.dotc.ast.Trees$PackageDef # 1067151
exception while typing package collection {
  package scala.collection.immutable {
    final lazy module val i996: scala.collection.immutable.i996 = new scala.collection.immutable.i996()
    @scala.annotation.internal.SourceFile(
      "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/i996.scala"
    ) final module class i996() extends Object() { 
      private def collisionToArray[T](x: scala.collection.immutable.Iterable[T]): 
        Array[scala.collection.immutable.Iterable[T]]
       = 
        (if x.$isInstanceOf$[scala.collection.immutable.HashMap.HashMapCollision1[_, _]] then 
          {
            case val x3: scala.collection.immutable.HashMap.HashMapCollision1[_, _] = 
              x.asInstanceOf[scala.collection.immutable.HashMap.HashMapCollision1[_, _]]
            (x3: scala.collection.immutable.HashMap.HashMapCollision1[_, _]).kvs.map[
              scala.collection.immutable.HashMap[x.A, Any]
            , scala.collection.immutable.Iterable[scala.collection.immutable.HashMap[x.A, Any]]](
              {
                def $anonfun(x: (x.A, x.B @uncheckedVariance)): scala.collection.immutable.HashMap[x.A, Any] = 
                  scala.collection.immutable.HashMap.apply[x.A, Any](Predef.wrapRefArray[(x.A, Any)]([x : (x.A, Any)]))
                closure($anonfun)
              }
            )(scala.collection.immutable.Iterable.canBuildFrom[scala.collection.immutable.HashMap[x.A, Any]]).toArray[
              scala.collection.immutable.HashMap[x.A, Any]
            ](scala.reflect.ClassTag.apply[scala.collection.immutable.HashMap[x.A, Any]](classOf[class HashMap])): 
              Array[_]
          }
         else 
          if x.$isInstanceOf$[scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing]] then 
            {
              case val x2: scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing] = 
                x.asInstanceOf[scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing]]
              (x2: scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing]).ks.map[
                scala.collection.immutable.HashSet[Nothing]
              , scala.collection.immutable.ListSet[scala.collection.immutable.HashSet[Nothing]]](
                {
                  def $anonfun(x: x.A): scala.collection.immutable.HashSet[Nothing] = 
                    scala.collection.immutable.HashSet.apply[Nothing](Predef.genericWrapArray[Nothing]([x : Nothing]))
                  closure($anonfun)
                }
              )(scala.collection.immutable.ListSet.canBuildFrom[scala.collection.immutable.HashSet[Nothing]]).toArray[
                scala.collection.immutable.HashSet[Nothing]
              ](scala.reflect.ClassTag.apply[scala.collection.immutable.HashSet[Nothing]](classOf[class HashSet]))
            }
           else throw new MatchError(x)
        ).asInstanceOf[Array[scala.collection.immutable.Iterable[T]]]
    }
  }
} of class class dotty.tools.dotc.ast.Trees$PackageDef # 1067152
exception while typing package scala {
  package collection {
    package scala.collection.immutable {
      final lazy module val i996: scala.collection.immutable.i996 = new scala.collection.immutable.i996()
      @scala.annotation.internal.SourceFile(
        "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/i996.scala"
      ) final module class i996() extends Object() { 
        private def collisionToArray[T](x: scala.collection.immutable.Iterable[T]): 
          Array[scala.collection.immutable.Iterable[T]]
         = 
          (if x.$isInstanceOf$[scala.collection.immutable.HashMap.HashMapCollision1[_, _]] then 
            {
              case val x3: scala.collection.immutable.HashMap.HashMapCollision1[_, _] = 
                x.asInstanceOf[scala.collection.immutable.HashMap.HashMapCollision1[_, _]]
              (x3: scala.collection.immutable.HashMap.HashMapCollision1[_, _]).kvs.map[
                scala.collection.immutable.HashMap[x.A, Any]
              , scala.collection.immutable.Iterable[scala.collection.immutable.HashMap[x.A, Any]]](
                {
                  def $anonfun(x: (x.A, x.B @uncheckedVariance)): scala.collection.immutable.HashMap[x.A, Any] = 
                    scala.collection.immutable.HashMap.apply[x.A, Any](Predef.wrapRefArray[(x.A, Any)]([x : (x.A, Any)])
                      )
                  closure($anonfun)
                }
              )(scala.collection.immutable.Iterable.canBuildFrom[scala.collection.immutable.HashMap[x.A, Any]]).toArray[
                scala.collection.immutable.HashMap[x.A, Any]
              ](scala.reflect.ClassTag.apply[scala.collection.immutable.HashMap[x.A, Any]](classOf[class HashMap])): 
                Array[_]
            }
           else 
            if x.$isInstanceOf$[scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing]] then 
              {
                case val x2: scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing] = 
                  x.asInstanceOf[scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing]]
                (x2: scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing]).ks.map[
                  scala.collection.immutable.HashSet[Nothing]
                , scala.collection.immutable.ListSet[scala.collection.immutable.HashSet[Nothing]]](
                  {
                    def $anonfun(x: x.A): scala.collection.immutable.HashSet[Nothing] = 
                      scala.collection.immutable.HashSet.apply[Nothing](Predef.genericWrapArray[Nothing]([x : Nothing]))
                    closure($anonfun)
                  }
                )(scala.collection.immutable.ListSet.canBuildFrom[scala.collection.immutable.HashSet[Nothing]]).toArray[
                  scala.collection.immutable.HashSet[Nothing]
                ](scala.reflect.ClassTag.apply[scala.collection.immutable.HashSet[Nothing]](classOf[class HashSet]))
              }
             else throw new MatchError(x)
          ).asInstanceOf[Array[scala.collection.immutable.Iterable[T]]]
      }
    }
  }
} of class class dotty.tools.dotc.ast.Trees$PackageDef # 1067153
*** error while checking /mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/i996.scala after phase arrayConstructors ***
[=======================>               ] completed (578/940, 66s)[=======================>               ] completed (578/940, 66s)[=======================>               ] completed (578/940, 67s)[=======================>               ] completed (579/940, 67s)inlining x3
inlining x2
[=======================>               ] completed (579/940, 67s)exception while typing {
  def $anonfun(x: (x.A, x.B @uncheckedVariance)): scala.collection.immutable.HashMap[x.A, Any] = 
    scala.collection.immutable.HashMap.apply[x.A, Any](Predef.wrapRefArray[(x.A, Any)]([x : (x.A, Any)]))
  closure($anonfun)
} of class class dotty.tools.dotc.ast.Trees$Block # 1069310
exception while typing (x3: scala.collection.immutable.HashMap.HashMapCollision1[_, _]).kvs.map[scala.collection.immutable.HashMap[x.A, Any], 
  scala.collection.immutable.Iterable[scala.collection.immutable.HashMap[x.A, Any]]
](
  {
    def $anonfun(x: (x.A, x.B @uncheckedVariance)): scala.collection.immutable.HashMap[x.A, Any] = 
      scala.collection.immutable.HashMap.apply[x.A, Any](Predef.wrapRefArray[(x.A, Any)]([x : (x.A, Any)]))
    closure($anonfun)
  }
) of class class dotty.tools.dotc.ast.Trees$Apply # 1069497
exception while typing (x3: scala.collection.immutable.HashMap.HashMapCollision1[_, _]).kvs.map[scala.collection.immutable.HashMap[x.A, Any], 
  scala.collection.immutable.Iterable[scala.collection.immutable.HashMap[x.A, Any]]
](
  {
    def $anonfun(x: (x.A, x.B @uncheckedVariance)): scala.collection.immutable.HashMap[x.A, Any] = 
      scala.collection.immutable.HashMap.apply[x.A, Any](Predef.wrapRefArray[(x.A, Any)]([x : (x.A, Any)]))
    closure($anonfun)
  }
)(scala.collection.immutable.Iterable.canBuildFrom[scala.collection.immutable.HashMap[x.A, Any]]) of class class dotty.tools.dotc.ast.Trees$Apply # 1069498
exception while typing (x3: scala.collection.immutable.HashMap.HashMapCollision1[_, _]).kvs.map[scala.collection.immutable.HashMap[x.A, Any], 
  scala.collection.immutable.Iterable[scala.collection.immutable.HashMap[x.A, Any]]
](
  {
    def $anonfun(x: (x.A, x.B @uncheckedVariance)): scala.collection.immutable.HashMap[x.A, Any] = 
      scala.collection.immutable.HashMap.apply[x.A, Any](Predef.wrapRefArray[(x.A, Any)]([x : (x.A, Any)]))
    closure($anonfun)
  }
)(scala.collection.immutable.Iterable.canBuildFrom[scala.collection.immutable.HashMap[x.A, Any]]).toArray of class class dotty.tools.dotc.ast.Trees$Select # 1069499
exception while typing (x3: scala.collection.immutable.HashMap.HashMapCollision1[_, _]).kvs.map[scala.collection.immutable.HashMap[x.A, Any], 
  scala.collection.immutable.Iterable[scala.collection.immutable.HashMap[x.A, Any]]
](
  {
    def $anonfun(x: (x.A, x.B @uncheckedVariance)): scala.collection.immutable.HashMap[x.A, Any] = 
      scala.collection.immutable.HashMap.apply[x.A, Any](Predef.wrapRefArray[(x.A, Any)]([x : (x.A, Any)]))
    closure($anonfun)
  }
)(scala.collection.immutable.Iterable.canBuildFrom[scala.collection.immutable.HashMap[x.A, Any]]).toArray[
  scala.collection.immutable.HashMap[x.A, Any]
] of class class dotty.tools.dotc.ast.Trees$TypeApply # 1069500
exception while typing (x3: scala.collection.immutable.HashMap.HashMapCollision1[_, _]).kvs.map[scala.collection.immutable.HashMap[x.A, Any], 
  scala.collection.immutable.Iterable[scala.collection.immutable.HashMap[x.A, Any]]
](
  {
    def $anonfun(x: (x.A, x.B @uncheckedVariance)): scala.collection.immutable.HashMap[x.A, Any] = 
      scala.collection.immutable.HashMap.apply[x.A, Any](Predef.wrapRefArray[(x.A, Any)]([x : (x.A, Any)]))
    closure($anonfun)
  }
)(scala.collection.immutable.Iterable.canBuildFrom[scala.collection.immutable.HashMap[x.A, Any]]).toArray[
  scala.collection.immutable.HashMap[x.A, Any]
](scala.reflect.ClassTag.apply[scala.collection.immutable.HashMap[x.A, Any]](classOf[class HashMap])) of class class dotty.tools.dotc.ast.Trees$Apply # 1069501
exception while typing (x3: scala.collection.immutable.HashMap.HashMapCollision1[_, _]).kvs.map[scala.collection.immutable.HashMap[x.A, Any], 
  scala.collection.immutable.Iterable[scala.collection.immutable.HashMap[x.A, Any]]
](
  {
    def $anonfun(x: (x.A, x.B @uncheckedVariance)): scala.collection.immutable.HashMap[x.A, Any] = 
      scala.collection.immutable.HashMap.apply[x.A, Any](Predef.wrapRefArray[(x.A, Any)]([x : (x.A, Any)]))
    closure($anonfun)
  }
)(scala.collection.immutable.Iterable.canBuildFrom[scala.collection.immutable.HashMap[x.A, Any]]).toArray[
  scala.collection.immutable.HashMap[x.A, Any]
](scala.reflect.ClassTag.apply[scala.collection.immutable.HashMap[x.A, Any]](classOf[class HashMap])): Array[_] of class class dotty.tools.dotc.ast.Trees$Typed # 1069502
exception while typing {
  case val x3: scala.collection.immutable.HashMap.HashMapCollision1[_, _] = 
    x.asInstanceOf[scala.collection.immutable.HashMap.HashMapCollision1[_, _]]
  (x3: scala.collection.immutable.HashMap.HashMapCollision1[_, _]).kvs.map[scala.collection.immutable.HashMap[x.A, Any]
    , 
  scala.collection.immutable.Iterable[scala.collection.immutable.HashMap[x.A, Any]]](
    {
      def $anonfun(x: (x.A, x.B @uncheckedVariance)): scala.collection.immutable.HashMap[x.A, Any] = 
        scala.collection.immutable.HashMap.apply[x.A, Any](Predef.wrapRefArray[(x.A, Any)]([x : (x.A, Any)]))
      closure($anonfun)
    }
  )(scala.collection.immutable.Iterable.canBuildFrom[scala.collection.immutable.HashMap[x.A, Any]]).toArray[
    scala.collection.immutable.HashMap[x.A, Any]
  ](scala.reflect.ClassTag.apply[scala.collection.immutable.HashMap[x.A, Any]](classOf[class HashMap])): Array[_]
} of class class dotty.tools.dotc.ast.Trees$Block # 1069503
exception while typing if x.$isInstanceOf$[scala.collection.immutable.HashMap.HashMapCollision1[_, _]] then 
  {
    case val x3: scala.collection.immutable.HashMap.HashMapCollision1[_, _] = 
      x.asInstanceOf[scala.collection.immutable.HashMap.HashMapCollision1[_, _]]
    (x3: scala.collection.immutable.HashMap.HashMapCollision1[_, _]).kvs.map[
      scala.collection.immutable.HashMap[x.A, Any]
    , scala.collection.immutable.Iterable[scala.collection.immutable.HashMap[x.A, Any]]](
      {
        def $anonfun(x: (x.A, x.B @uncheckedVariance)): scala.collection.immutable.HashMap[x.A, Any] = 
          scala.collection.immutable.HashMap.apply[x.A, Any](Predef.wrapRefArray[(x.A, Any)]([x : (x.A, Any)]))
        closure($anonfun)
      }
    )(scala.collection.immutable.Iterable.canBuildFrom[scala.collection.immutable.HashMap[x.A, Any]]).toArray[
      scala.collection.immutable.HashMap[x.A, Any]
    ](scala.reflect.ClassTag.apply[scala.collection.immutable.HashMap[x.A, Any]](classOf[class HashMap])): Array[_]
  }
 else 
  if x.$isInstanceOf$[scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing]] then 
    {
      case val x2: scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing] = 
        x.asInstanceOf[scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing]]
      (x2: scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing]).ks.map[
        scala.collection.immutable.HashSet[Nothing]
      , scala.collection.immutable.ListSet[scala.collection.immutable.HashSet[Nothing]]](
        {
          def $anonfun(x: x.A): scala.collection.immutable.HashSet[Nothing] = 
            scala.collection.immutable.HashSet.apply[Nothing](Predef.genericWrapArray[Nothing]([x : Nothing]))
          closure($anonfun)
        }
      )(scala.collection.immutable.ListSet.canBuildFrom[scala.collection.immutable.HashSet[Nothing]]).toArray[
        scala.collection.immutable.HashSet[Nothing]
      ](scala.reflect.ClassTag.apply[scala.collection.immutable.HashSet[Nothing]](classOf[class HashSet]))
    }
   else throw new MatchError(x) of class class dotty.tools.dotc.ast.Trees$If # 1069531
exception while typing (if x.$isInstanceOf$[scala.collection.immutable.HashMap.HashMapCollision1[_, _]] then 
  {
    case val x3: scala.collection.immutable.HashMap.HashMapCollision1[_, _] = 
      x.asInstanceOf[scala.collection.immutable.HashMap.HashMapCollision1[_, _]]
    (x3: scala.collection.immutable.HashMap.HashMapCollision1[_, _]).kvs.map[
      scala.collection.immutable.HashMap[x.A, Any]
    , scala.collection.immutable.Iterable[scala.collection.immutable.HashMap[x.A, Any]]](
      {
        def $anonfun(x: (x.A, x.B @uncheckedVariance)): scala.collection.immutable.HashMap[x.A, Any] = 
          scala.collection.immutable.HashMap.apply[x.A, Any](Predef.wrapRefArray[(x.A, Any)]([x : (x.A, Any)]))
        closure($anonfun)
      }
    )(scala.collection.immutable.Iterable.canBuildFrom[scala.collection.immutable.HashMap[x.A, Any]]).toArray[
      scala.collection.immutable.HashMap[x.A, Any]
    ](scala.reflect.ClassTag.apply[scala.collection.immutable.HashMap[x.A, Any]](classOf[class HashMap])): Array[_]
  }
 else 
  if x.$isInstanceOf$[scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing]] then 
    {
      case val x2: scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing] = 
        x.asInstanceOf[scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing]]
      (x2: scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing]).ks.map[
        scala.collection.immutable.HashSet[Nothing]
      , scala.collection.immutable.ListSet[scala.collection.immutable.HashSet[Nothing]]](
        {
          def $anonfun(x: x.A): scala.collection.immutable.HashSet[Nothing] = 
            scala.collection.immutable.HashSet.apply[Nothing](Predef.genericWrapArray[Nothing]([x : Nothing]))
          closure($anonfun)
        }
      )(scala.collection.immutable.ListSet.canBuildFrom[scala.collection.immutable.HashSet[Nothing]]).toArray[
        scala.collection.immutable.HashSet[Nothing]
      ](scala.reflect.ClassTag.apply[scala.collection.immutable.HashSet[Nothing]](classOf[class HashSet]))
    }
   else throw new MatchError(x)
).asInstanceOf of class class dotty.tools.dotc.ast.Trees$Select # 1069532
exception while typing (if x.$isInstanceOf$[scala.collection.immutable.HashMap.HashMapCollision1[_, _]] then 
  {
    case val x3: scala.collection.immutable.HashMap.HashMapCollision1[_, _] = 
      x.asInstanceOf[scala.collection.immutable.HashMap.HashMapCollision1[_, _]]
    (x3: scala.collection.immutable.HashMap.HashMapCollision1[_, _]).kvs.map[
      scala.collection.immutable.HashMap[x.A, Any]
    , scala.collection.immutable.Iterable[scala.collection.immutable.HashMap[x.A, Any]]](
      {
        def $anonfun(x: (x.A, x.B @uncheckedVariance)): scala.collection.immutable.HashMap[x.A, Any] = 
          scala.collection.immutable.HashMap.apply[x.A, Any](Predef.wrapRefArray[(x.A, Any)]([x : (x.A, Any)]))
        closure($anonfun)
      }
    )(scala.collection.immutable.Iterable.canBuildFrom[scala.collection.immutable.HashMap[x.A, Any]]).toArray[
      scala.collection.immutable.HashMap[x.A, Any]
    ](scala.reflect.ClassTag.apply[scala.collection.immutable.HashMap[x.A, Any]](classOf[class HashMap])): Array[_]
  }
 else 
  if x.$isInstanceOf$[scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing]] then 
    {
      case val x2: scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing] = 
        x.asInstanceOf[scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing]]
      (x2: scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing]).ks.map[
        scala.collection.immutable.HashSet[Nothing]
      , scala.collection.immutable.ListSet[scala.collection.immutable.HashSet[Nothing]]](
        {
          def $anonfun(x: x.A): scala.collection.immutable.HashSet[Nothing] = 
            scala.collection.immutable.HashSet.apply[Nothing](Predef.genericWrapArray[Nothing]([x : Nothing]))
          closure($anonfun)
        }
      )(scala.collection.immutable.ListSet.canBuildFrom[scala.collection.immutable.HashSet[Nothing]]).toArray[
        scala.collection.immutable.HashSet[Nothing]
      ](scala.reflect.ClassTag.apply[scala.collection.immutable.HashSet[Nothing]](classOf[class HashSet]))
    }
   else throw new MatchError(x)
).asInstanceOf[Array[scala.collection.immutable.Iterable[T]]] of class class dotty.tools.dotc.ast.Trees$TypeApply # 1069533
exception while typing private def collisionToArray[T](x: scala.collection.immutable.Iterable[T]): 
  Array[scala.collection.immutable.Iterable[T]]
 = 
  (if x.$isInstanceOf$[scala.collection.immutable.HashMap.HashMapCollision1[_, _]] then 
    {
      case val x3: scala.collection.immutable.HashMap.HashMapCollision1[_, _] = 
        x.asInstanceOf[scala.collection.immutable.HashMap.HashMapCollision1[_, _]]
      (x3: scala.collection.immutable.HashMap.HashMapCollision1[_, _]).kvs.map[
        scala.collection.immutable.HashMap[x.A, Any]
      , scala.collection.immutable.Iterable[scala.collection.immutable.HashMap[x.A, Any]]](
        {
          def $anonfun(x: (x.A, x.B @uncheckedVariance)): scala.collection.immutable.HashMap[x.A, Any] = 
            scala.collection.immutable.HashMap.apply[x.A, Any](Predef.wrapRefArray[(x.A, Any)]([x : (x.A, Any)]))
          closure($anonfun)
        }
      )(scala.collection.immutable.Iterable.canBuildFrom[scala.collection.immutable.HashMap[x.A, Any]]).toArray[
        scala.collection.immutable.HashMap[x.A, Any]
      ](scala.reflect.ClassTag.apply[scala.collection.immutable.HashMap[x.A, Any]](classOf[class HashMap])): Array[_]
    }
   else 
    if x.$isInstanceOf$[scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing]] then 
      {
        case val x2: scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing] = 
          x.asInstanceOf[scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing]]
        (x2: scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing]).ks.map[
          scala.collection.immutable.HashSet[Nothing]
        , scala.collection.immutable.ListSet[scala.collection.immutable.HashSet[Nothing]]](
          {
            def $anonfun(x: x.A): scala.collection.immutable.HashSet[Nothing] = 
              scala.collection.immutable.HashSet.apply[Nothing](Predef.genericWrapArray[Nothing]([x : Nothing]))
            closure($anonfun)
          }
        )(scala.collection.immutable.ListSet.canBuildFrom[scala.collection.immutable.HashSet[Nothing]]).toArray[
          scala.collection.immutable.HashSet[Nothing]
        ](scala.reflect.ClassTag.apply[scala.collection.immutable.HashSet[Nothing]](classOf[class HashSet]))
      }
     else throw new MatchError(x)
  ).asInstanceOf[Array[scala.collection.immutable.Iterable[T]]] of class class dotty.tools.dotc.ast.Trees$DefDef # 1069663
exception while typing @scala.annotation.internal.SourceFile(
  "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/i966.scala"
) final module class i996() extends Object() { 
  private def collisionToArray[T](x: scala.collection.immutable.Iterable[T]): 
    Array[scala.collection.immutable.Iterable[T]]
   = 
    (if x.$isInstanceOf$[scala.collection.immutable.HashMap.HashMapCollision1[_, _]] then 
      {
        case val x3: scala.collection.immutable.HashMap.HashMapCollision1[_, _] = 
          x.asInstanceOf[scala.collection.immutable.HashMap.HashMapCollision1[_, _]]
        (x3: scala.collection.immutable.HashMap.HashMapCollision1[_, _]).kvs.map[
          scala.collection.immutable.HashMap[x.A, Any]
        , scala.collection.immutable.Iterable[scala.collection.immutable.HashMap[x.A, Any]]](
          {
            def $anonfun(x: (x.A, x.B @uncheckedVariance)): scala.collection.immutable.HashMap[x.A, Any] = 
              scala.collection.immutable.HashMap.apply[x.A, Any](Predef.wrapRefArray[(x.A, Any)]([x : (x.A, Any)]))
            closure($anonfun)
          }
        )(scala.collection.immutable.Iterable.canBuildFrom[scala.collection.immutable.HashMap[x.A, Any]]).toArray[
          scala.collection.immutable.HashMap[x.A, Any]
        ](scala.reflect.ClassTag.apply[scala.collection.immutable.HashMap[x.A, Any]](classOf[class HashMap])): Array[_]
      }
     else 
      if x.$isInstanceOf$[scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing]] then 
        {
          case val x2: scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing] = 
            x.asInstanceOf[scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing]]
          (x2: scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing]).ks.map[
            scala.collection.immutable.HashSet[Nothing]
          , scala.collection.immutable.ListSet[scala.collection.immutable.HashSet[Nothing]]](
            {
              def $anonfun(x: x.A): scala.collection.immutable.HashSet[Nothing] = 
                scala.collection.immutable.HashSet.apply[Nothing](Predef.genericWrapArray[Nothing]([x : Nothing]))
              closure($anonfun)
            }
          )(scala.collection.immutable.ListSet.canBuildFrom[scala.collection.immutable.HashSet[Nothing]]).toArray[
            scala.collection.immutable.HashSet[Nothing]
          ](scala.reflect.ClassTag.apply[scala.collection.immutable.HashSet[Nothing]](classOf[class HashSet]))
        }
       else throw new MatchError(x)
    ).asInstanceOf[Array[scala.collection.immutable.Iterable[T]]]
} of class class dotty.tools.dotc.ast.Trees$TypeDef # 1069665
exception while typing package scala.collection.immutable {
  final lazy module val i996: scala.collection.immutable.i996 = new scala.collection.immutable.i996()
  @scala.annotation.internal.SourceFile(
    "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/i966.scala"
  ) final module class i996() extends Object() { 
    private def collisionToArray[T](x: scala.collection.immutable.Iterable[T]): 
      Array[scala.collection.immutable.Iterable[T]]
     = 
      (if x.$isInstanceOf$[scala.collection.immutable.HashMap.HashMapCollision1[_, _]] then 
        {
          case val x3: scala.collection.immutable.HashMap.HashMapCollision1[_, _] = 
            x.asInstanceOf[scala.collection.immutable.HashMap.HashMapCollision1[_, _]]
          (x3: scala.collection.immutable.HashMap.HashMapCollision1[_, _]).kvs.map[
            scala.collection.immutable.HashMap[x.A, Any]
          , scala.collection.immutable.Iterable[scala.collection.immutable.HashMap[x.A, Any]]](
            {
              def $anonfun(x: (x.A, x.B @uncheckedVariance)): scala.collection.immutable.HashMap[x.A, Any] = 
                scala.collection.immutable.HashMap.apply[x.A, Any](Predef.wrapRefArray[(x.A, Any)]([x : (x.A, Any)]))
              closure($anonfun)
            }
          )(scala.collection.immutable.Iterable.canBuildFrom[scala.collection.immutable.HashMap[x.A, Any]]).toArray[
            scala.collection.immutable.HashMap[x.A, Any]
          ](scala.reflect.ClassTag.apply[scala.collection.immutable.HashMap[x.A, Any]](classOf[class HashMap])): 
            Array[_]
        }
       else 
        if x.$isInstanceOf$[scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing]] then 
          {
            case val x2: scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing] = 
              x.asInstanceOf[scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing]]
            (x2: scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing]).ks.map[
              scala.collection.immutable.HashSet[Nothing]
            , scala.collection.immutable.ListSet[scala.collection.immutable.HashSet[Nothing]]](
              {
                def $anonfun(x: x.A): scala.collection.immutable.HashSet[Nothing] = 
                  scala.collection.immutable.HashSet.apply[Nothing](Predef.genericWrapArray[Nothing]([x : Nothing]))
                closure($anonfun)
              }
            )(scala.collection.immutable.ListSet.canBuildFrom[scala.collection.immutable.HashSet[Nothing]]).toArray[
              scala.collection.immutable.HashSet[Nothing]
            ](scala.reflect.ClassTag.apply[scala.collection.immutable.HashSet[Nothing]](classOf[class HashSet]))
          }
         else throw new MatchError(x)
      ).asInstanceOf[Array[scala.collection.immutable.Iterable[T]]]
  }
} of class class dotty.tools.dotc.ast.Trees$PackageDef # 1069666
[=======================>               ] completed (579/940, 67s)exception while typing package collection {
  package scala.collection.immutable {
    final lazy module val i996: scala.collection.immutable.i996 = new scala.collection.immutable.i996()
    @scala.annotation.internal.SourceFile(
      "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/i966.scala"
    ) final module class i996() extends Object() { 
      private def collisionToArray[T](x: scala.collection.immutable.Iterable[T]): 
        Array[scala.collection.immutable.Iterable[T]]
       = 
        (if x.$isInstanceOf$[scala.collection.immutable.HashMap.HashMapCollision1[_, _]] then 
          {
            case val x3: scala.collection.immutable.HashMap.HashMapCollision1[_, _] = 
              x.asInstanceOf[scala.collection.immutable.HashMap.HashMapCollision1[_, _]]
            (x3: scala.collection.immutable.HashMap.HashMapCollision1[_, _]).kvs.map[
              scala.collection.immutable.HashMap[x.A, Any]
            , scala.collection.immutable.Iterable[scala.collection.immutable.HashMap[x.A, Any]]](
              {
                def $anonfun(x: (x.A, x.B @uncheckedVariance)): scala.collection.immutable.HashMap[x.A, Any] = 
                  scala.collection.immutable.HashMap.apply[x.A, Any](Predef.wrapRefArray[(x.A, Any)]([x : (x.A, Any)]))
                closure($anonfun)
              }
            )(scala.collection.immutable.Iterable.canBuildFrom[scala.collection.immutable.HashMap[x.A, Any]]).toArray[
              scala.collection.immutable.HashMap[x.A, Any]
            ](scala.reflect.ClassTag.apply[scala.collection.immutable.HashMap[x.A, Any]](classOf[class HashMap])): 
              Array[_]
          }
         else 
          if x.$isInstanceOf$[scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing]] then 
            {
              case val x2: scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing] = 
                x.asInstanceOf[scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing]]
              (x2: scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing]).ks.map[
                scala.collection.immutable.HashSet[Nothing]
              , scala.collection.immutable.ListSet[scala.collection.immutable.HashSet[Nothing]]](
                {
                  def $anonfun(x: x.A): scala.collection.immutable.HashSet[Nothing] = 
                    scala.collection.immutable.HashSet.apply[Nothing](Predef.genericWrapArray[Nothing]([x : Nothing]))
                  closure($anonfun)
                }
              )(scala.collection.immutable.ListSet.canBuildFrom[scala.collection.immutable.HashSet[Nothing]]).toArray[
                scala.collection.immutable.HashSet[Nothing]
              ](scala.reflect.ClassTag.apply[scala.collection.immutable.HashSet[Nothing]](classOf[class HashSet]))
            }
           else throw new MatchError(x)
        ).asInstanceOf[Array[scala.collection.immutable.Iterable[T]]]
    }
  }
} of class class dotty.tools.dotc.ast.Trees$PackageDef # 1069667
exception while typing package scala {
  package collection {
    package scala.collection.immutable {
      final lazy module val i996: scala.collection.immutable.i996 = new scala.collection.immutable.i996()
      @scala.annotation.internal.SourceFile(
        "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/i966.scala"
      ) final module class i996() extends Object() { 
        private def collisionToArray[T](x: scala.collection.immutable.Iterable[T]): 
          Array[scala.collection.immutable.Iterable[T]]
         = 
          (if x.$isInstanceOf$[scala.collection.immutable.HashMap.HashMapCollision1[_, _]] then 
            {
              case val x3: scala.collection.immutable.HashMap.HashMapCollision1[_, _] = 
                x.asInstanceOf[scala.collection.immutable.HashMap.HashMapCollision1[_, _]]
              (x3: scala.collection.immutable.HashMap.HashMapCollision1[_, _]).kvs.map[
                scala.collection.immutable.HashMap[x.A, Any]
              , scala.collection.immutable.Iterable[scala.collection.immutable.HashMap[x.A, Any]]](
                {
                  def $anonfun(x: (x.A, x.B @uncheckedVariance)): scala.collection.immutable.HashMap[x.A, Any] = 
                    scala.collection.immutable.HashMap.apply[x.A, Any](Predef.wrapRefArray[(x.A, Any)]([x : (x.A, Any)])
                      )
                  closure($anonfun)
                }
              )(scala.collection.immutable.Iterable.canBuildFrom[scala.collection.immutable.HashMap[x.A, Any]]).toArray[
                scala.collection.immutable.HashMap[x.A, Any]
              ](scala.reflect.ClassTag.apply[scala.collection.immutable.HashMap[x.A, Any]](classOf[class HashMap])): 
                Array[_]
            }
           else 
            if x.$isInstanceOf$[scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing]] then 
              {
                case val x2: scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing] = 
                  x.asInstanceOf[scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing]]
                (x2: scala.collection.immutable.HashSet.HashSetCollision1[_ <: Nothing]).ks.map[
                  scala.collection.immutable.HashSet[Nothing]
                , scala.collection.immutable.ListSet[scala.collection.immutable.HashSet[Nothing]]](
                  {
                    def $anonfun(x: x.A): scala.collection.immutable.HashSet[Nothing] = 
                      scala.collection.immutable.HashSet.apply[Nothing](Predef.genericWrapArray[Nothing]([x : Nothing]))
                    closure($anonfun)
                  }
                )(scala.collection.immutable.ListSet.canBuildFrom[scala.collection.immutable.HashSet[Nothing]]).toArray[
                  scala.collection.immutable.HashSet[Nothing]
                ](scala.reflect.ClassTag.apply[scala.collection.immutable.HashSet[Nothing]](classOf[class HashSet]))
              }
             else throw new MatchError(x)
          ).asInstanceOf[Array[scala.collection.immutable.Iterable[T]]]
      }
    }
  }
} of class class dotty.tools.dotc.ast.Trees$PackageDef # 1069668
*** error while checking /mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/i966.scala after phase arrayConstructors ***
[=======================>               ] completed (581/940, 67s)[=======================>               ] completed (581/940, 67s)[=======================>               ] completed (582/940, 67s)[=======================>               ] completed (582/940, 67s)[=======================>               ] completed (582/940, 67s)[=======================>               ] completed (582/940, 68s)[=======================>               ] completed (582/940, 68s)[=======================>               ] completed (582/940, 68s)[=======================>               ] completed (582/940, 68s)[=======================>               ] completed (582/940, 68s)[=======================>               ] completed (583/940, 68s)[=======================>               ] completed (583/940, 68s)[=======================>               ] completed (583/940, 68s)inlining {
  def $anonfun(_$1: Int): Boolean = Test.contains("", _$1: Int)
  closure($anonfun)
}
inlining {
  def $anonfun(_$5: Int): Boolean = augmentString("").contains[Any](new Tuple2[String, Int]("", _$5: Int))
  closure($anonfun)
}
exception while typing {
  def $anonfun(_$1: Int): Boolean = Test.contains("", _$1: Int)
  closure($anonfun)
} of class class dotty.tools.dotc.ast.Trees$Block # 1101194
exception while typing {
  def $anonfun(_$1: Int): Boolean = Test.contains("", _$1: Int)
  closure($anonfun)
}: (Int => Boolean) of class class dotty.tools.dotc.ast.Trees$Typed # 1101196
exception while typing (
  {
    def $anonfun(_$1: Int): Boolean = Test.contains("", _$1: Int)
    closure($anonfun)
  }
: (Int => Boolean)).apply of class class dotty.tools.dotc.ast.Trees$Select # 1101197
exception while typing (
  {
    def $anonfun(_$1: Int): Boolean = Test.contains("", _$1: Int)
    closure($anonfun)
  }
: (Int => Boolean)).apply(0) of class class dotty.tools.dotc.ast.Trees$Apply # 1101198
exception while typing def test1: Boolean = 
  (
    {
      def $anonfun(_$1: Int): Boolean = Test.contains("", _$1: Int)
      closure($anonfun)
    }
  : (Int => Boolean)).apply(0) of class class dotty.tools.dotc.ast.Trees$DefDef # 1101200
exception while typing @scala.annotation.internal.SourceFile(
  "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/i903.scala"
) final module class Test() extends Object() { 
  def contains(s: String, i: Int): Boolean = true
  def test1: Boolean = 
    (
      {
        def $anonfun(_$1: Int): Boolean = Test.contains("", _$1: Int)
        closure($anonfun)
      }
    : (Int => Boolean)).apply(0)
  def test2: Boolean = 
    (
      {
        def $anonfun(_$5: Int): Boolean = augmentString("").contains[Any](new Tuple2[String, Int]("", _$5: Int))
        closure($anonfun)
      }
    : (Int => Boolean)).apply(0)
} of class class dotty.tools.dotc.ast.Trees$TypeDef # 1101236
exception while typing package <empty> {
  final lazy module val Test: Test = new Test()
  @scala.annotation.internal.SourceFile(
    "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/i903.scala"
  ) final module class Test() extends Object() { 
    def contains(s: String, i: Int): Boolean = true
    def test1: Boolean = 
      (
        {
          def $anonfun(_$1: Int): Boolean = Test.contains("", _$1: Int)
          closure($anonfun)
        }
      : (Int => Boolean)).apply(0)
    def test2: Boolean = 
      (
        {
          def $anonfun(_$5: Int): Boolean = augmentString("").contains[Any](new Tuple2[String, Int]("", _$5: Int))
          closure($anonfun)
        }
      : (Int => Boolean)).apply(0)
  }
} of class class dotty.tools.dotc.ast.Trees$PackageDef # 1101237
*** error while checking /mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/i903.scala after phase arrayConstructors ***
[=======================>               ] completed (584/940, 68s)[=======================>               ] completed (584/940, 68s)[=======================>               ] completed (584/940, 69s)[=======================>               ] completed (584/940, 69s)[=======================>               ] completed (585/940, 69s)[=======================>               ] completed (585/940, 69s)[=======================>               ] completed (585/940, 69s)[=======================>               ] completed (586/940, 69s)[=======================>               ] completed (586/940, 69s)[=======================>               ] completed (586/940, 69s)[=======================>               ] completed (587/940, 69s)[========================>              ] completed (588/940, 69s)[========================>              ] completed (588/940, 70s)[========================>              ] completed (589/940, 70s)[========================>              ] completed (590/940, 70s)[========================>              ] completed (590/940, 70s)[========================>              ] completed (590/940, 70s)[========================>              ] completed (591/940, 70s)[========================>              ] completed (591/940, 70s)[========================>              ] completed (591/940, 70s)[========================>              ] completed (592/940, 70s)[========================>              ] completed (592/940, 70s)[========================>              ] completed (592/940, 71s)[========================>              ] completed (592/940, 71s)[========================>              ] completed (594/940, 71s)[========================>              ] completed (594/940, 71s)[========================>              ] completed (595/940, 71s)[========================>              ] completed (595/940, 71s)[========================>              ] completed (597/940, 71s)[========================>              ] completed (598/940, 71s)[========================>              ] completed (598/940, 71s)[========================>              ] completed (598/940, 72s)[========================>              ] completed (600/940, 72s)[========================>              ] completed (601/940, 72s)[========================>              ] completed (603/940, 72s)[========================>              ] completed (604/940, 72s)[========================>              ] completed (605/940, 72s)[========================>              ] completed (606/940, 72s)[========================>              ] completed (608/940, 72s)[========================>              ] completed (610/940, 72s)[=========================>             ] completed (611/940, 72s)[=========================>             ] completed (613/940, 73s)[=========================>             ] completed (613/940, 73s)[=========================>             ] completed (615/940, 73s)exception while typing /* inlined from Test*/ 
  {
    1
  }
.unary_- of class class dotty.tools.dotc.ast.Trees$Select # 1138986
[=========================>             ] completed (617/940, 73s)exception while typing def test: Int = 
  /* inlined from Test*/ 
    {
      1
    }
  .unary_- of class class dotty.tools.dotc.ast.Trees$DefDef # 1138987
exception while typing @scala.annotation.internal.SourceFile(
  "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/i3633.scala"
) class Test() extends Object() { 
  @1 inline def foo: Int = 1
  def test: Int = 
    /* inlined from Test*/ 
      {
        1
      }
    .unary_-
} of class class dotty.tools.dotc.ast.Trees$TypeDef # 1139040
exception while typing package <empty> {
  @scala.annotation.internal.SourceFile(
    "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/i3633.scala"
  ) class Test() extends Object() { 
    @1 inline def foo: Int = 1
    def test: Int = 
      /* inlined from Test*/ 
        {
          1
        }
      .unary_-
  }
} of class class dotty.tools.dotc.ast.Trees$PackageDef # 1139041
[=========================>             ] completed (618/940, 73s)inlining null
inlining null
[=========================>             ] completed (619/940, 73s)[=========================>             ] completed (622/940, 73s)[=========================>             ] completed (623/940, 73s)[=========================>             ] completed (625/940, 73s)[=========================>             ] completed (625/940, 73s)[=========================>             ] completed (625/940, 74s)[=========================>             ] completed (628/940, 74s)[=========================>             ] completed (629/940, 74s)[=========================>             ] completed (630/940, 74s)[=========================>             ] completed (633/940, 74s)[=========================>             ] completed (633/940, 74s)[==========================>            ] completed (635/940, 74s)[==========================>            ] completed (637/940, 74s)[==========================>            ] completed (638/940, 74s)[==========================>            ] completed (640/940, 74s)[==========================>            ] completed (640/940, 75s)[==========================>            ] completed (642/940, 75s)[==========================>            ] completed (643/940, 75s)[==========================>            ] completed (644/940, 75s)[==========================>            ] completed (648/940, 75s)[==========================>            ] completed (648/940, 75s)[==========================>            ] completed (649/940, 75s)[==========================>            ] completed (652/940, 75s)[==========================>            ] completed (652/940, 75s)[==========================>            ] completed (656/940, 75s)[==========================>            ] completed (656/940, 76s)[==========================>            ] completed (656/940, 76s)[===========================>           ] completed (660/940, 76s)[===========================>           ] completed (661/940, 76s)[===========================>           ] completed (663/940, 76s)[===========================>           ] completed (664/940, 76s)[===========================>           ] completed (668/940, 76s)[===========================>           ] completed (668/940, 76s)[===========================>           ] completed (669/940, 76s)[===========================>           ] completed (672/940, 76s)[===========================>           ] completed (674/940, 77s)[===========================>           ] completed (675/940, 77s)[===========================>           ] completed (676/940, 77s)[===========================>           ] completed (677/940, 77s)[===========================>           ] completed (677/940, 77s)[===========================>           ] completed (678/940, 77s)[===========================>           ] completed (678/940, 77s)[===========================>           ] completed (678/940, 77s)[===========================>           ] completed (679/940, 77s)[===========================>           ] completed (681/940, 77s)[============================>          ] completed (682/940, 78s)[============================>          ] completed (682/940, 78s)[============================>          ] completed (684/940, 78s)inlining {
  def $anonfun(): Inner = new Inner()
  closure($anonfun)
}
inlining {
  def $anonfun(): Inner = new Inner()
  closure($anonfun)
}
exception while typing {
  def $anonfun(): Inner = new Inner()
  closure($anonfun)
} of class class dotty.tools.dotc.ast.Trees$Block # 1241719
exception while typing {
  def $anonfun(): Inner = new Inner()
  closure($anonfun)
}: (() => Inner) of class class dotty.tools.dotc.ast.Trees$Typed # 1241721
exception while typing (
  {
    def $anonfun(): Inner = new Inner()
    closure($anonfun)
  }
: (() => Inner)).apply of class class dotty.tools.dotc.ast.Trees$Select # 1241722
exception while typing (
  {
    def $anonfun(): Inner = new Inner()
    closure($anonfun)
  }
: (() => Inner)).apply() of class class dotty.tools.dotc.ast.Trees$Apply # 1241732
exception while typing (
  {
    def $anonfun(): Inner = new Inner()
    closure($anonfun)
  }
: (() => Inner)).apply(): Base of class class dotty.tools.dotc.ast.Trees$Typed # 1241733
exception while typing {
  class Inner() extends Base() {}
  (
    {
      def $anonfun(): Inner = new Inner()
      closure($anonfun)
    }
  : (() => Inner)).apply(): Base
} of class class dotty.tools.dotc.ast.Trees$Block # 1241734
[============================>          ] completed (684/940, 78s)exception while typing <accessor> def widen: Base = 
  {
    class Inner() extends Base() {}
    (
      {
        def $anonfun(): Inner = new Inner()
        closure($anonfun)
      }
    : (() => Inner)).apply(): Base
  } of class class dotty.tools.dotc.ast.Trees$DefDef # 1241848
exception while typing @scala.annotation.internal.SourceFile(
  "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/i2527b.scala"
) final module class Test() extends Object() { 
  <accessor> def widen: Base = 
    {
      class Inner() extends Base() {}
      (
        {
          def $anonfun(): Inner = new Inner()
          closure($anonfun)
        }
      : (() => Inner)).apply(): Base
    }
  <accessor> def leak: Base = 
    {
      class Inner() extends Base() {}
      (
        {
          def $anonfun(): Inner = new Inner()
          closure($anonfun)
        }
      : () => Inner).apply(): Base
    }
} of class class dotty.tools.dotc.ast.Trees$TypeDef # 1242132
exception while typing package <empty> {
  @scala.annotation.internal.SourceFile(
    "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/i2527b.scala"
  ) class Base() extends Object() {}
  final lazy module val Test: Test = new Test()
  @scala.annotation.internal.SourceFile(
    "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/i2527b.scala"
  ) final module class Test() extends Object() { 
    <accessor> def widen: Base = 
      {
        class Inner() extends Base() {}
        (
          {
            def $anonfun(): Inner = new Inner()
            closure($anonfun)
          }
        : (() => Inner)).apply(): Base
      }
    <accessor> def leak: Base = 
      {
        class Inner() extends Base() {}
        (
          {
            def $anonfun(): Inner = new Inner()
            closure($anonfun)
          }
        : () => Inner).apply(): Base
      }
  }
} of class class dotty.tools.dotc.ast.Trees$PackageDef # 1242133
*** error while checking /mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/i2527b.scala after phase arrayConstructors ***
[============================>          ] completed (685/940, 78s)[============================>          ] completed (687/940, 78s)[============================>          ] completed (688/940, 78s)[============================>          ] completed (688/940, 78s)[============================>          ] completed (690/940, 78s)[============================>          ] completed (691/940, 78s)[============================>          ] completed (692/940, 79s)[============================>          ] completed (693/940, 79s)[============================>          ] completed (693/940, 79s)[============================>          ] completed (695/940, 79s)[============================>          ] completed (695/940, 79s)[============================>          ] completed (696/940, 79s)[============================>          ] completed (696/940, 79s)[============================>          ] completed (697/940, 79s)[============================>          ] completed (697/940, 79s)[============================>          ] completed (698/940, 79s)[============================>          ] completed (698/940, 80s)[============================>          ] completed (699/940, 80s)[============================>          ] completed (700/940, 80s)[============================>          ] completed (700/940, 80s)[============================>          ] completed (701/940, 80s)[============================>          ] completed (702/940, 80s)[============================>          ] completed (703/940, 80s)[============================>          ] completed (704/940, 80s)[============================>          ] completed (704/940, 80s)[=============================>         ] completed (705/940, 80s)[=============================>         ] completed (706/940, 81s)[=============================>         ] completed (707/940, 81s)[=============================>         ] completed (708/940, 81s)[=============================>         ] completed (709/940, 81s)[=============================>         ] completed (710/940, 81s)[=============================>         ] completed (712/940, 81s)[=============================>         ] completed (712/940, 81s)[=============================>         ] completed (713/940, 81s)inlining {
  def $anonfun(implicit evidence$5: Test.A): Test.A = Test.simple$direct[Test.A](evidence$5)
  closure($anonfun)
}
inlining {
  def $anonfun(implicit evidence$6: Test.A): implicit Test.B => (Test.A, Test.B) = 
    {
      def $anonfun(implicit evidence$7: Test.B): (Test.A, Test.B) = 
        Test.foo$direct$direct[Test.A, Test.B](evidence$6)(evidence$7)
      closure($anonfun)
    }
  closure($anonfun)
}
inlining {
  def $anonfun(implicit evidence$8: Test.B): (Test.A, Test.B) = 
    Test.foo$direct$direct[Test.A, Test.B](Test.a)(evidence$8)
  closure($anonfun)
}
exception while typing {
  def $anonfun(implicit evidence$5: Test.A): Test.A = Test.simple$direct[Test.A](evidence$5)
  closure($anonfun)
} of class class dotty.tools.dotc.ast.Trees$Block # 1296884
exception while typing {
  def $anonfun(implicit evidence$5: Test.A): Test.A = Test.simple$direct[Test.A](evidence$5)
  closure($anonfun)
}: (implicit Test.A => Test.A) of class class dotty.tools.dotc.ast.Trees$Typed # 1296886
exception while typing (
  {
    def $anonfun(implicit evidence$5: Test.A): Test.A = Test.simple$direct[Test.A](evidence$5)
    closure($anonfun)
  }
: (implicit Test.A => Test.A)).apply of class class dotty.tools.dotc.ast.Trees$Select # 1296887
exception while typing (
  {
    def $anonfun(implicit evidence$5: Test.A): Test.A = Test.simple$direct[Test.A](evidence$5)
    closure($anonfun)
  }
: (implicit Test.A => Test.A)).apply(Test.a) of class class dotty.tools.dotc.ast.Trees$Apply # 1296888
exception while typing println(
  (
    {
      def $anonfun(implicit evidence$5: Test.A): Test.A = Test.simple$direct[Test.A](evidence$5)
      closure($anonfun)
    }
  : (implicit Test.A => Test.A)).apply(Test.a)
) of class class dotty.tools.dotc.ast.Trees$Apply # 1296889
exception while typing {
  println(Test.foo$direct$direct[Test.A, Test.B](Test.a)(Test.b))
  println(Test.foo$direct$direct[Test.A, Test.B](Test.a)(Test.b))
  println(Test.foo$direct$direct[Test.A, Test.B](Test.a)(Test.b))
  println(
    (
      {
        def $anonfun(implicit evidence$5: Test.A): Test.A = Test.simple$direct[Test.A](evidence$5)
        closure($anonfun)
      }
    : (implicit Test.A => Test.A)).apply(Test.a)
  )
  println(
    (
      {
        def $anonfun(implicit evidence$6: Test.A): (implicit Test.B => (Test.A, Test.B)) = 
          {
            def $anonfun(implicit evidence$7: Test.B): (Test.A, Test.B) = 
              Test.foo$direct$direct[Test.A, Test.B](evidence$6)(evidence$7)
            closure($anonfun)
          }
        closure($anonfun)
      }
    : (implicit Test.A => implicit Test.B => (Test.A, Test.B))).apply(Test.a).apply(Test.b)
  )
  println(
    (
      {
        def $anonfun(implicit evidence$8: Test.B): (Test.A, Test.B) = 
          Test.foo$direct$direct[Test.A, Test.B](Test.a)(evidence$8)
        closure($anonfun)
      }
    : (implicit Test.B => (Test.A, Test.B))).apply(Test.b)
  )
  println(Test.bar$direct$direct[Test.A, Test.B](Test.a)(Test.b))
  println(Test.bar$direct$direct[Test.A, Test.B](Test.a)(Test.b))
  println(Test.bar$direct$direct[Test.A, Test.B](Test.a)(Test.b))
} of class class dotty.tools.dotc.ast.Trees$Block # 1296913
exception while typing def main(args: Array[String]): Unit = 
  {
    println(Test.foo$direct$direct[Test.A, Test.B](Test.a)(Test.b))
    println(Test.foo$direct$direct[Test.A, Test.B](Test.a)(Test.b))
    println(Test.foo$direct$direct[Test.A, Test.B](Test.a)(Test.b))
    println(
      (
        {
          def $anonfun(implicit evidence$5: Test.A): Test.A = Test.simple$direct[Test.A](evidence$5)
          closure($anonfun)
        }
      : (implicit Test.A => Test.A)).apply(Test.a)
    )
    println(
      (
        {
          def $anonfun(implicit evidence$6: Test.A): (implicit Test.B => (Test.A, Test.B)) = 
            {
              def $anonfun(implicit evidence$7: Test.B): (Test.A, Test.B) = 
                Test.foo$direct$direct[Test.A, Test.B](evidence$6)(evidence$7)
              closure($anonfun)
            }
          closure($anonfun)
        }
      : (implicit Test.A => implicit Test.B => (Test.A, Test.B))).apply(Test.a).apply(Test.b)
    )
    println(
      (
        {
          def $anonfun(implicit evidence$8: Test.B): (Test.A, Test.B) = 
            Test.foo$direct$direct[Test.A, Test.B](Test.a)(evidence$8)
          closure($anonfun)
        }
      : (implicit Test.B => (Test.A, Test.B))).apply(Test.b)
    )
    println(Test.bar$direct$direct[Test.A, Test.B](Test.a)(Test.b))
    println(Test.bar$direct$direct[Test.A, Test.B](Test.a)(Test.b))
    println(Test.bar$direct$direct[Test.A, Test.B](Test.a)(Test.b))
  } of class class dotty.tools.dotc.ast.Trees$DefDef # 1296932
[=============================>         ] completed (715/940, 81s)exception while typing @scala.annotation.internal.SourceFile(
  "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/i2146.scala"
) final module class Test() extends Object() { 
  case class A() extends Object() with Product { 
    def productIterator: Iterator[Any] = super[Product].productIterator
    def copy(): Test.A = new Test.A()
    override def hashCode(): Int = scala.runtime.Statics#finalizeHash(242138885, 0)
    override def equals(x$0: Any): Boolean = 
      this.eq(x$0.asInstanceOf[Object]).||(
        if x$0.$isInstanceOf$[Test.A] then 
          {
            x$0.asInstanceOf[Test.A]
            true
          }
         else 
          if x$0.$isInstanceOf$[Any] then 
            {
              x$0.asInstanceOf[Any]
              false
            }
           else throw new MatchError(x$0)
      )
    override def toString(): String = scala.runtime.ScalaRunTime._toString(this)
    override def canEqual(that: Any): Boolean = that.isInstanceOf[Test.A]
    override def productArity: Int = 0
    override def productPrefix: String = "A"
    override def productElement(n: Int): Any = throw new IndexOutOfBoundsException(n.toString())
  }
  final lazy module val A: Test.A = new Test.A()
  final module class A() extends Object() with (() => Test.A) { 
    override def toString(): String = super[Function0].toString()
    def apply(): Test.A = new Test.A()
    def unapply(x$1: Test.A): Boolean = true
  }
  case class B() extends Object() with Product { 
    def productIterator: Iterator[Any] = super[Product].productIterator
    def copy(): Test.B = new Test.B()
    override def hashCode(): Int = scala.runtime.Statics#finalizeHash(242138886, 0)
    override def equals(x$0: Any): Boolean = 
      this.eq(x$0.asInstanceOf[Object]).||(
        if x$0.$isInstanceOf$[Test.B] then 
          {
            x$0.asInstanceOf[Test.B]
            true
          }
         else 
          if x$0.$isInstanceOf$[Any] then 
            {
              x$0.asInstanceOf[Any]
              false
            }
           else throw new MatchError(x$0)
      )
    override def toString(): String = scala.runtime.ScalaRunTime._toString(this)
    override def canEqual(that: Any): Boolean = that.isInstanceOf[Test.B]
    override def productArity: Int = 0
    override def productPrefix: String = "B"
    override def productElement(n: Int): Any = throw new IndexOutOfBoundsException(n.toString())
  }
  final lazy module val B: Test.B = new Test.B()
  final module class B() extends Object() with (() => Test.B) { 
    override def toString(): String = super[Function0].toString()
    def apply(): Test.B = new Test.B()
    def unapply(x$1: Test.B): Boolean = true
  }
  def simple[A]: implicit A => A = 
    {
      def $anonfun(implicit evidence$1: A): A = Test.simple$direct[A](evidence$1)
      closure($anonfun)
    }
  def simple$direct[A](implicit x$0: A): A = implicitly[A](x$0)
  def foo[A, B]: implicit A => implicit B => (A, B) = 
    {
      def $anonfun(implicit evidence$2: A): implicit B => (A, B) = Test.foo$direct[A, B](evidence$2)
      closure($anonfun)
    }
  def foo$direct[A, B](implicit x$0: A): implicit B => (A, B) = 
    {
      def $anonfun(implicit evidence$3: B): (A, B) = Test.foo$direct$direct[A, B](x$0)(evidence$3)
      closure($anonfun)
    }
  def foo$direct$direct[A, B](implicit x$0: A)(implicit x$0: B): (A, B) = 
    new Tuple2[A, B](implicitly[A](x$0), implicitly[B](x$0))
  def bar[A, B]: implicit A => implicit B => (A, B) = 
    {
      def $anonfun(implicit a: A): implicit B => (A, B) = Test.bar$direct[A, B](a)
      closure($anonfun)
    }
  def bar$direct[A, B](implicit x$0: A): implicit B => (A, B) = 
    {
      def $anonfun(implicit evidence$4: B): (A, B) = Test.bar$direct$direct[A, B](x$0)(evidence$4)
      closure($anonfun)
    }
  def bar$direct$direct[A, B](implicit x$0: A)(implicit x$0: B): (A, B) = 
    new Tuple2[A, B](implicitly[A](x$0), implicitly[B](x$0))
  implicit <accessor> def a: Test.A = 
    {
      this.A
      new Test.A()
    }
  implicit <accessor> def b: Test.B = 
    {
      this.B
      new Test.B()
    }
  def main(args: Array[String]): Unit = 
    {
      println(Test.foo$direct$direct[Test.A, Test.B](Test.a)(Test.b))
      println(Test.foo$direct$direct[Test.A, Test.B](Test.a)(Test.b))
      println(Test.foo$direct$direct[Test.A, Test.B](Test.a)(Test.b))
      println(
        (
          {
            def $anonfun(implicit evidence$5: Test.A): Test.A = Test.simple$direct[Test.A](evidence$5)
            closure($anonfun)
          }
        : (implicit Test.A => Test.A)).apply(Test.a)
      )
      println(
        (
          {
            def $anonfun(implicit evidence$6: Test.A): (implicit Test.B => (Test.A, Test.B)) = 
              {
                def $anonfun(implicit evidence$7: Test.B): (Test.A, Test.B) = 
                  Test.foo$direct$direct[Test.A, Test.B](evidence$6)(evidence$7)
                closure($anonfun)
              }
            closure($anonfun)
          }
        : (implicit Test.A => implicit Test.B => (Test.A, Test.B))).apply(Test.a).apply(Test.b)
      )
      println(
        (
          {
            def $anonfun(implicit evidence$8: Test.B): (Test.A, Test.B) = 
              Test.foo$direct$direct[Test.A, Test.B](Test.a)(evidence$8)
            closure($anonfun)
          }
        : (implicit Test.B => (Test.A, Test.B))).apply(Test.b)
      )
      println(Test.bar$direct$direct[Test.A, Test.B](Test.a)(Test.b))
      println(Test.bar$direct$direct[Test.A, Test.B](Test.a)(Test.b))
      println(Test.bar$direct$direct[Test.A, Test.B](Test.a)(Test.b))
    }
} of class class dotty.tools.dotc.ast.Trees$TypeDef # 1296934
exception while typing package <empty> {
  final lazy module val Test: Test = new Test()
  @scala.annotation.internal.SourceFile(
    "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/i2146.scala"
  ) final module class Test() extends Object() { 
    case class A() extends Object() with Product { 
      def productIterator: Iterator[Any] = super[Product].productIterator
      def copy(): Test.A = new Test.A()
      override def hashCode(): Int = scala.runtime.Statics#finalizeHash(242138885, 0)
      override def equals(x$0: Any): Boolean = 
        this.eq(x$0.asInstanceOf[Object]).||(
          if x$0.$isInstanceOf$[Test.A] then 
            {
              x$0.asInstanceOf[Test.A]
              true
            }
           else 
            if x$0.$isInstanceOf$[Any] then 
              {
                x$0.asInstanceOf[Any]
                false
              }
             else throw new MatchError(x$0)
        )
      override def toString(): String = scala.runtime.ScalaRunTime._toString(this)
      override def canEqual(that: Any): Boolean = that.isInstanceOf[Test.A]
      override def productArity: Int = 0
      override def productPrefix: String = "A"
      override def productElement(n: Int): Any = throw new IndexOutOfBoundsException(n.toString())
    }
    final lazy module val A: Test.A = new Test.A()
    final module class A() extends Object() with (() => Test.A) { 
      override def toString(): String = super[Function0].toString()
      def apply(): Test.A = new Test.A()
      def unapply(x$1: Test.A): Boolean = true
    }
    case class B() extends Object() with Product { 
      def productIterator: Iterator[Any] = super[Product].productIterator
      def copy(): Test.B = new Test.B()
      override def hashCode(): Int = scala.runtime.Statics#finalizeHash(242138886, 0)
      override def equals(x$0: Any): Boolean = 
        this.eq(x$0.asInstanceOf[Object]).||(
          if x$0.$isInstanceOf$[Test.B] then 
            {
              x$0.asInstanceOf[Test.B]
              true
            }
           else 
            if x$0.$isInstanceOf$[Any] then 
              {
                x$0.asInstanceOf[Any]
                false
              }
             else throw new MatchError(x$0)
        )
      override def toString(): String = scala.runtime.ScalaRunTime._toString(this)
      override def canEqual(that: Any): Boolean = that.isInstanceOf[Test.B]
      override def productArity: Int = 0
      override def productPrefix: String = "B"
      override def productElement(n: Int): Any = throw new IndexOutOfBoundsException(n.toString())
    }
    final lazy module val B: Test.B = new Test.B()
    final module class B() extends Object() with (() => Test.B) { 
      override def toString(): String = super[Function0].toString()
      def apply(): Test.B = new Test.B()
      def unapply(x$1: Test.B): Boolean = true
    }
    def simple[A]: implicit A => A = 
      {
        def $anonfun(implicit evidence$1: A): A = Test.simple$direct[A](evidence$1)
        closure($anonfun)
      }
    def simple$direct[A](implicit x$0: A): A = implicitly[A](x$0)
    def foo[A, B]: implicit A => implicit B => (A, B) = 
      {
        def $anonfun(implicit evidence$2: A): implicit B => (A, B) = Test.foo$direct[A, B](evidence$2)
        closure($anonfun)
      }
    def foo$direct[A, B](implicit x$0: A): implicit B => (A, B) = 
      {
        def $anonfun(implicit evidence$3: B): (A, B) = Test.foo$direct$direct[A, B](x$0)(evidence$3)
        closure($anonfun)
      }
    def foo$direct$direct[A, B](implicit x$0: A)(implicit x$0: B): (A, B) = 
      new Tuple2[A, B](implicitly[A](x$0), implicitly[B](x$0))
    def bar[A, B]: implicit A => implicit B => (A, B) = 
      {
        def $anonfun(implicit a: A): implicit B => (A, B) = Test.bar$direct[A, B](a)
        closure($anonfun)
      }
    def bar$direct[A, B](implicit x$0: A): implicit B => (A, B) = 
      {
        def $anonfun(implicit evidence$4: B): (A, B) = Test.bar$direct$direct[A, B](x$0)(evidence$4)
        closure($anonfun)
      }
    def bar$direct$direct[A, B](implicit x$0: A)(implicit x$0: B): (A, B) = 
      new Tuple2[A, B](implicitly[A](x$0), implicitly[B](x$0))
    implicit <accessor> def a: Test.A = 
      {
        this.A
        new Test.A()
      }
    implicit <accessor> def b: Test.B = 
      {
        this.B
        new Test.B()
      }
    def main(args: Array[String]): Unit = 
      {
        println(Test.foo$direct$direct[Test.A, Test.B](Test.a)(Test.b))
        println(Test.foo$direct$direct[Test.A, Test.B](Test.a)(Test.b))
        println(Test.foo$direct$direct[Test.A, Test.B](Test.a)(Test.b))
        println(
          (
            {
              def $anonfun(implicit evidence$5: Test.A): Test.A = Test.simple$direct[Test.A](evidence$5)
              closure($anonfun)
            }
          : (implicit Test.A => Test.A)).apply(Test.a)
        )
        println(
          (
            {
              def $anonfun(implicit evidence$6: Test.A): (implicit Test.B => (Test.A, Test.B)) = 
                {
                  def $anonfun(implicit evidence$7: Test.B): (Test.A, Test.B) = 
                    Test.foo$direct$direct[Test.A, Test.B](evidence$6)(evidence$7)
                  closure($anonfun)
                }
              closure($anonfun)
            }
          : (implicit Test.A => implicit Test.B => (Test.A, Test.B))).apply(Test.a).apply(Test.b)
        )
        println(
          (
            {
              def $anonfun(implicit evidence$8: Test.B): (Test.A, Test.B) = 
                Test.foo$direct$direct[Test.A, Test.B](Test.a)(evidence$8)
              closure($anonfun)
            }
          : (implicit Test.B => (Test.A, Test.B))).apply(Test.b)
        )
        println(Test.bar$direct$direct[Test.A, Test.B](Test.a)(Test.b))
        println(Test.bar$direct$direct[Test.A, Test.B](Test.a)(Test.b))
        println(Test.bar$direct$direct[Test.A, Test.B](Test.a)(Test.b))
      }
  }
} of class class dotty.tools.dotc.ast.Trees$PackageDef # 1296935
*** error while checking /mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/i2146.scala after phase arrayConstructors ***
[=============================>         ] completed (716/940, 81s)[=============================>         ] completed (716/940, 82s)[=============================>         ] completed (718/940, 82s)[=============================>         ] completed (719/940, 82s)[=============================>         ] completed (720/940, 82s)[=============================>         ] completed (722/940, 82s)exception while typing c of class class dotty.tools.dotc.ast.Trees$Ident # 1304575
[=============================>         ] completed (722/940, 82s)exception while typing new C.this.B(c) of class class dotty.tools.dotc.ast.Trees$Apply # 1304576
exception while typing {
  new C()
  new C.this.B(c)
  /* inlined from A*/ 
    {
      val Foo_this: A.this.Foo = new A.this.Foo(b)
      val A_this: C.this.B = Foo_this.A$Foo$$$outer().asInstanceOf[C.this.B]
      println(A_this)
    }
} of class class dotty.tools.dotc.ast.Trees$Block # 1304598
exception while typing def main(args: String[]): Unit = 
  {
    new C()
    new C.this.B(c)
    /* inlined from A*/ 
      {
        val Foo_this: A.this.Foo = new A.this.Foo(b)
        val A_this: C.this.B = Foo_this.A$Foo$$$outer().asInstanceOf[C.this.B]
        println(A_this)
      }
  } of class class dotty.tools.dotc.ast.Trees$DefDef # 1304599
exception while typing @scala.annotation.internal.SourceFile(
  "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/i1990a.scala"
) final module class Test() extends Object() { 
  def main(args: String[]): Unit = 
    {
      new C()
      new C.this.B(c)
      /* inlined from A*/ 
        {
          val Foo_this: A.this.Foo = new A.this.Foo(b)
          val A_this: C.this.B = Foo_this.A$Foo$$$outer().asInstanceOf[C.this.B]
          println(A_this)
        }
    }
} of class class dotty.tools.dotc.ast.Trees$TypeDef # 1304601
exception while typing package <empty> {
  @scala.annotation.internal.SourceFile(
    "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/i1990a.scala"
  ) class A() extends Object() { 
    class Foo($outer: A) extends Object() { 
      @{
        println(A.this)
      } inline def inlineMeth(): Unit = println(this.A$Foo$$$outer())
      private <accessor> def $outer(): A
      final def A$Foo$$$outer(): A = Foo.this.$outer()
    }
  }
  @scala.annotation.internal.SourceFile(
    "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/i1990a.scala"
  ) class C() extends A() { 
    class B($outer: C) extends A() { 
      private <accessor> def $outer(): C
      final def C$B$$$outer(): C = B.this.$outer()
    }
  }
  final lazy module val Test: Test = new Test()
  @scala.annotation.internal.SourceFile(
    "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/i1990a.scala"
  ) final module class Test() extends Object() { 
    def main(args: String[]): Unit = 
      {
        new C()
        new C.this.B(c)
        /* inlined from A*/ 
          {
            val Foo_this: A.this.Foo = new A.this.Foo(b)
            val A_this: C.this.B = Foo_this.A$Foo$$$outer().asInstanceOf[C.this.B]
            println(A_this)
          }
      }
  }
} of class class dotty.tools.dotc.ast.Trees$PackageDef # 1304602
*** error while checking /mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/i1990a.scala after phase erasure ***
[=============================>         ] completed (724/940, 82s)[=============================>         ] completed (725/940, 82s)[=============================>         ] completed (725/940, 82s)[=============================>         ] completed (727/940, 82s)[=============================>         ] completed (728/940, 83s)exception while typing cell of class class dotty.tools.dotc.ast.Trees$Ident # 1309698
[==============================>        ] completed (729/940, 83s)exception while typing new AbsCell.this.Node(cell) of class class dotty.tools.dotc.ast.Trees$Apply # 1309699
exception while typing {
  new AbsCell()
  new AbsCell.this.Node(cell)
  ()
} of class class dotty.tools.dotc.ast.Trees$Block # 1309700
exception while typing def test(): Unit = 
  {
    new AbsCell()
    new AbsCell.this.Node(cell)
    ()
  } of class class dotty.tools.dotc.ast.Trees$DefDef # 1309701
exception while typing @scala.annotation.internal.SourceFile(
  "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/i1865.scala"
) final module class Test() extends Object() { 
  def test(): Unit = 
    {
      new AbsCell()
      new AbsCell.this.Node(cell)
      ()
    }
} of class class dotty.tools.dotc.ast.Trees$TypeDef # 1309703
exception while typing package <empty> {
  @scala.annotation.internal.SourceFile(
    "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/i1865.scala"
  ) class AbsCell() extends Object() { 
    class Node($outer: AbsCell) extends Object() { 
      private <accessor> def $outer(): AbsCell
      final def AbsCell$Node$$$outer(): AbsCell = Node.this.$outer()
    }
  }
  final lazy module val Test: Test = new Test()
  @scala.annotation.internal.SourceFile(
    "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/i1865.scala"
  ) final module class Test() extends Object() { 
    def test(): Unit = 
      {
        new AbsCell()
        new AbsCell.this.Node(cell)
        ()
      }
  }
  @scala.annotation.internal.SourceFile(
    "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/i1865.scala"
  ) class AbsCell2() extends Object() { 
    <accessor> def value(): AbsCell2.this.Node = this.value()
    def set(x: AbsCell2.this.Node): Unit = ()
    class Node($outer: AbsCell2) extends Object() { 
      private <accessor> def $outer(): AbsCell2
      final def AbsCell2$Node$$$outer(): AbsCell2 = Node.this.$outer()
    }
  }
  final lazy module val init: init = new init()
  @scala.annotation.internal.SourceFile(
    "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/i1865.scala"
  ) final module class init() extends Object() { 
    def main(): Unit = 
      {
        val cell: AbsCell2 = 
          {
            final class $anon() extends AbsCell2() { 
              <accessor> def init(): AbsCell2.this.Node = new AbsCell2.this.Node(this)
            }
            new AbsCell2{...}(): AbsCell2
          }
        cell.set(new AbsCell2.this.Node(cell))
      }
  }
} of class class dotty.tools.dotc.ast.Trees$PackageDef # 1309794
*** error while checking /mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/i1865.scala after phase erasure ***
[==============================>        ] completed (731/940, 83s)[==============================>        ] completed (731/940, 83s)[==============================>        ] completed (732/940, 83s)[==============================>        ] completed (734/940, 83s)[==============================>        ] completed (734/940, 83s)[==============================>        ] completed (736/940, 83s)[==============================>        ] completed (737/940, 83s)inlining x5
inlining x2
[==============================>        ] completed (738/940, 83s)[==============================>        ] completed (738/940, 84s)[==============================>        ] completed (739/940, 84s)[==============================>        ] completed (740/940, 84s)[==============================>        ] completed (740/940, 84s)[==============================>        ] completed (740/940, 84s)[==============================>        ] completed (743/940, 84s)[==============================>        ] completed (743/940, 84s)[==============================>        ] completed (744/940, 84s)[==============================>        ] completed (745/940, 84s)inlining x6
inlining x10
[==============================>        ] completed (746/940, 84s)[==============================>        ] completed (746/940, 85s)[==============================>        ] completed (747/940, 85s)[==============================>        ] completed (749/940, 85s)[==============================>        ] completed (749/940, 85s)[===============================>       ] completed (752/940, 85s)[===============================>       ] completed (752/940, 85s)[===============================>       ] completed (754/940, 85s)[===============================>       ] completed (754/940, 85s)[===============================>       ] completed (755/940, 85s)[===============================>       ] completed (756/940, 85s)[===============================>       ] completed (756/940, 86s)[===============================>       ] completed (756/940, 86s)[===============================>       ] completed (757/940, 86s)[===============================>       ] completed (758/940, 86s)[===============================>       ] completed (759/940, 86s)[===============================>       ] completed (759/940, 86s)[===============================>       ] completed (760/940, 86s)[===============================>       ] completed (762/940, 86s)[===============================>       ] completed (762/940, 86s)inlining x6
[===============================>       ] completed (763/940, 86s)[===============================>       ] completed (763/940, 87s)[===============================>       ] completed (764/940, 87s)[===============================>       ] completed (764/940, 87s)[===============================>       ] completed (765/940, 87s)[===============================>       ] completed (766/940, 87s)[===============================>       ] completed (766/940, 87s)[===============================>       ] completed (767/940, 87s)[===============================>       ] completed (768/940, 87s)[===============================>       ] completed (769/940, 87s)[===============================>       ] completed (769/940, 87s)[===============================>       ] completed (771/940, 88s)[===============================>       ] completed (771/940, 88s)[===============================>       ] completed (773/940, 88s)[===============================>       ] completed (773/940, 88s)[===============================>       ] completed (774/940, 88s)[===============================>       ] completed (774/940, 88s)[===============================>       ] completed (775/940, 88s)[===============================>       ] completed (775/940, 88s)[===============================>       ] completed (775/940, 88s)[===============================>       ] completed (775/940, 88s)[================================>      ] completed (776/940, 89s)[================================>      ] completed (776/940, 89s)[================================>      ] completed (776/940, 89s)[================================>      ] completed (777/940, 89s)[================================>      ] completed (778/940, 89s)[================================>      ] completed (779/940, 89s)[================================>      ] completed (779/940, 89s)[================================>      ] completed (779/940, 89s)[================================>      ] completed (779/940, 89s)[================================>      ] completed (780/940, 89s)[================================>      ] completed (781/940, 90s)[================================>      ] completed (782/940, 90s)[================================>      ] completed (783/940, 90s)[================================>      ] completed (783/940, 90s)[================================>      ] completed (784/940, 90s)[================================>      ] completed (786/940, 90s)[================================>      ] completed (786/940, 90s)[================================>      ] completed (786/940, 90s)[================================>      ] completed (788/940, 90s)[================================>      ] completed (788/940, 90s)[================================>      ] completed (790/940, 91s)[================================>      ] completed (790/940, 91s)[================================>      ] completed (791/940, 91s)[================================>      ] completed (791/940, 91s)[================================>      ] completed (792/940, 91s)[================================>      ] completed (792/940, 91s)[================================>      ] completed (792/940, 91s)[================================>      ] completed (793/940, 91s)[================================>      ] completed (793/940, 91s)[================================>      ] completed (793/940, 92s)[================================>      ] completed (793/940, 92s)[================================>      ] completed (794/940, 92s)[================================>      ] completed (794/940, 92s)[================================>      ] completed (796/940, 92s)[================================>      ] completed (796/940, 92s)[================================>      ] completed (796/940, 92s)[================================>      ] completed (798/940, 92s)[================================>      ] completed (798/940, 92s)[================================>      ] completed (798/940, 92s)inlining x20
inlining x17
inlining x14
[=================================>     ] completed (799/940, 93s)[=================================>     ] completed (799/940, 93s)[=================================>     ] completed (799/940, 93s)[=================================>     ] completed (800/940, 93s)[=================================>     ] completed (801/940, 93s)[=================================>     ] completed (801/940, 93s)[=================================>     ] completed (803/940, 93s)[=================================>     ] completed (803/940, 93s)[=================================>     ] completed (805/940, 93s)[=================================>     ] completed (805/940, 93s)[=================================>     ] completed (805/940, 94s)[=================================>     ] completed (807/940, 94s)[=================================>     ] completed (807/940, 94s)[=================================>     ] completed (808/940, 94s)[=================================>     ] completed (809/940, 94s)[=================================>     ] completed (809/940, 94s)[=================================>     ] completed (810/940, 94s)[=================================>     ] completed (810/940, 94s)[=================================>     ] completed (811/940, 94s)[=================================>     ] completed (811/940, 94s)[=================================>     ] completed (812/940, 95s)[=================================>     ] completed (813/940, 95s)[=================================>     ] completed (814/940, 95s)[=================================>     ] completed (814/940, 95s)[=================================>     ] completed (815/940, 95s)[=================================>     ] completed (815/940, 95s)[=================================>     ] completed (815/940, 95s)[=================================>     ] completed (815/940, 95s)[=================================>     ] completed (816/940, 95s)exception while typing {
  var ilo1: A1
  var ilo2: A2
  case val x1: (A1, A2) @unchecked = asPair.apply(xy): (A1, A2) @unchecked
  if x1.ne(null) then 
    {
      ilo1 = x1._1
      ilo2 = x1._2
      ()
    }
   else throw new MatchError(x1)
  b1.+=(ilo1)
  b2.+=(ilo2)
} of class class dotty.tools.dotc.ast.Trees$Block # 1475410
exception while typing def $anonfun(xy: GenericTraversableTemplate.this.A): 
  scala.collection.mutable.Builder[A2, GenericTraversableTemplate.this.CC[A2]]
 = 
  {
    var ilo1: A1
    var ilo2: A2
    case val x1: (A1, A2) @unchecked = asPair.apply(xy): (A1, A2) @unchecked
    if x1.ne(null) then 
      {
        ilo1 = x1._1
        ilo2 = x1._2
        ()
      }
     else throw new MatchError(x1)
    b1.+=(ilo1)
    b2.+=(ilo2)
  } of class class dotty.tools.dotc.ast.Trees$DefDef # 1475435
exception while typing {
  def $anonfun(xy: GenericTraversableTemplate.this.A): 
    scala.collection.mutable.Builder[A2, GenericTraversableTemplate.this.CC[A2]]
   = 
    {
      var ilo1: A1
      var ilo2: A2
      case val x1: (A1, A2) @unchecked = asPair.apply(xy): (A1, A2) @unchecked
      if x1.ne(null) then 
        {
          ilo1 = x1._1
          ilo2 = x1._2
          ()
        }
       else throw new MatchError(x1)
      b1.+=(ilo1)
      b2.+=(ilo2)
    }
  closure($anonfun)
} of class class dotty.tools.dotc.ast.Trees$Block # 1475436
exception while typing this.sequential.foreach[scala.collection.mutable.Builder[A2, GenericTraversableTemplate.this.CC[A2]]](
  {
    def $anonfun(xy: GenericTraversableTemplate.this.A): 
      scala.collection.mutable.Builder[A2, GenericTraversableTemplate.this.CC[A2]]
     = 
      {
        var ilo1: A1
        var ilo2: A2
        case val x1: (A1, A2) @unchecked = asPair.apply(xy): (A1, A2) @unchecked
        if x1.ne(null) then 
          {
            ilo1 = x1._1
            ilo2 = x1._2
            ()
          }
         else throw new MatchError(x1)
        b1.+=(ilo1)
        b2.+=(ilo2)
      }
    closure($anonfun)
  }
) of class class dotty.tools.dotc.ast.Trees$Apply # 1475437
exception while typing {
  val b1: scala.collection.mutable.Builder[A1, GenericTraversableTemplate.this.CC[A1]] = this.genericBuilder[A1]
  val b2: scala.collection.mutable.Builder[A2, GenericTraversableTemplate.this.CC[A2]] = this.genericBuilder[A2]
  this.sequential.foreach[scala.collection.mutable.Builder[A2, GenericTraversableTemplate.this.CC[A2]]](
    {
      def $anonfun(xy: GenericTraversableTemplate.this.A): 
        scala.collection.mutable.Builder[A2, GenericTraversableTemplate.this.CC[A2]]
       = 
        {
          var ilo1: A1
          var ilo2: A2
          case val x1: (A1, A2) @unchecked = asPair.apply(xy): (A1, A2) @unchecked
          if x1.ne(null) then 
            {
              ilo1 = x1._1
              ilo2 = x1._2
              ()
            }
           else throw new MatchError(x1)
          b1.+=(ilo1)
          b2.+=(ilo2)
        }
      closure($anonfun)
    }
  )
  new Tuple2[GenericTraversableTemplate.this.CC[A1], GenericTraversableTemplate.this.CC[A2]](b1.result(), b2.result())
} of class class dotty.tools.dotc.ast.Trees$Block # 1475478
exception while typing def unzip[A1, A2](implicit asPair: GenericTraversableTemplate.this.A => (A1, A2)): 
  (GenericTraversableTemplate.this.CC[A1], GenericTraversableTemplate.this.CC[A2])
 = 
  {
    val b1: scala.collection.mutable.Builder[A1, GenericTraversableTemplate.this.CC[A1]] = this.genericBuilder[A1]
    val b2: scala.collection.mutable.Builder[A2, GenericTraversableTemplate.this.CC[A2]] = this.genericBuilder[A2]
    this.sequential.foreach[scala.collection.mutable.Builder[A2, GenericTraversableTemplate.this.CC[A2]]](
      {
        def $anonfun(xy: GenericTraversableTemplate.this.A): 
          scala.collection.mutable.Builder[A2, GenericTraversableTemplate.this.CC[A2]]
         = 
          {
            var ilo1: A1
            var ilo2: A2
            case val x1: (A1, A2) @unchecked = asPair.apply(xy): (A1, A2) @unchecked
            if x1.ne(null) then 
              {
                ilo1 = x1._1
                ilo2 = x1._2
                ()
              }
             else throw new MatchError(x1)
            b1.+=(ilo1)
            b2.+=(ilo2)
          }
        closure($anonfun)
      }
    )
    new Tuple2[GenericTraversableTemplate.this.CC[A1], GenericTraversableTemplate.this.CC[A2]](b1.result(), b2.result())
  } of class class dotty.tools.dotc.ast.Trees$DefDef # 1475551
exception while typing @scala.annotation.internal.SourceFile(
  "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/GenericTraversableTemplate.scala"
) <trait> trait GenericTraversableTemplate[A, CC <: scala.collection.GenTraversable]() extends Object with 
  scala.collection.generic
.HasNewBuilder[GenericTraversableTemplate.this.A, 
  GenericTraversableTemplate.this.CC[GenericTraversableTemplate.this.A] @uncheckedVariance
] { 
  private type +A
  private type +CC <: scala.collection.GenTraversable
  def foreach[U](f: GenericTraversableTemplate.this.A => U): Unit
  def head: GenericTraversableTemplate.this.A
  def isEmpty: Boolean
  def companion: scala.collection.generic.GenericCompanion[GenericTraversableTemplate.this.CC]
  protected def newBuilder: 
    scala.collection.mutable.Builder[GenericTraversableTemplate.this.A, 
      GenericTraversableTemplate.this.CC[GenericTraversableTemplate.this.A]
    ]
   = this.companion.newBuilder[GenericTraversableTemplate.this.A]
  def genericBuilder[B]: scala.collection.mutable.Builder[B, GenericTraversableTemplate.this.CC[B]] = 
    this.companion.newBuilder[B]
  private def sequential: TraversableOnce[GenericTraversableTemplate.this.A] = 
    this.asInstanceOf[scala.collection.GenTraversableOnce[GenericTraversableTemplate.this.A]].seq
  def unzip[A1, A2](implicit asPair: GenericTraversableTemplate.this.A => (A1, A2)): 
    (GenericTraversableTemplate.this.CC[A1], GenericTraversableTemplate.this.CC[A2])
   = 
    {
      val b1: scala.collection.mutable.Builder[A1, GenericTraversableTemplate.this.CC[A1]] = this.genericBuilder[A1]
      val b2: scala.collection.mutable.Builder[A2, GenericTraversableTemplate.this.CC[A2]] = this.genericBuilder[A2]
      this.sequential.foreach[scala.collection.mutable.Builder[A2, GenericTraversableTemplate.this.CC[A2]]](
        {
          def $anonfun(xy: GenericTraversableTemplate.this.A): 
            scala.collection.mutable.Builder[A2, GenericTraversableTemplate.this.CC[A2]]
           = 
            {
              var ilo1: A1
              var ilo2: A2
              case val x1: (A1, A2) @unchecked = asPair.apply(xy): (A1, A2) @unchecked
              if x1.ne(null) then 
                {
                  ilo1 = x1._1
                  ilo2 = x1._2
                  ()
                }
               else throw new MatchError(x1)
              b1.+=(ilo1)
              b2.+=(ilo2)
            }
          closure($anonfun)
        }
      )
      new Tuple2[GenericTraversableTemplate.this.CC[A1], GenericTraversableTemplate.this.CC[A2]](b1.result(), 
        b2.result()
      )
    }
  def unzip3[A1, A2, A3](implicit asTriple: GenericTraversableTemplate.this.A => (A1, A2, A3)): 
    (GenericTraversableTemplate.this.CC[A1], GenericTraversableTemplate.this.CC[A2], 
      GenericTraversableTemplate.this.CC[A3]
    )
   = 
    {
      val b1: scala.collection.mutable.Builder[A1, GenericTraversableTemplate.this.CC[A1]] = this.genericBuilder[A1]
      val b2: scala.collection.mutable.Builder[A2, GenericTraversableTemplate.this.CC[A2]] = this.genericBuilder[A2]
      val b3: scala.collection.mutable.Builder[A3, GenericTraversableTemplate.this.CC[A3]] = this.genericBuilder[A3]
      this.sequential.foreach[scala.collection.mutable.Builder[A3, GenericTraversableTemplate.this.CC[A3]]](
        {
          def $anonfun(xyz: GenericTraversableTemplate.this.A): 
            scala.collection.mutable.Builder[A3, GenericTraversableTemplate.this.CC[A3]]
           = 
            {
              var ilo3: A1
              var ilo4: A2
              var ilo5: A3
              case val x4: (A1, A2, A3) @unchecked = asTriple.apply(xyz): (A1, A2, A3) @unchecked
              if x4.ne(null) then 
                {
                  ilo3 = x4._1
                  ilo4 = x4._2
                  ilo5 = x4._3
                  ()
                }
               else throw new MatchError(x4)
              b1.+=(ilo3)
              b2.+=(ilo4)
              b3.+=(ilo5)
            }
          closure($anonfun)
        }
      )
      new Tuple3[GenericTraversableTemplate.this.CC[A1], GenericTraversableTemplate.this.CC[A2], 
        GenericTraversableTemplate.this.CC[A3]
      ](b1.result(), b2.result(), b3.result())
    }
  def flatten[B](implicit asTraversable: GenericTraversableTemplate.this.A => scala.collection.GenTraversableOnce[B]): 
    GenericTraversableTemplate.this.CC[B]
   = 
    {
      val b: scala.collection.mutable.Builder[B, GenericTraversableTemplate.this.CC[B]] = this.genericBuilder[B]
      this.sequential.foreach[scala.collection.mutable.Builder[B, GenericTraversableTemplate.this.CC[B]]](
        {
          def $anonfun(xs: GenericTraversableTemplate.this.A): 
            scala.collection.mutable.Builder[B, GenericTraversableTemplate.this.CC[B]]
           = b.++=(asTraversable.apply(xs).seq)
          closure($anonfun)
        }
      )
      b.result()
    }
  @annotation.migration("`transpose` throws an `IllegalArgumentException` if collections are not uniformly sized.", 
    "2.9.0"
  ) def transpose[B](implicit asTraversable: GenericTraversableTemplate.this.A => scala.collection.GenTraversableOnce[B]
    )
  : GenericTraversableTemplate.this.CC[GenericTraversableTemplate.this.CC[B] @uncheckedVariance] = 
    {
      if this.isEmpty then return this.genericBuilder[GenericTraversableTemplate.this.CC[B]].result() else ()
      def fail: Nothing = throw new IllegalArgumentException("transpose requires all collections have the same size")
      val headSize: Int = asTraversable.apply(this.head).size
      val bs: IndexedSeq[scala.collection.mutable.Builder[B, GenericTraversableTemplate.this.CC[B]]] = 
        scala.collection.IndexedSeq.fill[scala.collection.mutable.Builder[B, GenericTraversableTemplate.this.CC[B]]](
          headSize
        )(
          <special-ops>.<cbn-arg>[scala.collection.mutable.Builder[B, GenericTraversableTemplate.this.CC[B]]](
            {
              def $anonfun(): scala.collection.mutable.Builder[B, GenericTraversableTemplate.this.CC[B]] = 
                this.genericBuilder[B]
              closure($anonfun)
            }
          )
        )
      this.sequential.foreach[Unit](
        {
          def $anonfun(xs: GenericTraversableTemplate.this.A): Unit = 
            {
              var i: Int = 0
              asTraversable.apply(xs).foreach[Unit](
                {
                  def $anonfun(x: B): Unit = 
                    {
                      if i.>=(headSize) then fail else ()
                      bs.apply(i).+=(x)
                      i = 1.+(i)
                    }
                  closure($anonfun)
                }
              )
              if i.!=(headSize) then fail else ()
            }
          closure($anonfun)
        }
      )
      val bb: 
        scala.collection.mutable.Builder[GenericTraversableTemplate.this.CC[B], 
          GenericTraversableTemplate.this.CC[GenericTraversableTemplate.this.CC[B]]
        ]
       = this.genericBuilder[GenericTraversableTemplate.this.CC[B]]
      bs.foreach[
        scala.collection.mutable.Builder[GenericTraversableTemplate.this.CC[B], 
          GenericTraversableTemplate.this.CC[GenericTraversableTemplate.this.CC[B]]
        ]
      ](
        {
          def $anonfun(b: scala.collection.mutable.Builder[B, GenericTraversableTemplate.this.CC[B]]): 
            scala.collection.mutable.Builder[GenericTraversableTemplate.this.CC[B], 
              GenericTraversableTemplate.this.CC[GenericTraversableTemplate.this.CC[B]]
            ]
           = bb.+=(b.result())
          closure($anonfun)
        }
      )
      bb.result()
    }
} of class class dotty.tools.dotc.ast.Trees$TypeDef # 1476658
exception while typing package scala.collection.generic {
  @scala.annotation.internal.SourceFile(
    "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/GenericTraversableTemplate.scala"
  ) <trait> trait GenericTraversableTemplate[A, CC <: scala.collection.GenTraversable]() extends Object with 
    scala.collection.generic
  .HasNewBuilder[GenericTraversableTemplate.this.A, 
    GenericTraversableTemplate.this.CC[GenericTraversableTemplate.this.A] @uncheckedVariance
  ] { 
    private type +A
    private type +CC <: scala.collection.GenTraversable
    def foreach[U](f: GenericTraversableTemplate.this.A => U): Unit
    def head: GenericTraversableTemplate.this.A
    def isEmpty: Boolean
    def companion: scala.collection.generic.GenericCompanion[GenericTraversableTemplate.this.CC]
    protected def newBuilder: 
      scala.collection.mutable.Builder[GenericTraversableTemplate.this.A, 
        GenericTraversableTemplate.this.CC[GenericTraversableTemplate.this.A]
      ]
     = this.companion.newBuilder[GenericTraversableTemplate.this.A]
    def genericBuilder[B]: scala.collection.mutable.Builder[B, GenericTraversableTemplate.this.CC[B]] = 
      this.companion.newBuilder[B]
    private def sequential: TraversableOnce[GenericTraversableTemplate.this.A] = 
      this.asInstanceOf[scala.collection.GenTraversableOnce[GenericTraversableTemplate.this.A]].seq
    def unzip[A1, A2](implicit asPair: GenericTraversableTemplate.this.A => (A1, A2)): 
      (GenericTraversableTemplate.this.CC[A1], GenericTraversableTemplate.this.CC[A2])
     = 
      {
        val b1: scala.collection.mutable.Builder[A1, GenericTraversableTemplate.this.CC[A1]] = this.genericBuilder[A1]
        val b2: scala.collection.mutable.Builder[A2, GenericTraversableTemplate.this.CC[A2]] = this.genericBuilder[A2]
        this.sequential.foreach[scala.collection.mutable.Builder[A2, GenericTraversableTemplate.this.CC[A2]]](
          {
            def $anonfun(xy: GenericTraversableTemplate.this.A): 
              scala.collection.mutable.Builder[A2, GenericTraversableTemplate.this.CC[A2]]
             = 
              {
                var ilo1: A1
                var ilo2: A2
                case val x1: (A1, A2) @unchecked = asPair.apply(xy): (A1, A2) @unchecked
                if x1.ne(null) then 
                  {
                    ilo1 = x1._1
                    ilo2 = x1._2
                    ()
                  }
                 else throw new MatchError(x1)
                b1.+=(ilo1)
                b2.+=(ilo2)
              }
            closure($anonfun)
          }
        )
        new Tuple2[GenericTraversableTemplate.this.CC[A1], GenericTraversableTemplate.this.CC[A2]](b1.result(), 
          b2.result()
        )
      }
    def unzip3[A1, A2, A3](implicit asTriple: GenericTraversableTemplate.this.A => (A1, A2, A3)): 
      (GenericTraversableTemplate.this.CC[A1], GenericTraversableTemplate.this.CC[A2], 
        GenericTraversableTemplate.this.CC[A3]
      )
     = 
      {
        val b1: scala.collection.mutable.Builder[A1, GenericTraversableTemplate.this.CC[A1]] = this.genericBuilder[A1]
        val b2: scala.collection.mutable.Builder[A2, GenericTraversableTemplate.this.CC[A2]] = this.genericBuilder[A2]
        val b3: scala.collection.mutable.Builder[A3, GenericTraversableTemplate.this.CC[A3]] = this.genericBuilder[A3]
        this.sequential.foreach[scala.collection.mutable.Builder[A3, GenericTraversableTemplate.this.CC[A3]]](
          {
            def $anonfun(xyz: GenericTraversableTemplate.this.A): 
              scala.collection.mutable.Builder[A3, GenericTraversableTemplate.this.CC[A3]]
             = 
              {
                var ilo3: A1
                var ilo4: A2
                var ilo5: A3
                case val x4: (A1, A2, A3) @unchecked = asTriple.apply(xyz): (A1, A2, A3) @unchecked
                if x4.ne(null) then 
                  {
                    ilo3 = x4._1
                    ilo4 = x4._2
                    ilo5 = x4._3
                    ()
                  }
                 else throw new MatchError(x4)
                b1.+=(ilo3)
                b2.+=(ilo4)
                b3.+=(ilo5)
              }
            closure($anonfun)
          }
        )
        new Tuple3[GenericTraversableTemplate.this.CC[A1], GenericTraversableTemplate.this.CC[A2], 
          GenericTraversableTemplate.this.CC[A3]
        ](b1.result(), b2.result(), b3.result())
      }
    def flatten[B](implicit asTraversable: GenericTraversableTemplate.this.A => scala.collection.GenTraversableOnce[B])
      : 
    GenericTraversableTemplate.this.CC[B] = 
      {
        val b: scala.collection.mutable.Builder[B, GenericTraversableTemplate.this.CC[B]] = this.genericBuilder[B]
        this.sequential.foreach[scala.collection.mutable.Builder[B, GenericTraversableTemplate.this.CC[B]]](
          {
            def $anonfun(xs: GenericTraversableTemplate.this.A): 
              scala.collection.mutable.Builder[B, GenericTraversableTemplate.this.CC[B]]
             = b.++=(asTraversable.apply(xs).seq)
            closure($anonfun)
          }
        )
        b.result()
      }
    @annotation.migration("`transpose` throws an `IllegalArgumentException` if collections are not uniformly sized.", 
      "2.9.0"
    ) def transpose[B](
      implicit asTraversable: GenericTraversableTemplate.this.A => scala.collection.GenTraversableOnce[B]
    ): GenericTraversableTemplate.this.CC[GenericTraversableTemplate.this.CC[B] @uncheckedVariance] = 
      {
        if this.isEmpty then return this.genericBuilder[GenericTraversableTemplate.this.CC[B]].result() else ()
        def fail: Nothing = throw new IllegalArgumentException("transpose requires all collections have the same size")
        val headSize: Int = asTraversable.apply(this.head).size
        val bs: IndexedSeq[scala.collection.mutable.Builder[B, GenericTraversableTemplate.this.CC[B]]] = 
          scala.collection.IndexedSeq.fill[scala.collection.mutable.Builder[B, GenericTraversableTemplate.this.CC[B]]](
            headSize
          )(
            <special-ops>.<cbn-arg>[scala.collection.mutable.Builder[B, GenericTraversableTemplate.this.CC[B]]](
              {
                def $anonfun(): scala.collection.mutable.Builder[B, GenericTraversableTemplate.this.CC[B]] = 
                  this.genericBuilder[B]
                closure($anonfun)
              }
            )
          )
        this.sequential.foreach[Unit](
          {
            def $anonfun(xs: GenericTraversableTemplate.this.A): Unit = 
              {
                var i: Int = 0
                asTraversable.apply(xs).foreach[Unit](
                  {
                    def $anonfun(x: B): Unit = 
                      {
                        if i.>=(headSize) then fail else ()
                        bs.apply(i).+=(x)
                        i = 1.+(i)
                      }
                    closure($anonfun)
                  }
                )
                if i.!=(headSize) then fail else ()
              }
            closure($anonfun)
          }
        )
        val bb: 
          scala.collection.mutable.Builder[GenericTraversableTemplate.this.CC[B], 
            GenericTraversableTemplate.this.CC[GenericTraversableTemplate.this.CC[B]]
          ]
         = this.genericBuilder[GenericTraversableTemplate.this.CC[B]]
        bs.foreach[
          scala.collection.mutable.Builder[GenericTraversableTemplate.this.CC[B], 
            GenericTraversableTemplate.this.CC[GenericTraversableTemplate.this.CC[B]]
          ]
        ](
          {
            def $anonfun(b: scala.collection.mutable.Builder[B, GenericTraversableTemplate.this.CC[B]]): 
              scala.collection.mutable.Builder[GenericTraversableTemplate.this.CC[B], 
                GenericTraversableTemplate.this.CC[GenericTraversableTemplate.this.CC[B]]
              ]
             = bb.+=(b.result())
            closure($anonfun)
          }
        )
        bb.result()
      }
  }
} of class class dotty.tools.dotc.ast.Trees$PackageDef # 1476659
exception while typing package collection {
  package scala.collection.generic {
    @scala.annotation.internal.SourceFile(
      "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/GenericTraversableTemplate.scala"
    ) <trait> trait GenericTraversableTemplate[A, CC <: scala.collection.GenTraversable]() extends Object with 
      scala.collection.generic
    .HasNewBuilder[GenericTraversableTemplate.this.A, 
      GenericTraversableTemplate.this.CC[GenericTraversableTemplate.this.A] @uncheckedVariance
    ] { 
      private type +A
      private type +CC <: scala.collection.GenTraversable
      def foreach[U](f: GenericTraversableTemplate.this.A => U): Unit
      def head: GenericTraversableTemplate.this.A
      def isEmpty: Boolean
      def companion: scala.collection.generic.GenericCompanion[GenericTraversableTemplate.this.CC]
      protected def newBuilder: 
        scala.collection.mutable.Builder[GenericTraversableTemplate.this.A, 
          GenericTraversableTemplate.this.CC[GenericTraversableTemplate.this.A]
        ]
       = this.companion.newBuilder[GenericTraversableTemplate.this.A]
      def genericBuilder[B]: scala.collection.mutable.Builder[B, GenericTraversableTemplate.this.CC[B]] = 
        this.companion.newBuilder[B]
      private def sequential: TraversableOnce[GenericTraversableTemplate.this.A] = 
        this.asInstanceOf[scala.collection.GenTraversableOnce[GenericTraversableTemplate.this.A]].seq
      def unzip[A1, A2](implicit asPair: GenericTraversableTemplate.this.A => (A1, A2)): 
        (GenericTraversableTemplate.this.CC[A1], GenericTraversableTemplate.this.CC[A2])
       = 
        {
          val b1: scala.collection.mutable.Builder[A1, GenericTraversableTemplate.this.CC[A1]] = this.genericBuilder[A1]
          val b2: scala.collection.mutable.Builder[A2, GenericTraversableTemplate.this.CC[A2]] = this.genericBuilder[A2]
          this.sequential.foreach[scala.collection.mutable.Builder[A2, GenericTraversableTemplate.this.CC[A2]]](
            {
              def $anonfun(xy: GenericTraversableTemplate.this.A): 
                scala.collection.mutable.Builder[A2, GenericTraversableTemplate.this.CC[A2]]
               = 
                {
                  var ilo1: A1
                  var ilo2: A2
                  case val x1: (A1, A2) @unchecked = asPair.apply(xy): (A1, A2) @unchecked
                  if x1.ne(null) then 
                    {
                      ilo1 = x1._1
                      ilo2 = x1._2
                      ()
                    }
                   else throw new MatchError(x1)
                  b1.+=(ilo1)
                  b2.+=(ilo2)
                }
              closure($anonfun)
            }
          )
          new Tuple2[GenericTraversableTemplate.this.CC[A1], GenericTraversableTemplate.this.CC[A2]](b1.result(), 
            b2.result()
          )
        }
      def unzip3[A1, A2, A3](implicit asTriple: GenericTraversableTemplate.this.A => (A1, A2, A3)): 
        (GenericTraversableTemplate.this.CC[A1], GenericTraversableTemplate.this.CC[A2], 
          GenericTraversableTemplate.this.CC[A3]
        )
       = 
        {
          val b1: scala.collection.mutable.Builder[A1, GenericTraversableTemplate.this.CC[A1]] = this.genericBuilder[A1]
          val b2: scala.collection.mutable.Builder[A2, GenericTraversableTemplate.this.CC[A2]] = this.genericBuilder[A2]
          val b3: scala.collection.mutable.Builder[A3, GenericTraversableTemplate.this.CC[A3]] = this.genericBuilder[A3]
          this.sequential.foreach[scala.collection.mutable.Builder[A3, GenericTraversableTemplate.this.CC[A3]]](
            {
              def $anonfun(xyz: GenericTraversableTemplate.this.A): 
                scala.collection.mutable.Builder[A3, GenericTraversableTemplate.this.CC[A3]]
               = 
                {
                  var ilo3: A1
                  var ilo4: A2
                  var ilo5: A3
                  case val x4: (A1, A2, A3) @unchecked = asTriple.apply(xyz): (A1, A2, A3) @unchecked
                  if x4.ne(null) then 
                    {
                      ilo3 = x4._1
                      ilo4 = x4._2
                      ilo5 = x4._3
                      ()
                    }
                   else throw new MatchError(x4)
                  b1.+=(ilo3)
                  b2.+=(ilo4)
                  b3.+=(ilo5)
                }
              closure($anonfun)
            }
          )
          new Tuple3[GenericTraversableTemplate.this.CC[A1], GenericTraversableTemplate.this.CC[A2], 
            GenericTraversableTemplate.this.CC[A3]
          ](b1.result(), b2.result(), b3.result())
        }
      def flatten[B](implicit asTraversable: GenericTraversableTemplate.this.A => scala.collection.GenTraversableOnce[B]
        )
      : GenericTraversableTemplate.this.CC[B] = 
        {
          val b: scala.collection.mutable.Builder[B, GenericTraversableTemplate.this.CC[B]] = this.genericBuilder[B]
          this.sequential.foreach[scala.collection.mutable.Builder[B, GenericTraversableTemplate.this.CC[B]]](
            {
              def $anonfun(xs: GenericTraversableTemplate.this.A): 
                scala.collection.mutable.Builder[B, GenericTraversableTemplate.this.CC[B]]
               = b.++=(asTraversable.apply(xs).seq)
              closure($anonfun)
            }
          )
          b.result()
        }
      @annotation.migration("`transpose` throws an `IllegalArgumentException` if collections are not uniformly sized.", 
        "2.9.0"
      ) def transpose[B](
        implicit asTraversable: GenericTraversableTemplate.this.A => scala.collection.GenTraversableOnce[B]
      ): GenericTraversableTemplate.this.CC[GenericTraversableTemplate.this.CC[B] @uncheckedVariance] = 
        {
          if this.isEmpty then return this.genericBuilder[GenericTraversableTemplate.this.CC[B]].result() else ()
          def fail: Nothing = 
            throw new IllegalArgumentException("transpose requires all collections have the same size")
          val headSize: Int = asTraversable.apply(this.head).size
          val bs: IndexedSeq[scala.collection.mutable.Builder[B, GenericTraversableTemplate.this.CC[B]]] = 
            scala.collection.IndexedSeq.fill[scala.collection.mutable.Builder[B, GenericTraversableTemplate.this.CC[B]]]
              (
            headSize)(
              <special-ops>.<cbn-arg>[scala.collection.mutable.Builder[B, GenericTraversableTemplate.this.CC[B]]](
                {
                  def $anonfun(): scala.collection.mutable.Builder[B, GenericTraversableTemplate.this.CC[B]] = 
                    this.genericBuilder[B]
                  closure($anonfun)
                }
              )
            )
          this.sequential.foreach[Unit](
            {
              def $anonfun(xs: GenericTraversableTemplate.this.A): Unit = 
                {
                  var i: Int = 0
                  asTraversable.apply(xs).foreach[Unit](
                    {
                      def $anonfun(x: B): Unit = 
                        {
                          if i.>=(headSize) then fail else ()
                          bs.apply(i).+=(x)
                          i = 1.+(i)
                        }
                      closure($anonfun)
                    }
                  )
                  if i.!=(headSize) then fail else ()
                }
              closure($anonfun)
            }
          )
          val bb: 
            scala.collection.mutable.Builder[GenericTraversableTemplate.this.CC[B], 
              GenericTraversableTemplate.this.CC[GenericTraversableTemplate.this.CC[B]]
            ]
           = this.genericBuilder[GenericTraversableTemplate.this.CC[B]]
          bs.foreach[
            scala.collection.mutable.Builder[GenericTraversableTemplate.this.CC[B], 
              GenericTraversableTemplate.this.CC[GenericTraversableTemplate.this.CC[B]]
            ]
          ](
            {
              def $anonfun(b: scala.collection.mutable.Builder[B, GenericTraversableTemplate.this.CC[B]]): 
                scala.collection.mutable.Builder[GenericTraversableTemplate.this.CC[B], 
                  GenericTraversableTemplate.this.CC[GenericTraversableTemplate.this.CC[B]]
                ]
               = bb.+=(b.result())
              closure($anonfun)
            }
          )
          bb.result()
        }
    }
  }
} of class class dotty.tools.dotc.ast.Trees$PackageDef # 1476660
[=================================>     ] completed (816/940, 95s)exception while typing package scala {
  package collection {
    package scala.collection.generic {
      @scala.annotation.internal.SourceFile(
        "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/GenericTraversableTemplate.scala"
      ) <trait> trait GenericTraversableTemplate[A, CC <: scala.collection.GenTraversable]() extends Object with 
        scala.collection.generic
      .HasNewBuilder[GenericTraversableTemplate.this.A, 
        GenericTraversableTemplate.this.CC[GenericTraversableTemplate.this.A] @uncheckedVariance
      ] { 
        private type +A
        private type +CC <: scala.collection.GenTraversable
        def foreach[U](f: GenericTraversableTemplate.this.A => U): Unit
        def head: GenericTraversableTemplate.this.A
        def isEmpty: Boolean
        def companion: scala.collection.generic.GenericCompanion[GenericTraversableTemplate.this.CC]
        protected def newBuilder: 
          scala.collection.mutable.Builder[GenericTraversableTemplate.this.A, 
            GenericTraversableTemplate.this.CC[GenericTraversableTemplate.this.A]
          ]
         = this.companion.newBuilder[GenericTraversableTemplate.this.A]
        def genericBuilder[B]: scala.collection.mutable.Builder[B, GenericTraversableTemplate.this.CC[B]] = 
          this.companion.newBuilder[B]
        private def sequential: TraversableOnce[GenericTraversableTemplate.this.A] = 
          this.asInstanceOf[scala.collection.GenTraversableOnce[GenericTraversableTemplate.this.A]].seq
        def unzip[A1, A2](implicit asPair: GenericTraversableTemplate.this.A => (A1, A2)): 
          (GenericTraversableTemplate.this.CC[A1], GenericTraversableTemplate.this.CC[A2])
         = 
          {
            val b1: scala.collection.mutable.Builder[A1, GenericTraversableTemplate.this.CC[A1]] = 
              this.genericBuilder[A1]
            val b2: scala.collection.mutable.Builder[A2, GenericTraversableTemplate.this.CC[A2]] = 
              this.genericBuilder[A2]
            this.sequential.foreach[scala.collection.mutable.Builder[A2, GenericTraversableTemplate.this.CC[A2]]](
              {
                def $anonfun(xy: GenericTraversableTemplate.this.A): 
                  scala.collection.mutable.Builder[A2, GenericTraversableTemplate.this.CC[A2]]
                 = 
                  {
                    var ilo1: A1
                    var ilo2: A2
                    case val x1: (A1, A2) @unchecked = asPair.apply(xy): (A1, A2) @unchecked
                    if x1.ne(null) then 
                      {
                        ilo1 = x1._1
                        ilo2 = x1._2
                        ()
                      }
                     else throw new MatchError(x1)
                    b1.+=(ilo1)
                    b2.+=(ilo2)
                  }
                closure($anonfun)
              }
            )
            new Tuple2[GenericTraversableTemplate.this.CC[A1], GenericTraversableTemplate.this.CC[A2]](b1.result(), 
              b2.result()
            )
          }
        def unzip3[A1, A2, A3](implicit asTriple: GenericTraversableTemplate.this.A => (A1, A2, A3)): 
          (GenericTraversableTemplate.this.CC[A1], GenericTraversableTemplate.this.CC[A2], 
            GenericTraversableTemplate.this.CC[A3]
          )
         = 
          {
            val b1: scala.collection.mutable.Builder[A1, GenericTraversableTemplate.this.CC[A1]] = 
              this.genericBuilder[A1]
            val b2: scala.collection.mutable.Builder[A2, GenericTraversableTemplate.this.CC[A2]] = 
              this.genericBuilder[A2]
            val b3: scala.collection.mutable.Builder[A3, GenericTraversableTemplate.this.CC[A3]] = 
              this.genericBuilder[A3]
            this.sequential.foreach[scala.collection.mutable.Builder[A3, GenericTraversableTemplate.this.CC[A3]]](
              {
                def $anonfun(xyz: GenericTraversableTemplate.this.A): 
                  scala.collection.mutable.Builder[A3, GenericTraversableTemplate.this.CC[A3]]
                 = 
                  {
                    var ilo3: A1
                    var ilo4: A2
                    var ilo5: A3
                    case val x4: (A1, A2, A3) @unchecked = asTriple.apply(xyz): (A1, A2, A3) @unchecked
                    if x4.ne(null) then 
                      {
                        ilo3 = x4._1
                        ilo4 = x4._2
                        ilo5 = x4._3
                        ()
                      }
                     else throw new MatchError(x4)
                    b1.+=(ilo3)
                    b2.+=(ilo4)
                    b3.+=(ilo5)
                  }
                closure($anonfun)
              }
            )
            new Tuple3[GenericTraversableTemplate.this.CC[A1], GenericTraversableTemplate.this.CC[A2], 
              GenericTraversableTemplate.this.CC[A3]
            ](b1.result(), b2.result(), b3.result())
          }
        def flatten[B](
          implicit asTraversable: GenericTraversableTemplate.this.A => scala.collection.GenTraversableOnce[B]
        ): GenericTraversableTemplate.this.CC[B] = 
          {
            val b: scala.collection.mutable.Builder[B, GenericTraversableTemplate.this.CC[B]] = this.genericBuilder[B]
            this.sequential.foreach[scala.collection.mutable.Builder[B, GenericTraversableTemplate.this.CC[B]]](
              {
                def $anonfun(xs: GenericTraversableTemplate.this.A): 
                  scala.collection.mutable.Builder[B, GenericTraversableTemplate.this.CC[B]]
                 = b.++=(asTraversable.apply(xs).seq)
                closure($anonfun)
              }
            )
            b.result()
          }
        @annotation.migration("`transpose` throws an `IllegalArgumentException` if collections are not uniformly sized."
          , 
        "2.9.0") def transpose[B](
          implicit asTraversable: GenericTraversableTemplate.this.A => scala.collection.GenTraversableOnce[B]
        ): GenericTraversableTemplate.this.CC[GenericTraversableTemplate.this.CC[B] @uncheckedVariance] = 
          {
            if this.isEmpty then return this.genericBuilder[GenericTraversableTemplate.this.CC[B]].result() else ()
            def fail: Nothing = 
              throw new IllegalArgumentException("transpose requires all collections have the same size")
            val headSize: Int = asTraversable.apply(this.head).size
            val bs: IndexedSeq[scala.collection.mutable.Builder[B, GenericTraversableTemplate.this.CC[B]]] = 
              scala.collection.IndexedSeq.fill[
                scala.collection.mutable.Builder[B, GenericTraversableTemplate.this.CC[B]]
              ](headSize)(
                <special-ops>.<cbn-arg>[scala.collection.mutable.Builder[B, GenericTraversableTemplate.this.CC[B]]](
                  {
                    def $anonfun(): scala.collection.mutable.Builder[B, GenericTraversableTemplate.this.CC[B]] = 
                      this.genericBuilder[B]
                    closure($anonfun)
                  }
                )
              )
            this.sequential.foreach[Unit](
              {
                def $anonfun(xs: GenericTraversableTemplate.this.A): Unit = 
                  {
                    var i: Int = 0
                    asTraversable.apply(xs).foreach[Unit](
                      {
                        def $anonfun(x: B): Unit = 
                          {
                            if i.>=(headSize) then fail else ()
                            bs.apply(i).+=(x)
                            i = 1.+(i)
                          }
                        closure($anonfun)
                      }
                    )
                    if i.!=(headSize) then fail else ()
                  }
                closure($anonfun)
              }
            )
            val bb: 
              scala.collection.mutable.Builder[GenericTraversableTemplate.this.CC[B], 
                GenericTraversableTemplate.this.CC[GenericTraversableTemplate.this.CC[B]]
              ]
             = this.genericBuilder[GenericTraversableTemplate.this.CC[B]]
            bs.foreach[
              scala.collection.mutable.Builder[GenericTraversableTemplate.this.CC[B], 
                GenericTraversableTemplate.this.CC[GenericTraversableTemplate.this.CC[B]]
              ]
            ](
              {
                def $anonfun(b: scala.collection.mutable.Builder[B, GenericTraversableTemplate.this.CC[B]]): 
                  scala.collection.mutable.Builder[GenericTraversableTemplate.this.CC[B], 
                    GenericTraversableTemplate.this.CC[GenericTraversableTemplate.this.CC[B]]
                  ]
                 = bb.+=(b.result())
                closure($anonfun)
              }
            )
            bb.result()
          }
      }
    }
  }
} of class class dotty.tools.dotc.ast.Trees$PackageDef # 1476661
*** error while checking /mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/GenericTraversableTemplate.scala after phase arrayConstructors ***
[=================================>     ] completed (817/940, 96s)[=================================>     ] completed (817/940, 96s)[=================================>     ] completed (817/940, 96s)[=================================>     ] completed (817/940, 96s)[=================================>     ] completed (817/940, 96s)[=================================>     ] completed (819/940, 96s)[=================================>     ] completed (819/940, 96s)[=================================>     ] completed (820/940, 96s)[=================================>     ] completed (820/940, 96s)[=================================>     ] completed (820/940, 96s)[=================================>     ] completed (820/940, 97s)[=================================>     ] completed (821/940, 97s)[=================================>     ] completed (821/940, 97s)[==================================>    ] completed (823/940, 97s)[==================================>    ] completed (823/940, 97s)[==================================>    ] completed (824/940, 97s)[==================================>    ] completed (825/940, 97s)[==================================>    ] completed (825/940, 97s)[==================================>    ] completed (826/940, 97s)[==================================>    ] completed (826/940, 97s)[==================================>    ] completed (826/940, 98s)[==================================>    ] completed (827/940, 98s)[==================================>    ] completed (827/940, 98s)[==================================>    ] completed (827/940, 98s)[==================================>    ] completed (828/940, 98s)[==================================>    ] completed (829/940, 98s)inlining null
exception while typing case val x7: Option[u2.Quux] = (null: p2.Other).Baz.unapply(x6) of class class dotty.tools.dotc.ast.Trees$ValDef # 1514190
exception while typing {
  case val x7: Option[u2.Quux] = (null: p2.Other).Baz.unapply(x6)
  if x7.isEmpty then case2() else 
    {
      case val x8: u2.Quux = x7.get
      println(x8)
    }
} of class class dotty.tools.dotc.ast.Trees$Block # 1514195
exception while typing if x6.asInstanceOf[Object].ne(null) then 
  {
    case val x7: Option[u2.Quux] = (null: p2.Other).Baz.unapply(x6)
    if x7.isEmpty then case2() else 
      {
        case val x8: u2.Quux = x7.get
        println(x8)
      }
  }
 else case2() of class class dotty.tools.dotc.ast.Trees$If # 1514196
exception while typing {
  case val x6: Any = null: Any
  def case2(): Unit = throw new MatchError(x6)
  if x6.asInstanceOf[Object].ne(null) then 
    {
      case val x7: Option[u2.Quux] = (null: p2.Other).Baz.unapply(x6)
      if x7.isEmpty then case2() else 
        {
          case val x8: u2.Quux = x7.get
          println(x8)
        }
    }
   else case2()
} of class class dotty.tools.dotc.ast.Trees$Block # 1514197
exception while typing def f(): Unit = 
  {
    case val x6: Any = null: Any
    def case2(): Unit = throw new MatchError(x6)
    if x6.asInstanceOf[Object].ne(null) then 
      {
        case val x7: Option[u2.Quux] = (null: p2.Other).Baz.unapply(x6)
        if x7.isEmpty then case2() else 
          {
            case val x8: u2.Quux = x7.get
            println(x8)
          }
      }
     else case2()
  } of class class dotty.tools.dotc.ast.Trees$DefDef # 1514199
exception while typing @scala.annotation.internal.SourceFile(
  "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/extractor-types.scala"
) <trait> trait Reifiers() extends Object { 
  def f(): Unit = 
    {
      case val x6: Any = null: Any
      def case2(): Unit = throw new MatchError(x6)
      if x6.asInstanceOf[Object].ne(null) then 
        {
          case val x7: Option[u2.Quux] = (null: p2.Other).Baz.unapply(x6)
          if x7.isEmpty then case2() else 
            {
              case val x8: u2.Quux = x7.get
              println(x8)
            }
        }
       else case2()
    }
} of class class dotty.tools.dotc.ast.Trees$TypeDef # 1514201
exception while typing package p2 {
  @scala.annotation.internal.SourceFile(
    "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/extractor-types.scala"
  ) <trait> trait Other() extends Object { 
    class Quux() extends Object() { 
      private <accessor> def $outer: p2.Other
      final def p2$Other$Quux$$$outer: p2.Other = Quux.this.$outer
    }
    final lazy <accessor> module def Baz: Other.this.Baz = new Other.this.Baz()
    final module class Baz() extends Object() { 
      def unapply(x: Any): Option[Other.this.Quux] = None
    }
  }
  @scala.annotation.internal.SourceFile(
    "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/extractor-types.scala"
  ) <trait> trait Reifiers() extends Object { 
    def f(): Unit = 
      {
        case val x6: Any = null: Any
        def case2(): Unit = throw new MatchError(x6)
        if x6.asInstanceOf[Object].ne(null) then 
          {
            case val x7: Option[u2.Quux] = (null: p2.Other).Baz.unapply(x6)
            if x7.isEmpty then case2() else 
              {
                case val x8: u2.Quux = x7.get
                println(x8)
              }
          }
         else case2()
      }
  }
} of class class dotty.tools.dotc.ast.Trees$PackageDef # 1514202
exception while typing package <empty> {
  package p1 {
    final lazy module val Ex: p1.Ex = new p1.Ex()
    @scala.annotation.internal.SourceFile(
      "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/extractor-types.scala"
    ) final module class Ex() extends Object() { 
      def unapply(p: Any): Option[_ <: Int] = null
    }
    final lazy module val Foo: p1.Foo = new p1.Foo()
    @scala.annotation.internal.SourceFile(
      "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/extractor-types.scala"
    ) final module class Foo() extends Object() { 
      {
        case val x1: Null @unchecked = null: Null @unchecked
        def case1(): Unit = throw new MatchError(x1)
        if x1.ne(null) then 
          {
            case val x2: Option[_ <: Int] = p1.Ex.unapply(x1)
            if x2.isEmpty.unary_! then 
              {
                case val x3: x2.A = x2.get
                ()
              }
             else case1()
          }
         else case1()
      }
    }
  }
  package p2 {
    @scala.annotation.internal.SourceFile(
      "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/extractor-types.scala"
    ) <trait> trait Other() extends Object { 
      class Quux() extends Object() { 
        private <accessor> def $outer: p2.Other
        final def p2$Other$Quux$$$outer: p2.Other = Quux.this.$outer
      }
      final lazy <accessor> module def Baz: Other.this.Baz = new Other.this.Baz()
      final module class Baz() extends Object() { 
        def unapply(x: Any): Option[Other.this.Quux] = None
      }
    }
    @scala.annotation.internal.SourceFile(
      "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/extractor-types.scala"
    ) <trait> trait Reifiers() extends Object { 
      def f(): Unit = 
        {
          case val x6: Any = null: Any
          def case2(): Unit = throw new MatchError(x6)
          if x6.asInstanceOf[Object].ne(null) then 
            {
              case val x7: Option[u2.Quux] = (null: p2.Other).Baz.unapply(x6)
              if x7.isEmpty then case2() else 
                {
                  case val x8: u2.Quux = x7.get
                  println(x8)
                }
            }
           else case2()
        }
    }
  }
} of class class dotty.tools.dotc.ast.Trees$PackageDef # 1514203
*** error while checking /mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/extractor-types.scala after phase arrayConstructors ***
[==================================>    ] completed (830/940, 98s)[==================================>    ] completed (830/940, 98s)[==================================>    ] completed (830/940, 98s)[==================================>    ] completed (830/940, 98s)[==================================>    ] completed (831/940, 99s)[==================================>    ] completed (832/940, 99s)[==================================>    ] completed (834/940, 99s)[==================================>    ] completed (834/940, 99s)[==================================>    ] completed (836/940, 99s)[==================================>    ] completed (837/940, 99s)[==================================>    ] completed (838/940, 99s)[==================================>    ] completed (840/940, 99s)[==================================>    ] completed (840/940, 99s)[==================================>    ] completed (841/940, 99s)[==================================>    ] completed (843/940, 100s)[==================================>    ] completed (843/940, 100s)inlining null
inlining "singleton"
inlining this
exception while typing "singleton": String: String(s1) of class class dotty.tools.dotc.ast.Trees$Typed # 1533656
exception while typing println("singleton": String: String(s1)) of class class dotty.tools.dotc.ast.Trees$Apply # 1533657
exception while typing {
  println(None)
  println("singleton": String: String(s1))
} of class class dotty.tools.dotc.ast.Trees$Block # 1533658
exception while typing def test1: Unit = 
  {
    println(None)
    println("singleton": String: String(s1))
  } of class class dotty.tools.dotc.ast.Trees$DefDef # 1533669
exception while typing @scala.annotation.internal.SourceFile(
  "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/devalify.scala"
) final module class Test() extends Object() { 
  def test0: Unit = 
    {
      <trait> trait I() extends Object { 
        def foo: Any = null
      }
      (null: I).foo
      ()
    }
  def test1: Unit = 
    {
      println(None)
      println("singleton": String: String(s1))
    }
  def test2: Unit = 
    {
      class Foo() extends Object() { 
        class Bar() extends Object() { 
          private <accessor> def $outer: Foo
          final def Test$_$Foo$Bar$$$outer: Foo = Bar.this.$outer
        }
      }
      val foo: Foo = new Foo()
      val subFoo: Foo = foo
      val subFooBar: subFoo.Bar = new subFoo.Bar()
      println(subFooBar)
    }
  def test3: Unit = 
    {
      <trait> trait NumericRange() extends Object { 
        def mapRange: NumericRange = 
          {
            final class $anon() extends Object() with NumericRange { 
              def underlyingRange: NumericRange = this: NumericRange
            }
            new Object with NumericRange{...}(): NumericRange
          }
      }
      ()
    }
} of class class dotty.tools.dotc.ast.Trees$TypeDef # 1533781
exception while typing package <empty> {
  final lazy module val Test: Test = new Test()
  @scala.annotation.internal.SourceFile(
    "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/devalify.scala"
  ) final module class Test() extends Object() { 
    def test0: Unit = 
      {
        <trait> trait I() extends Object { 
          def foo: Any = null
        }
        (null: I).foo
        ()
      }
    def test1: Unit = 
      {
        println(None)
        println("singleton": String: String(s1))
      }
    def test2: Unit = 
      {
        class Foo() extends Object() { 
          class Bar() extends Object() { 
            private <accessor> def $outer: Foo
            final def Test$_$Foo$Bar$$$outer: Foo = Bar.this.$outer
          }
        }
        val foo: Foo = new Foo()
        val subFoo: Foo = foo
        val subFooBar: subFoo.Bar = new subFoo.Bar()
        println(subFooBar)
      }
    def test3: Unit = 
      {
        <trait> trait NumericRange() extends Object { 
          def mapRange: NumericRange = 
            {
              final class $anon() extends Object() with NumericRange { 
                def underlyingRange: NumericRange = this: NumericRange
              }
              new Object with NumericRange{...}(): NumericRange
            }
        }
        ()
      }
  }
} of class class dotty.tools.dotc.ast.Trees$PackageDef # 1533782
*** error while checking /mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/devalify.scala after phase arrayConstructors ***
[==================================>    ] completed (845/940, 100s)[==================================>    ] completed (845/940, 100s)[==================================>    ] completed (845/940, 100s)[==================================>    ] completed (845/940, 100s)[===================================>   ] completed (847/940, 100s)[===================================>   ] completed (847/940, 100s)[===================================>   ] completed (847/940, 100s)[===================================>   ] completed (847/940, 100s)[===================================>   ] completed (849/940, 101s)[===================================>   ] completed (849/940, 101s)[===================================>   ] completed (850/940, 101s)[===================================>   ] completed (850/940, 101s)[===================================>   ] completed (851/940, 101s)[===================================>   ] completed (852/940, 101s)[===================================>   ] completed (853/940, 101s)[===================================>   ] completed (853/940, 101s)[===================================>   ] completed (854/940, 101s)[===================================>   ] completed (856/940, 101s)[===================================>   ] completed (856/940, 102s)[===================================>   ] completed (858/940, 102s)[===================================>   ] completed (859/940, 102s)[===================================>   ] completed (861/940, 102s)[===================================>   ] completed (861/940, 102s)[===================================>   ] completed (862/940, 102s)[===================================>   ] completed (862/940, 102s)[===================================>   ] completed (862/940, 102s)[===================================>   ] completed (862/940, 102s)[===================================>   ] completed (862/940, 102s)[===================================>   ] completed (862/940, 103s)[===================================>   ] completed (863/940, 103s)[===================================>   ] completed (863/940, 103s)[===================================>   ] completed (863/940, 103s)[===================================>   ] completed (863/940, 103s)[===================================>   ] completed (864/940, 103s)[===================================>   ] completed (866/940, 103s)[===================================>   ] completed (867/940, 103s)[===================================>   ] completed (867/940, 104s)inlining null
[===================================>   ] completed (868/940, 104s)[===================================>   ] completed (868/940, 104s)[===================================>   ] completed (869/940, 104s)[====================================>  ] completed (871/940, 104s)[====================================>  ] completed (872/940, 104s)[====================================>  ] completed (872/940, 104s)[====================================>  ] completed (873/940, 104s)[====================================>  ] completed (873/940, 104s)[====================================>  ] completed (876/940, 104s)[====================================>  ] completed (876/940, 105s)[====================================>  ] completed (879/940, 105s)[====================================>  ] completed (879/940, 105s)[====================================>  ] completed (880/940, 105s)[====================================>  ] completed (882/940, 105s)[====================================>  ] completed (883/940, 105s)[====================================>  ] completed (883/940, 105s)[====================================>  ] completed (884/940, 105s)[====================================>  ] completed (885/940, 105s)[====================================>  ] completed (886/940, 105s)[====================================>  ] completed (888/940, 106s)[====================================>  ] completed (888/940, 106s)[====================================>  ] completed (890/940, 106s)[====================================>  ] completed (890/940, 106s)[====================================>  ] completed (890/940, 106s)[====================================>  ] completed (891/940, 106s)[=====================================> ] completed (893/940, 106s)[=====================================> ] completed (893/940, 106s)[=====================================> ] completed (895/940, 106s)[=====================================> ] completed (896/940, 106s)[=====================================> ] completed (898/940, 107s)[=====================================> ] completed (899/940, 107s)[=====================================> ] completed (899/940, 107s)[=====================================> ] completed (900/940, 107s)[=====================================> ] completed (900/940, 107s)[=====================================> ] completed (900/940, 107s)[=====================================> ] completed (900/940, 107s)[=====================================> ] completed (900/940, 107s)[=====================================> ] completed (901/940, 107s)[=====================================> ] completed (901/940, 107s)[=====================================> ] completed (901/940, 108s)[=====================================> ] completed (902/940, 108s)[=====================================> ] completed (902/940, 108s)[=====================================> ] completed (903/940, 108s)[=====================================> ] completed (903/940, 108s)[=====================================> ] completed (906/940, 108s)[=====================================> ] completed (906/940, 108s)[=====================================> ] completed (906/940, 108s)[=====================================> ] completed (909/940, 108s)[=====================================> ] completed (909/940, 108s)[=====================================> ] completed (910/940, 109s)[=====================================> ] completed (912/940, 109s)[=====================================> ] completed (913/940, 109s)[=====================================> ] completed (913/940, 109s)[=====================================> ] completed (913/940, 109s)[=====================================> ] completed (914/940, 109s)[=====================================> ] completed (915/940, 109s)[=====================================> ] completed (915/940, 109s)[=====================================> ] completed (915/940, 109s)[=====================================> ] completed (915/940, 109s)[=====================================> ] completed (916/940, 110s)[=====================================> ] completed (916/940, 110s)[=====================================> ] completed (916/940, 110s)[=====================================> ] completed (916/940, 110s)[=====================================> ] completed (916/940, 110s)[=====================================> ] completed (916/940, 110s)[=====================================> ] completed (916/940, 110s)[======================================>] completed (917/940, 110s)[======================================>] completed (917/940, 110s)[======================================>] completed (917/940, 110s)[======================================>] completed (917/940, 111s)inlining null
inlining null
[======================================>] completed (917/940, 111s)[======================================>] completed (917/940, 111s)inlining {
  def $anonfun(x: Int): Int = 1.+(x)
  closure($anonfun)
}
inlining {
  def $anonfun(x: String): String = x.+(x)
  closure($anonfun)
}
[======================================>] completed (917/940, 111s)[======================================>] completed (917/940, 111s)[======================================>] completed (917/940, 111s)exception while typing {
  def $anonfun(x: Int): Int = 1.+(x)
  closure($anonfun)
} of class class dotty.tools.dotc.ast.Trees$Block # 1688967
exception while typing {
  def $anonfun(x: Int): Int = 1.+(x)
  closure($anonfun)
}: (Int => Int) of class class dotty.tools.dotc.ast.Trees$Typed # 1688969
exception while typing t6260.Test.map2[Int, Int](new t6260.Box[Int](42), 
  {
    def $anonfun(x: Int): Int = 1.+(x)
    closure($anonfun)
  }: (Int => Int)
) of class class dotty.tools.dotc.ast.Trees$Apply # 1688970
exception while typing {
  t6260.Test.map2[Int, Int](new t6260.Box[Int](42), 
    {
      def $anonfun(x: Int): Int = 1.+(x)
      closure($anonfun)
    }: (Int => Int)
  )
  {
    val ev$3: t6260.Box[String] = new t6260.Box[String]("abc")
    t6260.Box.map$extension[String, String](ev$3)(
      {
        def $anonfun(x: String): String = x.+(x)
        closure($anonfun)
      }: (String => String)
    )
  }
  ()
} of class class dotty.tools.dotc.ast.Trees$Block # 1688980
exception while typing def main(args: Array[String]): Unit = 
  {
    t6260.Test.map2[Int, Int](new t6260.Box[Int](42), 
      {
        def $anonfun(x: Int): Int = 1.+(x)
        closure($anonfun)
      }: (Int => Int)
    )
    {
      val ev$3: t6260.Box[String] = new t6260.Box[String]("abc")
      t6260.Box.map$extension[String, String](ev$3)(
        {
          def $anonfun(x: String): String = x.+(x)
          closure($anonfun)
        }: (String => String)
      )
    }
    ()
  } of class class dotty.tools.dotc.ast.Trees$DefDef # 1688988
exception while typing @scala.annotation.internal.SourceFile(
  "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/pos_valueclasses/t6260.scala"
) final module class Test() extends Object() { 
  def map2[X, Y](self: t6260.Box[X], f: X => Y): t6260.Box[Y] = 
    {
      def $anonfun(bx: t6260.Box[X]): t6260.Box[Y] = new t6260.Box[Y](f.apply(bx.x))
      closure($anonfun)
    }.apply(self)
  def main(args: Array[String]): Unit = 
    {
      t6260.Test.map2[Int, Int](new t6260.Box[Int](42), 
        {
          def $anonfun(x: Int): Int = 1.+(x)
          closure($anonfun)
        }: (Int => Int)
      )
      {
        val ev$3: t6260.Box[String] = new t6260.Box[String]("abc")
        t6260.Box.map$extension[String, String](ev$3)(
          {
            def $anonfun(x: String): String = x.+(x)
            closure($anonfun)
          }: (String => String)
        )
      }
      ()
    }
} of class class dotty.tools.dotc.ast.Trees$TypeDef # 1688992
exception while typing package t6260 {
  @scala.annotation.internal.SourceFile(
    "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/pos_valueclasses/t6260.scala"
  ) final class Box[X](x: X) extends AnyVal() { 
    private type X
    <accessor> def x: Box.this.X
    def map[Y](f: Box.this.X => Y): t6260.Box[Y] = t6260.Box.map$extension[Y, Box.this.X](this)(f)
    override def hashCode(): Int = t6260.Box.hashCode$extension[Box.this.X](this)()
    override def equals(x$0: Any): Boolean = t6260.Box.equals$extension[Box.this.X](this)(x$0)
  }
  final lazy module val Box: t6260.Box = new t6260.Box()
  @scala.annotation.internal.SourceFile(
    "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/pos_valueclasses/t6260.scala"
  ) final module class Box() extends Object() { 
    final def map$extension[Y, X]($this: t6260.Box[X])(f: X => Y): t6260.Box[Y] = 
      {
        def $anonfun(bx: t6260.Box[X]): t6260.Box[Y] = new t6260.Box[Y](f.apply(bx.x))
        closure($anonfun)
      }.apply($this)
    final def hashCode$extension[X]($this: t6260.Box[X])(): Int = $this.x.hashCode()
    final def equals$extension[X]($this: t6260.Box[X])(x$0: Any): Boolean = 
      if x$0.$isInstanceOf$[t6260.Box[X]] then 
        {
          case val x61: t6260.Box[X] = x$0.asInstanceOf[t6260.Box[X]]
          $this.x.==(x61.x)
        }
       else 
        if x$0.$isInstanceOf$[Any] then 
          {
            x$0.asInstanceOf[Any]
            false
          }
         else throw new MatchError(x$0)
  }
  final lazy module val Test: t6260.Test = new t6260.Test()
  @scala.annotation.internal.SourceFile(
    "/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/pos_valueclasses/t6260.scala"
  ) final module class Test() extends Object() { 
    def map2[X, Y](self: t6260.Box[X], f: X => Y): t6260.Box[Y] = 
      {
        def $anonfun(bx: t6260.Box[X]): t6260.Box[Y] = new t6260.Box[Y](f.apply(bx.x))
        closure($anonfun)
      }.apply(self)
    def main(args: Array[String]): Unit = 
      {
        t6260.Test.map2[Int, Int](new t6260.Box[Int](42), 
          {
            def $anonfun(x: Int): Int = 1.+(x)
            closure($anonfun)
          }: (Int => Int)
        )
        {
          val ev$3: t6260.Box[String] = new t6260.Box[String]("abc")
          t6260.Box.map$extension[String, String](ev$3)(
            {
              def $anonfun(x: String): String = x.+(x)
              closure($anonfun)
            }: (String => String)
          )
        }
        ()
      }
  }
} of class class dotty.tools.dotc.ast.Trees$PackageDef # 1688993
*** error while checking /mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/../tests/pos/pos_valueclasses/t6260.scala after phase arrayConstructors ***
[======================================>] completed (917/940, 111s)[======================================>] completed (917/940, 111s)[======================================>] completed (917/940, 111s)[======================================>] completed (917/940, 111s)[======================================>] completed (919/940, 112s)[======================================>] completed (919/940, 112s)[======================================>] completed (919/940, 112s)[======================================>] completed (919/940, 112s)[======================================>] completed (919/940, 112s)[======================================>] completed (920/940, 112s)[======================================>] completed (920/940, 112s)[======================================>] completed (922/940, 112s)[======================================>] completed (922/940, 112s)[======================================>] completed (923/940, 112s)[======================================>] completed (924/940, 113s)[======================================>] completed (924/940, 113s)[======================================>] completed (924/940, 113s)[======================================>] completed (924/940, 113s)[======================================>] completed (925/940, 113s)[======================================>] completed (925/940, 113s)[======================================>] completed (926/940, 113s)[======================================>] completed (927/940, 113s)[======================================>] completed (927/940, 113s)[======================================>] completed (927/940, 114s)[======================================>] completed (928/940, 114s)[======================================>] completed (928/940, 114s)[======================================>] completed (929/940, 114s)[======================================>] completed (930/940, 114s)[======================================>] completed (930/940, 114s)[======================================>] completed (931/940, 114s)[======================================>] completed (931/940, 114s)[======================================>] completed (933/940, 114s)[======================================>] completed (933/940, 115s)[======================================>] completed (933/940, 115s)[======================================>] completed (933/940, 115s)[======================================>] completed (933/940, 115s)[======================================>] completed (933/940, 115s)[======================================>] completed (935/940, 115s)[======================================>] completed (935/940, 115s)[======================================>] completed (935/940, 115s)[======================================>] completed (935/940, 115s)[======================================>] completed (935/940, 115s)[======================================>] completed (935/940, 116s)[======================================>] completed (935/940, 116s)[======================================>] completed (936/940, 116s)[======================================>] completed (936/940, 116s)[======================================>] completed (936/940, 116s)[======================================>] completed (936/940, 116s)[======================================>] completed (936/940, 116s)[======================================>] completed (936/940, 116s)[======================================>] completed (936/940, 116s)[======================================>] completed (936/940, 117s)[======================================>] completed (936/940, 117s)[======================================>] completed (936/940, 117s)[======================================>] completed (936/940, 117s)[======================================>] completed (936/940, 117s)[======================================>] completed (936/940, 117s)[======================================>] completed (936/940, 117s)[======================================>] completed (936/940, 117s)[======================================>] completed (936/940, 117s)[======================================>] completed (936/940, 117s)[======================================>] completed (936/940, 118s)[======================================>] completed (936/940, 118s)[======================================>] completed (936/940, 118s)[======================================>] completed (936/940, 118s)[======================================>] completed (936/940, 118s)[======================================>] completed (936/940, 118s)[======================================>] completed (936/940, 118s)[======================================>] completed (936/940, 118s)[======================================>] completed (936/940, 118s)[======================================>] completed (936/940, 118s)[======================================>] completed (936/940, 119s)[======================================>] completed (936/940, 119s)[======================================>] completed (936/940, 119s)[======================================>] completed (936/940, 119s)[======================================>] completed (936/940, 119s)[======================================>] completed (936/940, 119s)[======================================>] completed (936/940, 119s)[======================================>] completed (936/940, 119s)[======================================>] completed (936/940, 119s)[======================================>] completed (936/940, 119s)[======================================>] completed (936/940, 120s)[======================================>] completed (936/940, 120s)[======================================>] completed (936/940, 120s)[======================================>] completed (936/940, 120s)[======================================>] completed (936/940, 120s)[======================================>] completed (936/940, 120s)[======================================>] completed (936/940, 120s)[======================================>] completed (936/940, 120s)[======================================>] completed (936/940, 120s)[======================================>] completed (936/940, 120s)[======================================>] completed (936/940, 121s)[======================================>] completed (936/940, 121s)[======================================>] completed (936/940, 121s)[======================================>] completed (936/940, 121s)[======================================>] completed (936/940, 121s)[======================================>] completed (936/940, 121s)[======================================>] completed (936/940, 121s)[======================================>] completed (936/940, 121s)[======================================>] completed (936/940, 121s)[======================================>] completed (936/940, 121s)[======================================>] completed (936/940, 122s)[======================================>] completed (936/940, 122s)[======================================>] completed (936/940, 122s)[======================================>] completed (936/940, 122s)[======================================>] completed (936/940, 122s)[======================================>] completed (936/940, 122s)[======================================>] completed (936/940, 122s)[======================================>] completed (936/940, 122s)[======================================>] completed (936/940, 122s)[======================================>] completed (936/940, 122s)[======================================>] completed (936/940, 123s)[======================================>] completed (936/940, 123s)[======================================>] completed (936/940, 123s)[======================================>] completed (936/940, 123s)[======================================>] completed (936/940, 123s)[======================================>] completed (936/940, 123s)[======================================>] completed (936/940, 123s)[======================================>] completed (936/940, 123s)[======================================>] completed (936/940, 123s)[======================================>] completed (936/940, 123s)[======================================>] completed (936/940, 124s)[======================================>] completed (936/940, 124s)[======================================>] completed (936/940, 124s)[======================================>] completed (936/940, 124s)[======================================>] completed (936/940, 124s)[======================================>] completed (936/940, 124s)[======================================>] completed (936/940, 124s)[======================================>] completed (936/940, 124s)[======================================>] completed (936/940, 124s)[======================================>] completed (936/940, 124s)[======================================>] completed (936/940, 125s)[======================================>] completed (936/940, 125s)[======================================>] completed (936/940, 125s)[======================================>] completed (936/940, 125s)[======================================>] completed (936/940, 125s)[======================================>] completed (936/940, 125s)[======================================>] completed (936/940, 125s)[======================================>] completed (936/940, 125s)[======================================>] completed (936/940, 125s)[======================================>] completed (936/940, 125s)[======================================>] completed (936/940, 126s)[======================================>] completed (936/940, 126s)[======================================>] completed (936/940, 126s)[======================================>] completed (936/940, 126s)[======================================>] completed (936/940, 126s)[======================================>] completed (936/940, 126s)[======================================>] completed (936/940, 126s)[======================================>] completed (936/940, 126s)[======================================>] completed (936/940, 126s)[======================================>] completed (936/940, 126s)[======================================>] completed (936/940, 127s)[======================================>] completed (936/940, 127s)[======================================>] completed (936/940, 127s)[======================================>] completed (936/940, 127s)[======================================>] completed (936/940, 127s)[======================================>] completed (936/940, 127s)[======================================>] completed (936/940, 127s)[======================================>] completed (936/940, 127s)[======================================>] completed (936/940, 127s)[======================================>] completed (936/940, 127s)[======================================>] completed (936/940, 128s)[======================================>] completed (936/940, 128s)[======================================>] completed (936/940, 128s)[======================================>] completed (936/940, 128s)[======================================>] completed (936/940, 128s)[======================================>] completed (936/940, 128s)[======================================>] completed (936/940, 128s)[======================================>] completed (936/940, 128s)[======================================>] completed (936/940, 128s)[======================================>] completed (936/940, 128s)[======================================>] completed (936/940, 129s)[======================================>] completed (936/940, 129s)[======================================>] completed (936/940, 129s)[======================================>] completed (936/940, 129s)[======================================>] completed (936/940, 129s)[======================================>] completed (936/940, 129s)[======================================>] completed (936/940, 129s)[======================================>] completed (936/940, 129s)[======================================>] completed (936/940, 129s)[======================================>] completed (936/940, 129s)[======================================>] completed (936/940, 130s)[======================================>] completed (936/940, 130s)[======================================>] completed (936/940, 130s)[======================================>] completed (936/940, 130s)[======================================>] completed (936/940, 130s)[======================================>] completed (936/940, 130s)[======================================>] completed (936/940, 130s)[======================================>] completed (936/940, 130s)[======================================>] completed (936/940, 130s)[======================================>] completed (936/940, 130s)[======================================>] completed (936/940, 131s)[======================================>] completed (936/940, 131s)[======================================>] completed (936/940, 131s)[======================================>] completed (936/940, 131s)[======================================>] completed (936/940, 131s)[======================================>] completed (936/940, 131s)[======================================>] completed (936/940, 131s)[======================================>] completed (936/940, 131s)[======================================>] completed (936/940, 131s)[======================================>] completed (936/940, 131s)[======================================>] completed (936/940, 132s)[======================================>] completed (936/940, 132s)[======================================>] completed (936/940, 132s)[======================================>] completed (936/940, 132s)[======================================>] completed (936/940, 132s)[======================================>] completed (936/940, 132s)[======================================>] completed (936/940, 132s)[======================================>] completed (936/940, 132s)[======================================>] completed (936/940, 132s)[======================================>] completed (936/940, 132s)[======================================>] completed (936/940, 133s)[======================================>] completed (936/940, 133s)[======================================>] completed (936/940, 133s)[======================================>] completed (936/940, 133s)[======================================>] completed (936/940, 133s)[======================================>] completed (936/940, 133s)[======================================>] completed (936/940, 133s)[======================================>] completed (936/940, 133s)[======================================>] completed (936/940, 133s)[======================================>] completed (936/940, 133s)[======================================>] completed (936/940, 134s)[======================================>] completed (936/940, 134s)[======================================>] completed (936/940, 134s)[======================================>] completed (936/940, 134s)[======================================>] completed (936/940, 134s)[======================================>] completed (936/940, 134s)[======================================>] completed (936/940, 134s)[======================================>] completed (936/940, 134s)[======================================>] completed (936/940, 134s)[======================================>] completed (936/940, 134s)[======================================>] completed (936/940, 135s)[======================================>] completed (936/940, 135s)[======================================>] completed (936/940, 135s)[======================================>] completed (936/940, 135s)[======================================>] completed (936/940, 135s)[======================================>] completed (936/940, 135s)[======================================>] completed (936/940, 135s)[======================================>] completed (936/940, 135s)[======================================>] completed (936/940, 135s)[======================================>] completed (936/940, 135s)[======================================>] completed (936/940, 136s)[======================================>] completed (936/940, 136s)[======================================>] completed (936/940, 136s)[======================================>] completed (936/940, 136s)[======================================>] completed (936/940, 136s)[======================================>] completed (936/940, 136s)[======================================>] completed (936/940, 136s)[======================================>] completed (936/940, 136s)[======================================>] completed (936/940, 136s)[======================================>] completed (936/940, 136s)[======================================>] completed (936/940, 137s)[======================================>] completed (936/940, 137s)[======================================>] completed (936/940, 137s)[======================================>] completed (936/940, 137s)[======================================>] completed (936/940, 137s)[======================================>] completed (936/940, 137s)[======================================>] completed (936/940, 137s)[======================================>] completed (936/940, 137s)[======================================>] completed (936/940, 137s)[======================================>] completed (936/940, 137s)[======================================>] completed (936/940, 138s)[======================================>] completed (936/940, 138s)[======================================>] completed (936/940, 138s)[======================================>] completed (936/940, 138s)[======================================>] completed (936/940, 138s)[======================================>] completed (936/940, 138s)[======================================>] completed (936/940, 138s)[======================================>] completed (936/940, 138s)[======================================>] completed (936/940, 138s)[======================================>] completed (936/940, 138s)[======================================>] completed (936/940, 139s)[======================================>] completed (936/940, 139s)[======================================>] completed (936/940, 139s)[======================================>] completed (936/940, 139s)[======================================>] completed (936/940, 139s)[======================================>] completed (936/940, 139s)[======================================>] completed (936/940, 139s)[======================================>] completed (936/940, 139s)[======================================>] completed (936/940, 139s)[======================================>] completed (936/940, 139s)[======================================>] completed (937/940, 140s)[======================================>] completed (937/940, 140s)[======================================>] completed (937/940, 140s)[======================================>] completed (937/940, 140s)[======================================>] completed (937/940, 140s)[======================================>] completed (937/940, 140s)[======================================>] completed (937/940, 140s)[======================================>] completed (937/940, 140s)[======================================>] completed (937/940, 140s)[======================================>] completed (937/940, 140s)[======================================>] completed (937/940, 141s)[======================================>] completed (937/940, 141s)[======================================>] completed (937/940, 141s)[======================================>] completed (937/940, 141s)[======================================>] completed (937/940, 141s)[======================================>] completed (937/940, 141s)[======================================>] completed (937/940, 141s)[======================================>] completed (937/940, 141s)[======================================>] completed (937/940, 141s)[======================================>] completed (937/940, 141s)[======================================>] completed (937/940, 142s)[======================================>] completed (937/940, 142s)[======================================>] completed (937/940, 142s)[======================================>] completed (937/940, 142s)[======================================>] completed (937/940, 142s)[======================================>] completed (937/940, 142s)[======================================>] completed (937/940, 142s)[======================================>] completed (937/940, 142s)[======================================>] completed (937/940, 142s)[======================================>] completed (937/940, 142s)[======================================>] completed (937/940, 143s)[======================================>] completed (937/940, 143s)[======================================>] completed (937/940, 143s)[======================================>] completed (937/940, 143s)[======================================>] completed (937/940, 143s)[======================================>] completed (937/940, 143s)[======================================>] completed (937/940, 143s)[======================================>] completed (937/940, 143s)[======================================>] completed (937/940, 143s)[======================================>] completed (937/940, 143s)[======================================>] completed (937/940, 144s)[======================================>] completed (937/940, 144s)[======================================>] completed (937/940, 144s)[======================================>] completed (937/940, 144s)[======================================>] completed (937/940, 144s)[======================================>] completed (937/940, 144s)[======================================>] completed (937/940, 144s)[======================================>] completed (937/940, 144s)[======================================>] completed (937/940, 144s)[======================================>] completed (937/940, 144s)[======================================>] completed (937/940, 145s)[======================================>] completed (937/940, 145s)[======================================>] completed (937/940, 145s)[======================================>] completed (937/940, 145s)[======================================>] completed (937/940, 145s)[======================================>] completed (937/940, 145s)[======================================>] completed (937/940, 145s)[======================================>] completed (937/940, 145s)[======================================>] completed (937/940, 145s)[======================================>] completed (937/940, 145s)[======================================>] completed (937/940, 146s)[======================================>] completed (937/940, 146s)[======================================>] completed (937/940, 146s)[======================================>] completed (937/940, 146s)[======================================>] completed (937/940, 146s)[======================================>] completed (937/940, 146s)[======================================>] completed (937/940, 146s)[======================================>] completed (937/940, 146s)[======================================>] completed (937/940, 146s)[======================================>] completed (937/940, 147s)[======================================>] completed (937/940, 147s)[======================================>] completed (937/940, 147s)[======================================>] completed (937/940, 147s)[======================================>] completed (937/940, 147s)[======================================>] completed (937/940, 147s)[======================================>] completed (937/940, 147s)[======================================>] completed (937/940, 147s)[======================================>] completed (937/940, 147s)[======================================>] completed (937/940, 147s)[======================================>] completed (937/940, 148s)[======================================>] completed (937/940, 148s)[======================================>] completed (937/940, 148s)[======================================>] completed (937/940, 148s)[======================================>] completed (937/940, 148s)[======================================>] completed (937/940, 148s)[======================================>] completed (937/940, 148s)[======================================>] completed (937/940, 148s)[======================================>] completed (937/940, 148s)[======================================>] completed (937/940, 148s)[======================================>] completed (937/940, 149s)[======================================>] completed (937/940, 149s)[======================================>] completed (937/940, 149s)[======================================>] completed (937/940, 149s)[======================================>] completed (937/940, 149s)[======================================>] completed (937/940, 149s)[======================================>] completed (937/940, 149s)[======================================>] completed (937/940, 149s)[======================================>] completed (937/940, 149s)[======================================>] completed (937/940, 149s)[======================================>] completed (937/940, 150s)[======================================>] completed (937/940, 150s)[======================================>] completed (937/940, 150s)[======================================>] completed (937/940, 150s)[======================================>] completed (937/940, 150s)[======================================>] completed (937/940, 150s)[======================================>] completed (937/940, 150s)[======================================>] completed (937/940, 150s)[======================================>] completed (937/940, 150s)[======================================>] completed (937/940, 150s)[======================================>] completed (937/940, 151s)[======================================>] completed (937/940, 151s)[======================================>] completed (937/940, 151s)[======================================>] completed (937/940, 151s)[======================================>] completed (937/940, 151s)[======================================>] completed (937/940, 151s)[======================================>] completed (937/940, 151s)[======================================>] completed (937/940, 151s)[======================================>] completed (937/940, 151s)[======================================>] completed (937/940, 151s)[======================================>] completed (937/940, 152s)[======================================>] completed (937/940, 152s)[======================================>] completed (937/940, 152s)[======================================>] completed (937/940, 152s)[======================================>] completed (937/940, 152s)[======================================>] completed (937/940, 152s)[======================================>] completed (937/940, 152s)[======================================>] completed (937/940, 152s)[======================================>] completed (937/940, 152s)[======================================>] completed (937/940, 152s)[======================================>] completed (937/940, 153s)[======================================>] completed (937/940, 153s)[======================================>] completed (937/940, 153s)[======================================>] completed (937/940, 153s)[======================================>] completed (937/940, 153s)[======================================>] completed (937/940, 153s)[======================================>] completed (937/940, 153s)[======================================>] completed (937/940, 153s)[======================================>] completed (937/940, 153s)[======================================>] completed (937/940, 153s)[======================================>] completed (937/940, 154s)[======================================>] completed (937/940, 154s)[======================================>] completed (937/940, 154s)[======================================>] completed (937/940, 154s)[======================================>] completed (937/940, 154s)[======================================>] completed (937/940, 154s)[======================================>] completed (937/940, 154s)[======================================>] completed (937/940, 154s)[======================================>] completed (937/940, 154s)[======================================>] completed (937/940, 154s)[======================================>] completed (937/940, 155s)[======================================>] completed (937/940, 155s)[======================================>] completed (937/940, 155s)[======================================>] completed (937/940, 155s)[======================================>] completed (937/940, 155s)[======================================>] completed (937/940, 155s)[======================================>] completed (937/940, 155s)[======================================>] completed (937/940, 155s)[======================================>] completed (937/940, 155s)[======================================>] completed (937/940, 155s)[======================================>] completed (937/940, 156s)[======================================>] completed (937/940, 156s)[======================================>] completed (937/940, 156s)[======================================>] completed (937/940, 156s)[======================================>] completed (937/940, 156s)[======================================>] completed (937/940, 156s)[======================================>] completed (937/940, 156s)[======================================>] completed (937/940, 156s)[======================================>] completed (937/940, 156s)[======================================>] completed (937/940, 156s)[======================================>] completed (937/940, 157s)[======================================>] completed (937/940, 157s)[======================================>] completed (937/940, 157s)[======================================>] completed (937/940, 157s)[======================================>] completed (937/940, 157s)[======================================>] completed (937/940, 157s)[======================================>] completed (937/940, 157s)[======================================>] completed (937/940, 157s)[======================================>] completed (937/940, 157s)[======================================>] completed (937/940, 157s)[======================================>] completed (937/940, 158s)[======================================>] completed (937/940, 158s)[======================================>] completed (937/940, 158s)[======================================>] completed (937/940, 158s)[======================================>] completed (937/940, 158s)[======================================>] completed (937/940, 158s)[======================================>] completed (937/940, 158s)[======================================>] completed (937/940, 158s)[======================================>] completed (937/940, 158s)[======================================>] completed (937/940, 158s)[======================================>] completed (937/940, 159s)[======================================>] completed (937/940, 159s)[======================================>] completed (937/940, 159s)[======================================>] completed (937/940, 159s)[======================================>] completed (937/940, 159s)[======================================>] completed (937/940, 159s)[======================================>] completed (937/940, 159s)[======================================>] completed (937/940, 159s)[======================================>] completed (937/940, 159s)[======================================>] completed (937/940, 159s)[======================================>] completed (937/940, 160s)[======================================>] completed (937/940, 160s)[======================================>] completed (937/940, 160s)[======================================>] completed (937/940, 160s)[======================================>] completed (937/940, 160s)[======================================>] completed (937/940, 160s)[======================================>] completed (937/940, 160s)[======================================>] completed (937/940, 160s)[======================================>] completed (937/940, 160s)[======================================>] completed (937/940, 160s)[======================================>] completed (937/940, 161s)[======================================>] completed (937/940, 161s)[======================================>] completed (937/940, 161s)[======================================>] completed (937/940, 161s)[======================================>] completed (937/940, 161s)[======================================>] completed (937/940, 161s)[======================================>] completed (937/940, 161s)[======================================>] completed (937/940, 161s)[======================================>] completed (937/940, 161s)[======================================>] completed (937/940, 161s)[======================================>] completed (937/940, 162s)[======================================>] completed (937/940, 162s)[======================================>] completed (937/940, 162s)[======================================>] completed (937/940, 162s)[======================================>] completed (937/940, 162s)[======================================>] completed (937/940, 162s)[======================================>] completed (937/940, 162s)[======================================>] completed (937/940, 162s)[======================================>] completed (937/940, 162s)[======================================>] completed (937/940, 162s)[======================================>] completed (937/940, 163s)[======================================>] completed (937/940, 163s)[======================================>] completed (937/940, 163s)[======================================>] completed (937/940, 163s)[======================================>] completed (937/940, 163s)[======================================>] completed (937/940, 163s)[======================================>] completed (937/940, 163s)[======================================>] completed (937/940, 163s)[======================================>] completed (937/940, 163s)[======================================>] completed (937/940, 163s)[======================================>] completed (937/940, 164s)[======================================>] completed (937/940, 164s)[======================================>] completed (937/940, 164s)[======================================>] completed (937/940, 164s)[======================================>] completed (937/940, 164s)[======================================>] completed (937/940, 164s)[======================================>] completed (937/940, 164s)[======================================>] completed (937/940, 164s)[======================================>] completed (937/940, 164s)[======================================>] completed (937/940, 164s)[======================================>] completed (937/940, 165s)[======================================>] completed (937/940, 165s)[======================================>] completed (937/940, 165s)[======================================>] completed (937/940, 165s)[======================================>] completed (937/940, 165s)[======================================>] completed (937/940, 165s)[======================================>] completed (937/940, 165s)[======================================>] completed (937/940, 165s)[======================================>] completed (937/940, 165s)[======================================>] completed (937/940, 165s)[======================================>] completed (937/940, 166s)[======================================>] completed (937/940, 166s)[======================================>] completed (937/940, 166s)[======================================>] completed (937/940, 166s)[======================================>] completed (937/940, 166s)[======================================>] completed (937/940, 166s)[======================================>] completed (937/940, 166s)[======================================>] completed (937/940, 166s)[======================================>] completed (937/940, 166s)[======================================>] completed (937/940, 166s)[======================================>] completed (937/940, 167s)[======================================>] completed (937/940, 167s)[======================================>] completed (937/940, 167s)[======================================>] completed (937/940, 167s)[======================================>] completed (937/940, 167s)[======================================>] completed (937/940, 167s)[======================================>] completed (937/940, 167s)[======================================>] completed (937/940, 167s)[======================================>] completed (937/940, 167s)[======================================>] completed (937/940, 167s)[======================================>] completed (937/940, 168s)[======================================>] completed (937/940, 168s)[======================================>] completed (937/940, 168s)[======================================>] completed (937/940, 168s)[======================================>] completed (937/940, 168s)[======================================>] completed (937/940, 168s)[======================================>] completed (937/940, 168s)[======================================>] completed (937/940, 168s)[======================================>] completed (937/940, 168s)[======================================>] completed (937/940, 168s)[======================================>] completed (937/940, 169s)[======================================>] completed (937/940, 169s)[======================================>] completed (937/940, 169s)[======================================>] completed (937/940, 169s)[======================================>] completed (937/940, 169s)[======================================>] completed (937/940, 169s)[======================================>] completed (937/940, 169s)[======================================>] completed (937/940, 169s)[======================================>] completed (937/940, 169s)[======================================>] completed (937/940, 170s)[======================================>] completed (937/940, 170s)[======================================>] completed (937/940, 170s)[======================================>] completed (937/940, 170s)[======================================>] completed (937/940, 170s)[======================================>] completed (937/940, 170s)[======================================>] completed (937/940, 170s)[======================================>] completed (937/940, 170s)[======================================>] completed (937/940, 170s)[======================================>] completed (937/940, 170s)[======================================>] completed (937/940, 171s)[======================================>] completed (937/940, 171s)[======================================>] completed (937/940, 171s)[======================================>] completed (937/940, 171s)[======================================>] completed (937/940, 171s)[======================================>] completed (937/940, 171s)[======================================>] completed (937/940, 171s)[======================================>] completed (937/940, 171s)[======================================>] completed (937/940, 171s)[======================================>] completed (937/940, 171s)[======================================>] completed (937/940, 172s)[======================================>] completed (937/940, 172s)[======================================>] completed (937/940, 172s)[======================================>] completed (937/940, 172s)[======================================>] completed (937/940, 172s)[======================================>] completed (937/940, 172s)[======================================>] completed (937/940, 172s)[======================================>] completed (937/940, 172s)[======================================>] completed (937/940, 172s)[======================================>] completed (937/940, 172s)[======================================>] completed (937/940, 173s)[======================================>] completed (937/940, 173s)[======================================>] completed (937/940, 173s)[======================================>] completed (937/940, 173s)[======================================>] completed (937/940, 173s)[======================================>] completed (937/940, 173s)[======================================>] completed (937/940, 173s)[======================================>] completed (937/940, 173s)[======================================>] completed (937/940, 173s)[======================================>] completed (937/940, 173s)[======================================>] completed (937/940, 174s)[======================================>] completed (937/940, 174s)[======================================>] completed (937/940, 174s)[======================================>] completed (937/940, 174s)[======================================>] completed (937/940, 174s)[======================================>] completed (937/940, 174s)[======================================>] completed (937/940, 174s)[======================================>] completed (937/940, 174s)[======================================>] completed (937/940, 174s)[======================================>] completed (937/940, 174s)[======================================>] completed (937/940, 175s)[======================================>] completed (937/940, 175s)[======================================>] completed (937/940, 175s)[======================================>] completed (937/940, 175s)[======================================>] completed (937/940, 175s)[======================================>] completed (937/940, 175s)[======================================>] completed (937/940, 175s)[======================================>] completed (937/940, 175s)[======================================>] completed (937/940, 175s)[======================================>] completed (937/940, 175s)[======================================>] completed (937/940, 176s)[======================================>] completed (937/940, 176s)[======================================>] completed (937/940, 176s)[======================================>] completed (937/940, 176s)[======================================>] completed (937/940, 176s)[======================================>] completed (937/940, 176s)[======================================>] completed (937/940, 176s)[======================================>] completed (937/940, 176s)[======================================>] completed (937/940, 176s)[======================================>] completed (937/940, 176s)[======================================>] completed (937/940, 177s)[======================================>] completed (937/940, 177s)[======================================>] completed (937/940, 177s)[======================================>] completed (937/940, 177s)[======================================>] completed (937/940, 177s)[======================================>] completed (937/940, 177s)[======================================>] completed (937/940, 177s)[======================================>] completed (937/940, 177s)[======================================>] completed (937/940, 177s)[======================================>] completed (937/940, 177s)[======================================>] completed (937/940, 178s)[======================================>] completed (937/940, 178s)[======================================>] completed (937/940, 178s)[======================================>] completed (937/940, 178s)[======================================>] completed (937/940, 178s)[======================================>] completed (937/940, 178s)[======================================>] completed (937/940, 178s)[======================================>] completed (937/940, 178s)[======================================>] completed (937/940, 178s)[======================================>] completed (937/940, 178s)[======================================>] completed (937/940, 179s)[======================================>] completed (937/940, 179s)[======================================>] completed (937/940, 179s)[======================================>] completed (937/940, 179s)[======================================>] completed (937/940, 179s)[======================================>] completed (937/940, 179s)[======================================>] completed (937/940, 179s)[======================================>] completed (937/940, 179s)[======================================>] completed (937/940, 179s)[======================================>] completed (937/940, 179s)[======================================>] completed (937/940, 180s)[======================================>] completed (937/940, 180s)[======================================>] completed (937/940, 180s)[======================================>] completed (937/940, 180s)[======================================>] completed (937/940, 180s)[======================================>] completed (937/940, 180s)[======================================>] completed (937/940, 180s)[======================================>] completed (937/940, 180s)[======================================>] completed (937/940, 180s)[======================================>] completed (937/940, 180s)[======================================>] completed (937/940, 181s)[======================================>] completed (937/940, 181s)[======================================>] completed (937/940, 181s)[======================================>] completed (937/940, 181s)[======================================>] completed (937/940, 181s)[======================================>] completed (937/940, 181s)[======================================>] completed (937/940, 181s)[======================================>] completed (937/940, 181s)[======================================>] completed (937/940, 181s)[======================================>] completed (937/940, 181s)[======================================>] completed (937/940, 182s)[======================================>] completed (937/940, 182s)[======================================>] completed (937/940, 182s)[======================================>] completed (937/940, 182s)[======================================>] completed (937/940, 182s)[======================================>] completed (937/940, 182s)[======================================>] completed (937/940, 182s)[======================================>] completed (937/940, 182s)[======================================>] completed (937/940, 182s)[======================================>] completed (937/940, 182s)[======================================>] completed (937/940, 183s)[======================================>] completed (937/940, 183s)[======================================>] completed (937/940, 183s)[======================================>] completed (937/940, 183s)[======================================>] completed (937/940, 183s)[======================================>] completed (937/940, 183s)[======================================>] completed (937/940, 183s)[======================================>] completed (937/940, 183s)[======================================>] completed (937/940, 183s)[======================================>] completed (937/940, 183s)[======================================>] completed (937/940, 184s)[======================================>] completed (937/940, 184s)[======================================>] completed (937/940, 184s)[======================================>] completed (937/940, 184s)[======================================>] completed (937/940, 184s)[======================================>] completed (937/940, 184s)[======================================>] completed (937/940, 184s)[======================================>] completed (937/940, 184s)[======================================>] completed (937/940, 184s)[======================================>] completed (937/940, 184s)[======================================>] completed (937/940, 185s)[======================================>] completed (937/940, 185s)[======================================>] completed (937/940, 185s)[======================================>] completed (937/940, 185s)[======================================>] completed (937/940, 185s)[======================================>] completed (937/940, 185s)[======================================>] completed (937/940, 185s)[======================================>] completed (937/940, 185s)[======================================>] completed (937/940, 185s)[======================================>] completed (937/940, 185s)[======================================>] completed (937/940, 186s)[======================================>] completed (937/940, 186s)[======================================>] completed (937/940, 186s)[======================================>] completed (937/940, 186s)[======================================>] completed (937/940, 186s)[======================================>] completed (937/940, 186s)[======================================>] completed (937/940, 186s)[======================================>] completed (937/940, 186s)[======================================>] completed (937/940, 186s)[======================================>] completed (937/940, 186s)[======================================>] completed (937/940, 187s)[======================================>] completed (937/940, 187s)[======================================>] completed (937/940, 187s)[======================================>] completed (937/940, 187s)[======================================>] completed (937/940, 187s)[======================================>] completed (937/940, 187s)[======================================>] completed (937/940, 187s)[======================================>] completed (937/940, 187s)[======================================>] completed (937/940, 187s)[======================================>] completed (937/940, 187s)[======================================>] completed (937/940, 188s)[======================================>] completed (937/940, 188s)[======================================>] completed (937/940, 188s)[======================================>] completed (937/940, 188s)[======================================>] completed (937/940, 188s)[======================================>] completed (937/940, 188s)[======================================>] completed (937/940, 188s)[======================================>] completed (937/940, 188s)[======================================>] completed (937/940, 188s)[======================================>] completed (937/940, 188s)[======================================>] completed (937/940, 189s)[======================================>] completed (937/940, 189s)[======================================>] completed (937/940, 189s)[======================================>] completed (937/940, 189s)[======================================>] completed (937/940, 189s)[======================================>] completed (937/940, 189s)[======================================>] completed (937/940, 189s)[======================================>] completed (937/940, 189s)[======================================>] completed (937/940, 189s)[======================================>] completed (937/940, 189s)[======================================>] completed (937/940, 190s)[======================================>] completed (937/940, 190s)[======================================>] completed (937/940, 190s)[======================================>] completed (937/940, 190s)[======================================>] completed (937/940, 190s)[======================================>] completed (937/940, 190s)[======================================>] completed (937/940, 190s)[======================================>] completed (937/940, 190s)[======================================>] completed (937/940, 190s)[======================================>] completed (937/940, 190s)[======================================>] completed (937/940, 191s)[======================================>] completed (937/940, 191s)[======================================>] completed (937/940, 191s)[======================================>] completed (937/940, 191s)[======================================>] completed (937/940, 191s)[======================================>] completed (937/940, 191s)[======================================>] completed (937/940, 191s)[======================================>] completed (937/940, 191s)[======================================>] completed (937/940, 191s)[======================================>] completed (937/940, 191s)[======================================>] completed (937/940, 192s)[======================================>] completed (937/940, 192s)[======================================>] completed (937/940, 192s)[======================================>] completed (937/940, 192s)[======================================>] completed (937/940, 192s)[======================================>] completed (937/940, 192s)[======================================>] completed (937/940, 192s)[======================================>] completed (937/940, 192s)[======================================>] completed (937/940, 192s)[======================================>] completed (937/940, 193s)[======================================>] completed (937/940, 193s)[======================================>] completed (937/940, 193s)[======================================>] completed (937/940, 193s)[======================================>] completed (937/940, 193s)[======================================>] completed (937/940, 193s)[======================================>] completed (937/940, 193s)[======================================>] completed (937/940, 193s)[======================================>] completed (937/940, 193s)[======================================>] completed (937/940, 193s)[======================================>] completed (937/940, 194s)[======================================>] completed (937/940, 194s)[======================================>] completed (937/940, 194s)[======================================>] completed (937/940, 194s)[======================================>] completed (937/940, 194s)[======================================>] completed (937/940, 194s)[======================================>] completed (937/940, 194s)[======================================>] completed (937/940, 194s)[======================================>] completed (937/940, 194s)[======================================>] completed (937/940, 194s)[======================================>] completed (937/940, 195s)[======================================>] completed (937/940, 195s)[======================================>] completed (937/940, 195s)[======================================>] completed (937/940, 195s)[======================================>] completed (937/940, 195s)[======================================>] completed (937/940, 195s)[======================================>] completed (937/940, 195s)[======================================>] completed (937/940, 195s)[======================================>] completed (937/940, 195s)[======================================>] completed (937/940, 195s)[======================================>] completed (937/940, 196s)[======================================>] completed (937/940, 196s)[======================================>] completed (937/940, 196s)[======================================>] completed (937/940, 196s)[======================================>] completed (937/940, 196s)[======================================>] completed (937/940, 196s)[======================================>] completed (937/940, 196s)[======================================>] completed (937/940, 196s)[======================================>] completed (937/940, 196s)[======================================>] completed (937/940, 196s)[======================================>] completed (937/940, 197s)[======================================>] completed (937/940, 197s)[======================================>] completed (937/940, 197s)[======================================>] completed (937/940, 197s)[======================================>] completed (937/940, 197s)[======================================>] completed (937/940, 197s)[======================================>] completed (937/940, 197s)[======================================>] completed (937/940, 197s)[======================================>] completed (937/940, 197s)[======================================>] completed (937/940, 197s)[======================================>] completed (937/940, 198s)[======================================>] completed (937/940, 198s)[======================================>] completed (937/940, 198s)[======================================>] completed (937/940, 198s)[======================================>] completed (937/940, 198s)[======================================>] completed (937/940, 198s)[======================================>] completed (937/940, 198s)[======================================>] completed (937/940, 198s)[======================================>] completed (937/940, 198s)[======================================>] completed (937/940, 198s)[======================================>] completed (937/940, 199s)[======================================>] completed (937/940, 199s)[======================================>] completed (937/940, 199s)[======================================>] completed (937/940, 199s)[======================================>] completed (937/940, 199s)[======================================>] completed (937/940, 199s)[======================================>] completed (937/940, 199s)[======================================>] completed (937/940, 199s)[======================================>] completed (937/940, 199s)[======================================>] completed (937/940, 199s)[======================================>] completed (937/940, 200s)[======================================>] completed (937/940, 200s)[======================================>] completed (937/940, 200s)[======================================>] completed (937/940, 200s)[======================================>] completed (937/940, 200s)[======================================>] completed (937/940, 200s)[======================================>] completed (937/940, 200s)[======================================>] completed (937/940, 200s)[======================================>] completed (937/940, 200s)[======================================>] completed (937/940, 200s)[======================================>] completed (937/940, 201s)[======================================>] completed (937/940, 201s)[======================================>] completed (937/940, 201s)[======================================>] completed (937/940, 201s)[======================================>] completed (937/940, 201s)[======================================>] completed (937/940, 201s)[======================================>] completed (937/940, 201s)[======================================>] completed (937/940, 201s)[======================================>] completed (937/940, 201s)[======================================>] completed (937/940, 201s)[======================================>] completed (937/940, 202s)[======================================>] completed (937/940, 202s)[======================================>] completed (937/940, 202s)[======================================>] completed (937/940, 202s)[======================================>] completed (937/940, 202s)[======================================>] completed (937/940, 202s)[======================================>] completed (937/940, 202s)[======================================>] completed (937/940, 202s)[======================================>] completed (937/940, 202s)[======================================>] completed (937/940, 202s)[======================================>] completed (937/940, 203s)[======================================>] completed (937/940, 203s)[======================================>] completed (937/940, 203s)[======================================>] completed (937/940, 203s)[======================================>] completed (937/940, 203s)[======================================>] completed (937/940, 203s)[======================================>] completed (937/940, 203s)[======================================>] completed (937/940, 203s)[======================================>] completed (937/940, 203s)[======================================>] completed (937/940, 203s)[======================================>] completed (937/940, 204s)[======================================>] completed (937/940, 204s)[======================================>] completed (937/940, 204s)[======================================>] completed (937/940, 204s)[======================================>] completed (937/940, 204s)[======================================>] completed (937/940, 204s)[======================================>] completed (937/940, 204s)[======================================>] completed (937/940, 204s)[======================================>] completed (937/940, 204s)[======================================>] completed (937/940, 204s)[======================================>] completed (937/940, 205s)[======================================>] completed (937/940, 205s)[======================================>] completed (937/940, 205s)[======================================>] completed (937/940, 205s)[======================================>] completed (937/940, 205s)[======================================>] completed (937/940, 205s)[======================================>] completed (937/940, 205s)[======================================>] completed (937/940, 205s)[======================================>] completed (937/940, 205s)[======================================>] completed (937/940, 205s)[======================================>] completed (937/940, 206s)[======================================>] completed (937/940, 206s)[======================================>] completed (937/940, 206s)[======================================>] completed (937/940, 206s)[======================================>] completed (937/940, 206s)[======================================>] completed (937/940, 206s)[======================================>] completed (937/940, 206s)[======================================>] completed (937/940, 206s)[======================================>] completed (937/940, 206s)[======================================>] completed (937/940, 206s)[======================================>] completed (937/940, 207s)[======================================>] completed (937/940, 207s)[======================================>] completed (937/940, 207s)[======================================>] completed (937/940, 207s)[======================================>] completed (937/940, 207s)[======================================>] completed (937/940, 207s)[======================================>] completed (937/940, 207s)[======================================>] completed (937/940, 207s)[======================================>] completed (937/940, 207s)[======================================>] completed (937/940, 207s)[======================================>] completed (937/940, 208s)[======================================>] completed (937/940, 208s)[======================================>] completed (937/940, 208s)[======================================>] completed (937/940, 208s)[======================================>] completed (937/940, 208s)[======================================>] completed (937/940, 208s)[======================================>] completed (937/940, 208s)[======================================>] completed (937/940, 208s)[======================================>] completed (937/940, 208s)[======================================>] completed (937/940, 208s)[======================================>] completed (937/940, 209s)[======================================>] completed (937/940, 209s)[======================================>] completed (937/940, 209s)[======================================>] completed (937/940, 209s)[======================================>] completed (937/940, 209s)[======================================>] completed (937/940, 209s)[======================================>] completed (937/940, 209s)[======================================>] completed (937/940, 209s)[======================================>] completed (937/940, 209s)[======================================>] completed (937/940, 209s)[======================================>] completed (937/940, 210s)[======================================>] completed (937/940, 210s)[======================================>] completed (937/940, 210s)[======================================>] completed (937/940, 210s)[======================================>] completed (937/940, 210s)[======================================>] completed (937/940, 210s)[======================================>] completed (937/940, 210s)[======================================>] completed (937/940, 210s)[======================================>] completed (937/940, 210s)[======================================>] completed (937/940, 210s)[======================================>] completed (937/940, 211s)[======================================>] completed (937/940, 211s)[======================================>] completed (937/940, 211s)[======================================>] completed (937/940, 211s)[======================================>] completed (937/940, 211s)[======================================>] completed (937/940, 211s)[======================================>] completed (937/940, 211s)[======================================>] completed (937/940, 211s)[======================================>] completed (937/940, 211s)[======================================>] completed (937/940, 211s)[======================================>] completed (937/940, 212s)[======================================>] completed (937/940, 212s)[======================================>] completed (937/940, 212s)[======================================>] completed (937/940, 212s)[======================================>] completed (937/940, 212s)[======================================>] completed (937/940, 212s)[======================================>] completed (937/940, 212s)[======================================>] completed (937/940, 212s)[======================================>] completed (937/940, 212s)[======================================>] completed (937/940, 212s)[======================================>] completed (937/940, 213s)[======================================>] completed (937/940, 213s)[======================================>] completed (937/940, 213s)[======================================>] completed (937/940, 213s)[======================================>] completed (937/940, 213s)[======================================>] completed (937/940, 213s)[======================================>] completed (937/940, 213s)[======================================>] completed (937/940, 213s)[======================================>] completed (937/940, 213s)[======================================>] completed (937/940, 213s)[======================================>] completed (937/940, 214s)[======================================>] completed (937/940, 214s)[======================================>] completed (937/940, 214s)[======================================>] completed (937/940, 214s)[======================================>] completed (937/940, 214s)[======================================>] completed (937/940, 214s)[======================================>] completed (937/940, 214s)[======================================>] completed (937/940, 214s)[======================================>] completed (937/940, 214s)[======================================>] completed (937/940, 215s)[======================================>] completed (937/940, 215s)[======================================>] completed (937/940, 215s)[======================================>] completed (937/940, 215s)[======================================>] completed (937/940, 215s)[======================================>] completed (937/940, 215s)[======================================>] completed (937/940, 215s)[======================================>] completed (937/940, 215s)[======================================>] completed (937/940, 215s)[======================================>] completed (937/940, 215s)[======================================>] completed (937/940, 216s)[======================================>] completed (937/940, 216s)[======================================>] completed (937/940, 216s)[======================================>] completed (937/940, 216s)[======================================>] completed (937/940, 216s)[======================================>] completed (937/940, 216s)[======================================>] completed (937/940, 216s)[======================================>] completed (937/940, 216s)[======================================>] completed (937/940, 216s)[======================================>] completed (937/940, 216s)[======================================>] completed (937/940, 217s)[======================================>] completed (937/940, 217s)[======================================>] completed (937/940, 217s)[======================================>] completed (937/940, 217s)[======================================>] completed (937/940, 217s)[======================================>] completed (937/940, 217s)[======================================>] completed (937/940, 217s)[======================================>] completed (937/940, 217s)[======================================>] completed (937/940, 217s)[======================================>] completed (937/940, 217s)[======================================>] completed (937/940, 218s)[======================================>] completed (937/940, 218s)[======================================>] completed (937/940, 218s)[======================================>] completed (937/940, 218s)[======================================>] completed (937/940, 218s)[======================================>] completed (937/940, 218s)[======================================>] completed (937/940, 218s)[======================================>] completed (937/940, 218s)[======================================>] completed (937/940, 218s)[======================================>] completed (937/940, 218s)[======================================>] completed (937/940, 219s)[======================================>] completed (937/940, 219s)[======================================>] completed (937/940, 219s)[======================================>] completed (937/940, 219s)[======================================>] completed (937/940, 219s)[======================================>] completed (937/940, 219s)[======================================>] completed (937/940, 219s)[======================================>] completed (937/940, 219s)[======================================>] completed (937/940, 219s)[======================================>] completed (937/940, 219s)[======================================>] completed (937/940, 220s)[======================================>] completed (937/940, 220s)[======================================>] completed (937/940, 220s)[======================================>] completed (937/940, 220s)[======================================>] completed (937/940, 220s)[======================================>] completed (937/940, 220s)[======================================>] completed (937/940, 220s)[======================================>] completed (937/940, 220s)[======================================>] completed (937/940, 220s)[======================================>] completed (937/940, 220s)[======================================>] completed (937/940, 221s)[======================================>] completed (937/940, 221s)[======================================>] completed (937/940, 221s)[======================================>] completed (937/940, 221s)[======================================>] completed (937/940, 221s)[======================================>] completed (937/940, 221s)[======================================>] completed (937/940, 221s)[======================================>] completed (937/940, 221s)[======================================>] completed (937/940, 221s)[======================================>] completed (937/940, 221s)[======================================>] completed (937/940, 222s)[======================================>] completed (937/940, 222s)[======================================>] completed (937/940, 222s)[======================================>] completed (937/940, 222s)[======================================>] completed (937/940, 222s)[======================================>] completed (937/940, 222s)[======================================>] completed (937/940, 222s)[======================================>] completed (937/940, 222s)[======================================>] completed (937/940, 222s)[======================================>] completed (937/940, 222s)[======================================>] completed (937/940, 223s)[======================================>] completed (937/940, 223s)[======================================>] completed (937/940, 223s)[======================================>] completed (937/940, 223s)[======================================>] completed (937/940, 223s)[======================================>] completed (937/940, 223s)[======================================>] completed (937/940, 223s)[======================================>] completed (937/940, 223s)[======================================>] completed (937/940, 223s)[======================================>] completed (937/940, 223s)[======================================>] completed (937/940, 224s)[======================================>] completed (937/940, 224s)[======================================>] completed (937/940, 224s)[======================================>] completed (937/940, 224s)[======================================>] completed (937/940, 224s)[======================================>] completed (937/940, 224s)[======================================>] completed (937/940, 224s)[======================================>] completed (937/940, 224s)[======================================>] completed (937/940, 224s)[======================================>] completed (937/940, 224s)[======================================>] completed (937/940, 225s)[======================================>] completed (937/940, 225s)[======================================>] completed (937/940, 225s)[======================================>] completed (937/940, 225s)[======================================>] completed (937/940, 225s)[======================================>] completed (937/940, 225s)[======================================>] completed (937/940, 225s)[======================================>] completed (937/940, 225s)[======================================>] completed (937/940, 225s)[======================================>] completed (937/940, 225s)[======================================>] completed (937/940, 226s)[======================================>] completed (937/940, 226s)[======================================>] completed (937/940, 226s)[======================================>] completed (937/940, 226s)[======================================>] completed (937/940, 226s)[======================================>] completed (937/940, 226s)[======================================>] completed (937/940, 226s)[======================================>] completed (937/940, 226s)[======================================>] completed (937/940, 226s)[======================================>] completed (937/940, 226s)[======================================>] completed (937/940, 227s)[======================================>] completed (937/940, 227s)[======================================>] completed (937/940, 227s)[======================================>] completed (937/940, 227s)[======================================>] completed (937/940, 227s)[======================================>] completed (937/940, 227s)[======================================>] completed (937/940, 227s)[======================================>] completed (937/940, 227s)[======================================>] completed (937/940, 227s)[======================================>] completed (937/940, 227s)[======================================>] completed (937/940, 228s)[======================================>] completed (937/940, 228s)[======================================>] completed (937/940, 228s)[======================================>] completed (937/940, 228s)[======================================>] completed (937/940, 228s)[======================================>] completed (937/940, 228s)[======================================>] completed (937/940, 228s)[======================================>] completed (937/940, 228s)[======================================>] completed (937/940, 228s)[======================================>] completed (937/940, 228s)[======================================>] completed (937/940, 229s)[======================================>] completed (937/940, 229s)[======================================>] completed (937/940, 229s)[======================================>] completed (937/940, 229s)[======================================>] completed (937/940, 229s)[======================================>] completed (937/940, 229s)[======================================>] completed (937/940, 229s)[======================================>] completed (937/940, 229s)[======================================>] completed (937/940, 229s)[======================================>] completed (937/940, 229s)[======================================>] completed (937/940, 230s)[======================================>] completed (937/940, 230s)[======================================>] completed (937/940, 230s)[======================================>] completed (937/940, 230s)[======================================>] completed (937/940, 230s)[======================================>] completed (937/940, 230s)[======================================>] completed (937/940, 230s)[======================================>] completed (937/940, 230s)[======================================>] completed (937/940, 230s)[======================================>] completed (937/940, 230s)[======================================>] completed (937/940, 231s)[======================================>] completed (937/940, 231s)[======================================>] completed (937/940, 231s)[======================================>] completed (937/940, 231s)[======================================>] completed (937/940, 231s)[======================================>] completed (937/940, 231s)[======================================>] completed (937/940, 231s)[======================================>] completed (937/940, 231s)[======================================>] completed (937/940, 231s)[======================================>] completed (937/940, 231s)[======================================>] completed (937/940, 232s)[======================================>] completed (937/940, 232s)[======================================>] completed (937/940, 232s)[======================================>] completed (937/940, 232s)[======================================>] completed (937/940, 232s)[======================================>] completed (937/940, 232s)[======================================>] completed (937/940, 232s)[======================================>] completed (937/940, 232s)[======================================>] completed (937/940, 232s)[======================================>] completed (937/940, 232s)[======================================>] completed (937/940, 233s)[======================================>] completed (937/940, 233s)[======================================>] completed (937/940, 233s)[======================================>] completed (937/940, 233s)[======================================>] completed (937/940, 233s)[======================================>] completed (937/940, 233s)[======================================>] completed (937/940, 233s)[======================================>] completed (937/940, 233s)[======================================>] completed (937/940, 233s)[======================================>] completed (937/940, 233s)[======================================>] completed (937/940, 234s)[======================================>] completed (937/940, 234s)[======================================>] completed (937/940, 234s)[======================================>] completed (937/940, 234s)[======================================>] completed (937/940, 234s)[======================================>] completed (937/940, 234s)[======================================>] completed (937/940, 234s)[======================================>] completed (937/940, 234s)[======================================>] completed (937/940, 234s)[======================================>] completed (937/940, 234s)[======================================>] completed (937/940, 235s)[======================================>] completed (937/940, 235s)[======================================>] completed (937/940, 235s)[======================================>] completed (937/940, 235s)[======================================>] completed (937/940, 235s)[======================================>] completed (937/940, 235s)[======================================>] completed (937/940, 235s)[======================================>] completed (937/940, 235s)[======================================>] completed (937/940, 235s)[======================================>] completed (937/940, 235s)[======================================>] completed (937/940, 236s)[======================================>] completed (937/940, 236s)[======================================>] completed (937/940, 236s)[======================================>] completed (937/940, 236s)[======================================>] completed (937/940, 236s)[======================================>] completed (937/940, 236s)[======================================>] completed (937/940, 236s)[======================================>] completed (937/940, 236s)[======================================>] completed (937/940, 236s)[======================================>] completed (937/940, 237s)[======================================>] completed (937/940, 237s)[======================================>] completed (937/940, 237s)[======================================>] completed (937/940, 237s)[======================================>] completed (937/940, 237s)[======================================>] completed (937/940, 237s)[======================================>] completed (937/940, 237s)[======================================>] completed (937/940, 237s)[======================================>] completed (937/940, 237s)[======================================>] completed (937/940, 237s)[======================================>] completed (937/940, 238s)[======================================>] completed (937/940, 238s)[======================================>] completed (937/940, 238s)[======================================>] completed (937/940, 238s)[======================================>] completed (937/940, 238s)[======================================>] completed (937/940, 238s)[======================================>] completed (937/940, 238s)[======================================>] completed (937/940, 238s)[======================================>] completed (937/940, 238s)[======================================>] completed (937/940, 238s)[======================================>] completed (937/940, 239s)[======================================>] completed (937/940, 239s)[======================================>] completed (937/940, 239s)[======================================>] completed (937/940, 239s)[======================================>] completed (937/940, 239s)[======================================>] completed (937/940, 239s)[======================================>] completed (937/940, 239s)[======================================>] completed (937/940, 239s)[======================================>] completed (937/940, 239s)[======================================>] completed (937/940, 239s)[======================================>] completed (937/940, 240s)[======================================>] completed (937/940, 240s)[======================================>] completed (937/940, 240s)[======================================>] completed (937/940, 240s)[======================================>] completed (937/940, 240s)[======================================>] completed (937/940, 240s)[======================================>] completed (937/940, 240s)[======================================>] completed (937/940, 240s)[======================================>] completed (937/940, 240s)[======================================>] completed (937/940, 240s)[======================================>] completed (937/940, 241s)[======================================>] completed (937/940, 241s)[======================================>] completed (937/940, 241s)[======================================>] completed (937/940, 241s)[======================================>] completed (937/940, 241s)[======================================>] completed (937/940, 241s)[======================================>] completed (937/940, 241s)[======================================>] completed (937/940, 241s)[======================================>] completed (937/940, 241s)[======================================>] completed (937/940, 241s)[======================================>] completed (937/940, 242s)[======================================>] completed (937/940, 242s)[======================================>] completed (937/940, 242s)[======================================>] completed (937/940, 242s)[======================================>] completed (937/940, 242s)[======================================>] completed (937/940, 242s)[======================================>] completed (937/940, 242s)[======================================>] completed (937/940, 242s)[======================================>] completed (937/940, 242s)[======================================>] completed (937/940, 242s)[======================================>] completed (937/940, 243s)[======================================>] completed (937/940, 243s)[======================================>] completed (937/940, 243s)[======================================>] completed (937/940, 243s)[======================================>] completed (937/940, 243s)[======================================>] completed (937/940, 243s)[======================================>] completed (937/940, 243s)[======================================>] completed (937/940, 243s)[======================================>] completed (937/940, 243s)[======================================>] completed (937/940, 243s)[======================================>] completed (937/940, 244s)[======================================>] completed (937/940, 244s)[======================================>] completed (937/940, 244s)[======================================>] completed (937/940, 244s)[======================================>] completed (937/940, 244s)[======================================>] completed (937/940, 244s)[======================================>] completed (937/940, 244s)[======================================>] completed (937/940, 244s)[======================================>] completed (937/940, 244s)[======================================>] completed (937/940, 244s)[======================================>] completed (937/940, 245s)[======================================>] completed (937/940, 245s)[======================================>] completed (937/940, 245s)[======================================>] completed (937/940, 245s)[======================================>] completed (937/940, 245s)[======================================>] completed (937/940, 245s)[======================================>] completed (937/940, 245s)[======================================>] completed (937/940, 245s)[======================================>] completed (937/940, 245s)[======================================>] completed (937/940, 245s)[======================================>] completed (937/940, 246s)[======================================>] completed (937/940, 246s)[======================================>] completed (937/940, 246s)[======================================>] completed (937/940, 246s)[======================================>] completed (937/940, 246s)[======================================>] completed (937/940, 246s)[======================================>] completed (937/940, 246s)[======================================>] completed (937/940, 246s)[======================================>] completed (937/940, 246s)[======================================>] completed (937/940, 246s)[======================================>] completed (937/940, 247s)[======================================>] completed (937/940, 247s)[======================================>] completed (937/940, 247s)[======================================>] completed (937/940, 247s)[======================================>] completed (937/940, 247s)[======================================>] completed (937/940, 247s)[======================================>] completed (937/940, 247s)[======================================>] completed (937/940, 247s)[======================================>] completed (937/940, 247s)[======================================>] completed (937/940, 247s)[======================================>] completed (937/940, 248s)[======================================>] completed (937/940, 248s)[======================================>] completed (937/940, 248s)[======================================>] completed (937/940, 248s)[======================================>] completed (937/940, 248s)[======================================>] completed (937/940, 248s)[======================================>] completed (937/940, 248s)[======================================>] completed (937/940, 248s)[======================================>] completed (937/940, 248s)[======================================>] completed (937/940, 248s)[======================================>] completed (937/940, 249s)[======================================>] completed (937/940, 249s)[======================================>] completed (937/940, 249s)[======================================>] completed (937/940, 249s)[======================================>] completed (937/940, 249s)[======================================>] completed (937/940, 249s)[======================================>] completed (937/940, 249s)[======================================>] completed (937/940, 249s)[======================================>] completed (937/940, 249s)[======================================>] completed (937/940, 249s)[======================================>] completed (937/940, 250s)[======================================>] completed (937/940, 250s)[======================================>] completed (937/940, 250s)[======================================>] completed (937/940, 250s)[======================================>] completed (937/940, 250s)[======================================>] completed (937/940, 250s)[======================================>] completed (937/940, 250s)[======================================>] completed (937/940, 250s)[======================================>] completed (937/940, 250s)[======================================>] completed (937/940, 250s)[======================================>] completed (937/940, 251s)[======================================>] completed (937/940, 251s)[======================================>] completed (937/940, 251s)[======================================>] completed (937/940, 251s)[======================================>] completed (937/940, 251s)[======================================>] completed (937/940, 251s)[======================================>] completed (937/940, 251s)[======================================>] completed (937/940, 251s)[======================================>] completed (937/940, 251s)[======================================>] completed (937/940, 251s)[======================================>] completed (937/940, 252s)[======================================>] completed (937/940, 252s)[======================================>] completed (937/940, 252s)[======================================>] completed (937/940, 252s)[======================================>] completed (937/940, 252s)[======================================>] completed (937/940, 252s)[======================================>] completed (937/940, 252s)[======================================>] completed (937/940, 252s)[======================================>] completed (937/940, 252s)[======================================>] completed (937/940, 252s)[======================================>] completed (937/940, 253s)[======================================>] completed (937/940, 253s)[======================================>] completed (937/940, 253s)[======================================>] completed (937/940, 253s)[======================================>] completed (937/940, 253s)[======================================>] completed (937/940, 253s)[======================================>] completed (937/940, 253s)[======================================>] completed (937/940, 253s)[======================================>] completed (937/940, 253s)[======================================>] completed (937/940, 253s)[======================================>] completed (937/940, 254s)[======================================>] completed (937/940, 254s)[======================================>] completed (937/940, 254s)[======================================>] completed (937/940, 254s)[======================================>] completed (937/940, 254s)[======================================>] completed (937/940, 254s)[======================================>] completed (937/940, 254s)[======================================>] completed (937/940, 254s)[======================================>] completed (937/940, 254s)[======================================>] completed (937/940, 254s)[======================================>] completed (937/940, 255s)[======================================>] completed (937/940, 255s)[======================================>] completed (937/940, 255s)[======================================>] completed (937/940, 255s)[======================================>] completed (937/940, 255s)[======================================>] completed (937/940, 255s)[======================================>] completed (937/940, 255s)[======================================>] completed (937/940, 255s)[======================================>] completed (937/940, 255s)[======================================>] completed (937/940, 255s)[======================================>] completed (937/940, 256s)[======================================>] completed (937/940, 256s)[======================================>] completed (937/940, 256s)[======================================>] completed (937/940, 256s)[======================================>] completed (937/940, 256s)[======================================>] completed (937/940, 256s)[======================================>] completed (937/940, 256s)[======================================>] completed (937/940, 256s)[======================================>] completed (937/940, 256s)[======================================>] completed (937/940, 256s)[======================================>] completed (937/940, 257s)[======================================>] completed (937/940, 257s)[======================================>] completed (937/940, 257s)[======================================>] completed (937/940, 257s)[======================================>] completed (937/940, 257s)[======================================>] completed (937/940, 257s)[======================================>] completed (937/940, 257s)[======================================>] completed (937/940, 257s)[======================================>] completed (937/940, 257s)[======================================>] completed (937/940, 258s)[======================================>] completed (937/940, 258s)[======================================>] completed (937/940, 258s)[======================================>] completed (937/940, 258s)[======================================>] completed (937/940, 258s)[======================================>] completed (937/940, 258s)[======================================>] completed (937/940, 258s)[======================================>] completed (937/940, 258s)[======================================>] completed (937/940, 258s)[======================================>] completed (937/940, 258s)[======================================>] completed (937/940, 259s)[======================================>] completed (937/940, 259s)[======================================>] completed (937/940, 259s)[======================================>] completed (937/940, 259s)[======================================>] completed (937/940, 259s)[======================================>] completed (937/940, 259s)[======================================>] completed (937/940, 259s)[======================================>] completed (937/940, 259s)[======================================>] completed (937/940, 259s)[======================================>] completed (937/940, 259s)[======================================>] completed (937/940, 260s)[======================================>] completed (937/940, 260s)[======================================>] completed (937/940, 260s)[======================================>] completed (937/940, 260s)[======================================>] completed (937/940, 260s)[======================================>] completed (937/940, 260s)[======================================>] completed (937/940, 260s)[======================================>] completed (937/940, 260s)[======================================>] completed (937/940, 260s)[======================================>] completed (937/940, 260s)[======================================>] completed (937/940, 261s)[======================================>] completed (937/940, 261s)[======================================>] completed (937/940, 261s)[======================================>] completed (937/940, 261s)[======================================>] completed (937/940, 261s)[======================================>] completed (937/940, 261s)[======================================>] completed (937/940, 261s)[======================================>] completed (937/940, 261s)[======================================>] completed (937/940, 261s)[======================================>] completed (937/940, 261s)[======================================>] completed (937/940, 262s)[======================================>] completed (937/940, 262s)[======================================>] completed (937/940, 262s)[======================================>] completed (937/940, 262s)[======================================>] completed (937/940, 262s)[======================================>] completed (937/940, 262s)[======================================>] completed (937/940, 262s)[======================================>] completed (937/940, 262s)[======================================>] completed (937/940, 262s)[======================================>] completed (937/940, 262s)[======================================>] completed (937/940, 263s)[======================================>] completed (937/940, 263s)[======================================>] completed (937/940, 263s)[======================================>] completed (937/940, 263s)[======================================>] completed (937/940, 263s)[======================================>] completed (937/940, 263s)[======================================>] completed (937/940, 263s)[======================================>] completed (937/940, 263s)[======================================>] completed (937/940, 263s)[======================================>] completed (937/940, 263s)[======================================>] completed (937/940, 264s)[======================================>] completed (937/940, 264s)[======================================>] completed (937/940, 264s)[======================================>] completed (937/940, 264s)[======================================>] completed (937/940, 264s)[======================================>] completed (937/940, 264s)[======================================>] completed (937/940, 264s)[======================================>] completed (937/940, 264s)[======================================>] completed (937/940, 264s)[======================================>] completed (937/940, 264s)[======================================>] completed (937/940, 265s)[======================================>] completed (937/940, 265s)[======================================>] completed (937/940, 265s)[======================================>] completed (937/940, 265s)[======================================>] completed (937/940, 265s)[======================================>] completed (937/940, 265s)[======================================>] completed (937/940, 265s)[======================================>] completed (937/940, 265s)[======================================>] completed (937/940, 265s)[======================================>] completed (937/940, 265s)[======================================>] completed (937/940, 266s)[======================================>] completed (937/940, 266s)[======================================>] completed (937/940, 266s)[======================================>] completed (937/940, 266s)[======================================>] completed (937/940, 266s)[======================================>] completed (937/940, 266s)[======================================>] completed (937/940, 266s)[======================================>] completed (937/940, 266s)[======================================>] completed (937/940, 266s)[======================================>] completed (937/940, 266s)[======================================>] completed (937/940, 267s)[======================================>] completed (937/940, 267s)[======================================>] completed (937/940, 267s)[======================================>] completed (937/940, 267s)[======================================>] completed (937/940, 267s)[======================================>] completed (937/940, 267s)[======================================>] completed (937/940, 267s)[======================================>] completed (937/940, 267s)[======================================>] completed (937/940, 267s)[======================================>] completed (937/940, 267s)[======================================>] completed (937/940, 268s)[======================================>] completed (937/940, 268s)[======================================>] completed (937/940, 268s)[======================================>] completed (937/940, 268s)[======================================>] completed (937/940, 268s)[======================================>] completed (937/940, 268s)[======================================>] completed (937/940, 268s)[======================================>] completed (937/940, 268s)[======================================>] completed (937/940, 268s)[======================================>] completed (937/940, 268s)[======================================>] completed (937/940, 269s)[======================================>] completed (937/940, 269s)[======================================>] completed (937/940, 269s)[======================================>] completed (937/940, 269s)[======================================>] completed (937/940, 269s)[======================================>] completed (937/940, 269s)[======================================>] completed (937/940, 269s)[======================================>] completed (937/940, 269s)[======================================>] completed (937/940, 269s)[======================================>] completed (937/940, 269s)[======================================>] completed (937/940, 270s)[======================================>] completed (937/940, 270s)[======================================>] completed (937/940, 270s)[======================================>] completed (937/940, 270s)[======================================>] completed (937/940, 270s)[======================================>] completed (937/940, 270s)[======================================>] completed (937/940, 270s)[======================================>] completed (937/940, 270s)[======================================>] completed (937/940, 270s)[======================================>] completed (937/940, 270s)[======================================>] completed (937/940, 271s)[======================================>] completed (937/940, 271s)[======================================>] completed (937/940, 271s)[======================================>] completed (937/940, 271s)[======================================>] completed (937/940, 271s)[======================================>] completed (937/940, 271s)[======================================>] completed (937/940, 271s)[======================================>] completed (937/940, 271s)[======================================>] completed (937/940, 271s)[======================================>] completed (937/940, 271s)[======================================>] completed (937/940, 272s)[======================================>] completed (937/940, 272s)[======================================>] completed (937/940, 272s)[======================================>] completed (937/940, 272s)[======================================>] completed (937/940, 272s)[======================================>] completed (937/940, 272s)[======================================>] completed (937/940, 272s)[======================================>] completed (937/940, 272s)[======================================>] completed (937/940, 272s)[======================================>] completed (937/940, 272s)[======================================>] completed (937/940, 273s)[======================================>] completed (937/940, 273s)[======================================>] completed (937/940, 273s)[======================================>] completed (937/940, 273s)[======================================>] completed (937/940, 273s)[======================================>] completed (937/940, 273s)[======================================>] completed (937/940, 273s)[======================================>] completed (937/940, 273s)[======================================>] completed (937/940, 273s)[======================================>] completed (937/940, 273s)[======================================>] completed (937/940, 274s)[======================================>] completed (937/940, 274s)[======================================>] completed (937/940, 274s)[======================================>] completed (937/940, 274s)[======================================>] completed (937/940, 274s)[======================================>] completed (937/940, 274s)[======================================>] completed (937/940, 274s)[======================================>] completed (937/940, 274s)[======================================>] completed (937/940, 274s)[======================================>] completed (937/940, 274s)[======================================>] completed (937/940, 275s)[======================================>] completed (937/940, 275s)[======================================>] completed (937/940, 275s)[======================================>] completed (937/940, 275s)[======================================>] completed (937/940, 275s)[======================================>] completed (937/940, 275s)[======================================>] completed (937/940, 275s)[======================================>] completed (937/940, 275s)[======================================>] completed (937/940, 275s)[======================================>] completed (937/940, 275s)[======================================>] completed (937/940, 276s)[======================================>] completed (937/940, 276s)[======================================>] completed (937/940, 276s)[======================================>] completed (937/940, 276s)[======================================>] completed (937/940, 276s)[======================================>] completed (937/940, 276s)[======================================>] completed (937/940, 276s)[======================================>] completed (937/940, 276s)[======================================>] completed (937/940, 276s)[======================================>] completed (937/940, 276s)[======================================>] completed (937/940, 277s)[======================================>] completed (937/940, 277s)[======================================>] completed (937/940, 277s)[======================================>] completed (937/940, 277s)[======================================>] completed (937/940, 277s)[======================================>] completed (937/940, 277s)[======================================>] completed (937/940, 277s)[======================================>] completed (937/940, 277s)[======================================>] completed (937/940, 277s)[======================================>] completed (937/940, 277s)[======================================>] completed (937/940, 278s)[======================================>] completed (937/940, 278s)[======================================>] completed (937/940, 278s)[======================================>] completed (937/940, 278s)[======================================>] completed (937/940, 278s)[======================================>] completed (937/940, 278s)[======================================>] completed (937/940, 278s)[======================================>] completed (937/940, 278s)[======================================>] completed (937/940, 278s)[======================================>] completed (937/940, 278s)[======================================>] completed (937/940, 279s)[======================================>] completed (937/940, 279s)[======================================>] completed (937/940, 279s)[======================================>] completed (937/940, 279s)[======================================>] completed (937/940, 279s)[======================================>] completed (937/940, 279s)[======================================>] completed (937/940, 279s)[======================================>] completed (937/940, 279s)[======================================>] completed (937/940, 279s)[======================================>] completed (937/940, 280s)[======================================>] completed (937/940, 280s)[======================================>] completed (937/940, 280s)[======================================>] completed (937/940, 280s)[======================================>] completed (937/940, 280s)[======================================>] completed (937/940, 280s)[======================================>] completed (937/940, 280s)[======================================>] completed (937/940, 280s)[======================================>] completed (937/940, 280s)[======================================>] completed (937/940, 280s)[======================================>] completed (937/940, 281s)[======================================>] completed (937/940, 281s)[======================================>] completed (937/940, 281s)[======================================>] completed (937/940, 281s)[======================================>] completed (937/940, 281s)[======================================>] completed (937/940, 281s)[======================================>] completed (937/940, 281s)[======================================>] completed (937/940, 281s)[======================================>] completed (937/940, 281s)[======================================>] completed (937/940, 281s)[======================================>] completed (937/940, 282s)[======================================>] completed (937/940, 282s)[======================================>] completed (937/940, 282s)[======================================>] completed (937/940, 282s)[======================================>] completed (937/940, 282s)[======================================>] completed (937/940, 282s)[======================================>] completed (937/940, 282s)[======================================>] completed (937/940, 282s)[======================================>] completed (937/940, 282s)[======================================>] completed (937/940, 282s)[======================================>] completed (937/940, 283s)[======================================>] completed (937/940, 283s)[======================================>] completed (937/940, 283s)[======================================>] completed (937/940, 283s)[======================================>] completed (937/940, 283s)[======================================>] completed (937/940, 283s)[======================================>] completed (937/940, 283s)[======================================>] completed (937/940, 283s)[======================================>] completed (937/940, 283s)[======================================>] completed (937/940, 283s)[======================================>] completed (937/940, 284s)[======================================>] completed (937/940, 284s)[======================================>] completed (937/940, 284s)[======================================>] completed (937/940, 284s)[======================================>] completed (937/940, 284s)[======================================>] completed (937/940, 284s)[======================================>] completed (937/940, 284s)[======================================>] completed (937/940, 284s)[======================================>] completed (937/940, 284s)[======================================>] completed (937/940, 284s)[======================================>] completed (937/940, 285s)[======================================>] completed (937/940, 285s)[======================================>] completed (937/940, 285s)[======================================>] completed (937/940, 285s)[======================================>] completed (937/940, 285s)[======================================>] completed (937/940, 285s)[======================================>] completed (937/940, 285s)[======================================>] completed (937/940, 285s)[======================================>] completed (937/940, 285s)[======================================>] completed (937/940, 285s)[======================================>] completed (937/940, 286s)[======================================>] completed (937/940, 286s)[======================================>] completed (937/940, 286s)[======================================>] completed (937/940, 286s)[======================================>] completed (937/940, 286s)[======================================>] completed (937/940, 286s)[======================================>] completed (937/940, 286s)[======================================>] completed (937/940, 286s)[======================================>] completed (937/940, 286s)[======================================>] completed (937/940, 286s)[======================================>] completed (937/940, 287s)[======================================>] completed (937/940, 287s)[======================================>] completed (937/940, 287s)[======================================>] completed (937/940, 287s)[======================================>] completed (937/940, 287s)[======================================>] completed (937/940, 287s)[======================================>] completed (937/940, 287s)[======================================>] completed (937/940, 287s)[======================================>] completed (937/940, 287s)[======================================>] completed (937/940, 287s)[======================================>] completed (937/940, 288s)[======================================>] completed (937/940, 288s)[======================================>] completed (937/940, 288s)[======================================>] completed (937/940, 288s)[======================================>] completed (937/940, 288s)[======================================>] completed (937/940, 288s)[======================================>] completed (937/940, 288s)[======================================>] completed (937/940, 288s)[======================================>] completed (937/940, 288s)[======================================>] completed (937/940, 288s)[======================================>] completed (937/940, 289s)[======================================>] completed (937/940, 289s)[======================================>] completed (937/940, 289s)[======================================>] completed (937/940, 289s)[======================================>] completed (937/940, 289s)[======================================>] completed (937/940, 289s)[======================================>] completed (937/940, 289s)[======================================>] completed (937/940, 289s)[======================================>] completed (937/940, 289s)[======================================>] completed (937/940, 289s)[======================================>] completed (937/940, 290s)[======================================>] completed (937/940, 290s)[======================================>] completed (937/940, 290s)[======================================>] completed (937/940, 290s)[======================================>] completed (937/940, 290s)[======================================>] completed (937/940, 290s)[======================================>] completed (937/940, 290s)[======================================>] completed (937/940, 290s)[======================================>] completed (937/940, 290s)[======================================>] completed (937/940, 290s)[======================================>] completed (937/940, 291s)[======================================>] completed (937/940, 291s)[======================================>] completed (937/940, 291s)[======================================>] completed (937/940, 291s)[======================================>] completed (937/940, 291s)[======================================>] completed (937/940, 291s)[======================================>] completed (937/940, 291s)[======================================>] completed (937/940, 291s)[======================================>] completed (937/940, 291s)[======================================>] completed (937/940, 291s)[======================================>] completed (937/940, 292s)[======================================>] completed (937/940, 292s)[======================================>] completed (937/940, 292s)[======================================>] completed (937/940, 292s)[======================================>] completed (937/940, 292s)[======================================>] completed (937/940, 292s)[======================================>] completed (937/940, 292s)[======================================>] completed (937/940, 292s)[======================================>] completed (937/940, 292s)[======================================>] completed (937/940, 292s)[======================================>] completed (937/940, 293s)[======================================>] completed (937/940, 293s)[======================================>] completed (937/940, 293s)[======================================>] completed (937/940, 293s)[======================================>] completed (937/940, 293s)[======================================>] completed (937/940, 293s)[======================================>] completed (937/940, 293s)[======================================>] completed (937/940, 293s)[======================================>] completed (937/940, 293s)[======================================>] completed (937/940, 293s)[======================================>] completed (937/940, 294s)[======================================>] completed (937/940, 294s)[======================================>] completed (937/940, 294s)[======================================>] completed (937/940, 294s)[======================================>] completed (937/940, 294s)[======================================>] completed (937/940, 294s)[======================================>] completed (937/940, 294s)[======================================>] completed (937/940, 294s)[======================================>] completed (937/940, 294s)[======================================>] completed (937/940, 294s)[======================================>] completed (937/940, 295s)[======================================>] completed (937/940, 295s)[======================================>] completed (937/940, 295s)[======================================>] completed (937/940, 295s)[======================================>] completed (937/940, 295s)[======================================>] completed (937/940, 295s)[======================================>] completed (937/940, 295s)[======================================>] completed (937/940, 295s)[======================================>] completed (937/940, 295s)[======================================>] completed (937/940, 295s)[======================================>] completed (937/940, 296s)[======================================>] completed (937/940, 296s)[======================================>] completed (937/940, 296s)[======================================>] completed (937/940, 296s)[======================================>] completed (937/940, 296s)[======================================>] completed (937/940, 296s)[======================================>] completed (937/940, 296s)[======================================>] completed (937/940, 296s)[======================================>] completed (937/940, 296s)[======================================>] completed (937/940, 296s)[======================================>] completed (937/940, 297s)[======================================>] completed (937/940, 297s)[======================================>] completed (937/940, 297s)[======================================>] completed (937/940, 297s)[======================================>] completed (937/940, 297s)[======================================>] completed (937/940, 297s)[======================================>] completed (937/940, 297s)[======================================>] completed (937/940, 297s)[======================================>] completed (937/940, 297s)[======================================>] completed (937/940, 297s)[======================================>] completed (937/940, 298s)[======================================>] completed (937/940, 298s)[======================================>] completed (937/940, 298s)[======================================>] completed (937/940, 298s)[======================================>] completed (937/940, 298s)[======================================>] completed (937/940, 298s)[======================================>] completed (937/940, 298s)[======================================>] completed (937/940, 298s)[======================================>] completed (937/940, 298s)[======================================>] completed (937/940, 298s)[======================================>] completed (937/940, 299s)[======================================>] completed (937/940, 299s)[======================================>] completed (937/940, 299s)[======================================>] completed (937/940, 299s)[======================================>] completed (937/940, 299s)[======================================>] completed (937/940, 299s)[======================================>] completed (937/940, 299s)[======================================>] completed (937/940, 299s)[======================================>] completed (937/940, 299s)[======================================>] completed (937/940, 299s)[======================================>] completed (937/940, 300s)[======================================>] completed (937/940, 300s)[======================================>] completed (937/940, 300s)[======================================>] completed (937/940, 300s)[======================================>] completed (937/940, 300s)[======================================>] completed (937/940, 300s)[======================================>] completed (937/940, 300s)[======================================>] completed (937/940, 300s)[======================================>] completed (937/940, 300s)[======================================>] completed (937/940, 300s)[======================================>] completed (937/940, 301s)[======================================>] completed (937/940, 301s)[======================================>] completed (937/940, 301s)[======================================>] completed (937/940, 301s)[======================================>] completed (937/940, 301s)[======================================>] completed (937/940, 301s)[======================================>] completed (937/940, 301s)[======================================>] completed (937/940, 301s)[======================================>] completed (937/940, 301s)[======================================>] completed (937/940, 301s)[======================================>] completed (937/940, 302s)[======================================>] completed (937/940, 302s)[======================================>] completed (937/940, 302s)[======================================>] completed (937/940, 302s)[======================================>] completed (937/940, 302s)[======================================>] completed (937/940, 302s)[======================================>] completed (937/940, 302s)[======================================>] completed (937/940, 302s)[======================================>] completed (937/940, 302s)[======================================>] completed (937/940, 303s)[======================================>] completed (937/940, 303s)[======================================>] completed (937/940, 303s)[======================================>] completed (937/940, 303s)[======================================>] completed (937/940, 303s)[======================================>] completed (937/940, 303s)[======================================>] completed (937/940, 303s)[======================================>] completed (937/940, 303s)[======================================>] completed (937/940, 303s)[======================================>] completed (937/940, 303s)[======================================>] completed (937/940, 304s)[======================================>] completed (937/940, 304s)[======================================>] completed (937/940, 304s)[======================================>] completed (937/940, 304s)[======================================>] completed (937/940, 304s)[======================================>] completed (937/940, 304s)[======================================>] completed (937/940, 304s)[======================================>] completed (937/940, 304s)[======================================>] completed (937/940, 304s)[======================================>] completed (937/940, 304s)[======================================>] completed (937/940, 305s)[======================================>] completed (937/940, 305s)[======================================>] completed (937/940, 305s)[======================================>] completed (937/940, 305s)[======================================>] completed (937/940, 305s)[======================================>] completed (937/940, 305s)[======================================>] completed (937/940, 305s)[======================================>] completed (937/940, 305s)[======================================>] completed (937/940, 305s)[======================================>] completed (937/940, 305s)[======================================>] completed (937/940, 306s)[======================================>] completed (937/940, 306s)[======================================>] completed (937/940, 306s)[======================================>] completed (937/940, 306s)[======================================>] completed (937/940, 306s)[======================================>] completed (937/940, 306s)[======================================>] completed (937/940, 306s)[======================================>] completed (937/940, 306s)[======================================>] completed (937/940, 306s)[======================================>] completed (937/940, 306s)[======================================>] completed (937/940, 307s)[======================================>] completed (937/940, 307s)[======================================>] completed (937/940, 307s)[======================================>] completed (937/940, 307s)[======================================>] completed (937/940, 307s)[======================================>] completed (937/940, 307s)[======================================>] completed (937/940, 307s)[======================================>] completed (937/940, 307s)[======================================>] completed (937/940, 307s)[======================================>] completed (937/940, 307s)[======================================>] completed (937/940, 308s)[======================================>] completed (937/940, 308s)[======================================>] completed (937/940, 308s)[======================================>] completed (937/940, 308s)[======================================>] completed (937/940, 308s)[======================================>] completed (937/940, 308s)[======================================>] completed (937/940, 308s)[======================================>] completed (937/940, 308s)[======================================>] completed (937/940, 308s)[======================================>] completed (937/940, 308s)[======================================>] completed (937/940, 309s)[======================================>] completed (937/940, 309s)[======================================>] completed (937/940, 309s)[======================================>] completed (937/940, 309s)[======================================>] completed (937/940, 309s)[======================================>] completed (937/940, 309s)[======================================>] completed (937/940, 309s)[======================================>] completed (937/940, 309s)[======================================>] completed (937/940, 309s)[======================================>] completed (937/940, 309s)[======================================>] completed (937/940, 310s)[======================================>] completed (937/940, 310s)[======================================>] completed (937/940, 310s)[======================================>] completed (937/940, 310s)[======================================>] completed (937/940, 310s)[======================================>] completed (937/940, 310s)[======================================>] completed (937/940, 310s)[======================================>] completed (937/940, 310s)[======================================>] completed (937/940, 310s)[======================================>] completed (937/940, 310s)[======================================>] completed (937/940, 311s)[======================================>] completed (937/940, 311s)[======================================>] completed (937/940, 311s)[======================================>] completed (937/940, 311s)[======================================>] completed (937/940, 311s)[======================================>] completed (937/940, 311s)[======================================>] completed (937/940, 311s)[======================================>] completed (937/940, 311s)[======================================>] completed (937/940, 311s)[======================================>] completed (937/940, 311s)[======================================>] completed (937/940, 312s)[======================================>] completed (937/940, 312s)[======================================>] completed (937/940, 312s)[======================================>] completed (937/940, 312s)[======================================>] completed (937/940, 312s)[======================================>] completed (937/940, 312s)[======================================>] completed (937/940, 312s)[======================================>] completed (937/940, 312s)[======================================>] completed (937/940, 312s)[======================================>] completed (937/940, 312s)[======================================>] completed (937/940, 313s)[======================================>] completed (937/940, 313s)[======================================>] completed (937/940, 313s)[======================================>] completed (937/940, 313s)[======================================>] completed (937/940, 313s)[======================================>] completed (937/940, 313s)[======================================>] completed (937/940, 313s)[======================================>] completed (937/940, 313s)[======================================>] completed (937/940, 313s)[======================================>] completed (937/940, 313s)[======================================>] completed (937/940, 314s)[======================================>] completed (937/940, 314s)[======================================>] completed (937/940, 314s)[======================================>] completed (937/940, 314s)[======================================>] completed (937/940, 314s)[======================================>] completed (937/940, 314s)[======================================>] completed (937/940, 314s)[======================================>] completed (937/940, 314s)[======================================>] completed (937/940, 314s)[======================================>] completed (937/940, 314s)[======================================>] completed (937/940, 315s)[======================================>] completed (937/940, 315s)[======================================>] completed (937/940, 315s)[======================================>] completed (937/940, 315s)[======================================>] completed (937/940, 315s)[======================================>] completed (937/940, 315s)[======================================>] completed (937/940, 315s)[======================================>] completed (937/940, 315s)[======================================>] completed (937/940, 315s)[======================================>] completed (937/940, 315s)[======================================>] completed (937/940, 316s)[======================================>] completed (937/940, 316s)[======================================>] completed (937/940, 316s)[======================================>] completed (937/940, 316s)[======================================>] completed (937/940, 316s)[======================================>] completed (937/940, 316s)[======================================>] completed (937/940, 316s)[======================================>] completed (937/940, 316s)[======================================>] completed (937/940, 316s)[======================================>] completed (937/940, 316s)[======================================>] completed (937/940, 317s)[======================================>] completed (937/940, 317s)[======================================>] completed (937/940, 317s)[======================================>] completed (937/940, 317s)[======================================>] completed (937/940, 317s)[======================================>] completed (937/940, 317s)[======================================>] completed (937/940, 317s)[======================================>] completed (937/940, 317s)[======================================>] completed (937/940, 317s)[======================================>] completed (937/940, 317s)[======================================>] completed (937/940, 318s)[======================================>] completed (937/940, 318s)[======================================>] completed (937/940, 318s)[======================================>] completed (937/940, 318s)[======================================>] completed (937/940, 318s)[======================================>] completed (937/940, 318s)[======================================>] completed (937/940, 318s)[======================================>] completed (937/940, 318s)[======================================>] completed (937/940, 318s)[======================================>] completed (937/940, 318s)[======================================>] completed (937/940, 319s)[======================================>] completed (937/940, 319s)[======================================>] completed (937/940, 319s)[======================================>] completed (937/940, 319s)[======================================>] completed (937/940, 319s)[======================================>] completed (937/940, 319s)[======================================>] completed (937/940, 319s)[======================================>] completed (937/940, 319s)[======================================>] completed (937/940, 319s)[======================================>] completed (937/940, 319s)[======================================>] completed (937/940, 320s)[======================================>] completed (937/940, 320s)[======================================>] completed (937/940, 320s)[======================================>] completed (937/940, 320s)[======================================>] completed (937/940, 320s)[======================================>] completed (937/940, 320s)[======================================>] completed (937/940, 320s)[======================================>] completed (937/940, 320s)[======================================>] completed (937/940, 320s)[======================================>] completed (937/940, 320s)[======================================>] completed (937/940, 321s)[======================================>] completed (937/940, 321s)[======================================>] completed (937/940, 321s)[======================================>] completed (937/940, 321s)[======================================>] completed (937/940, 321s)[======================================>] completed (937/940, 321s)[======================================>] completed (937/940, 321s)[======================================>] completed (937/940, 321s)[======================================>] completed (937/940, 321s)[======================================>] completed (937/940, 321s)[======================================>] completed (937/940, 322s)[======================================>] completed (937/940, 322s)[======================================>] completed (937/940, 322s)[======================================>] completed (937/940, 322s)[======================================>] completed (937/940, 322s)[======================================>] completed (937/940, 322s)[======================================>] completed (937/940, 322s)[======================================>] completed (937/940, 322s)[======================================>] completed (937/940, 322s)[======================================>] completed (937/940, 322s)[======================================>] completed (937/940, 323s)[======================================>] completed (937/940, 323s)[======================================>] completed (937/940, 323s)[======================================>] completed (937/940, 323s)[======================================>] completed (937/940, 323s)[======================================>] completed (937/940, 323s)[======================================>] completed (937/940, 323s)[======================================>] completed (937/940, 323s)[======================================>] completed (937/940, 323s)[======================================>] completed (937/940, 323s)[======================================>] completed (937/940, 324s)[======================================>] completed (937/940, 324s)[======================================>] completed (937/940, 324s)[======================================>] completed (937/940, 324s)[======================================>] completed (937/940, 324s)[======================================>] completed (937/940, 324s)[======================================>] completed (937/940, 324s)[======================================>] completed (937/940, 324s)[======================================>] completed (937/940, 324s)[======================================>] completed (937/940, 325s)[======================================>] completed (937/940, 325s)[======================================>] completed (937/940, 325s)[======================================>] completed (937/940, 325s)[======================================>] completed (937/940, 325s)[======================================>] completed (937/940, 325s)[======================================>] completed (937/940, 325s)[======================================>] completed (937/940, 325s)[======================================>] completed (937/940, 325s)[======================================>] completed (937/940, 325s)[======================================>] completed (937/940, 326s)[======================================>] completed (937/940, 326s)[======================================>] completed (937/940, 326s)[======================================>] completed (937/940, 326s)[======================================>] completed (937/940, 326s)[======================================>] completed (937/940, 326s)[======================================>] completed (937/940, 326s)[======================================>] completed (937/940, 326s)[======================================>] completed (937/940, 326s)[======================================>] completed (937/940, 326s)[======================================>] completed (937/940, 327s)[======================================>] completed (937/940, 327s)[======================================>] completed (937/940, 327s)[======================================>] completed (937/940, 327s)[======================================>] completed (937/940, 327s)[======================================>] completed (937/940, 327s)[======================================>] completed (937/940, 327s)[======================================>] completed (937/940, 327s)[======================================>] completed (937/940, 327s)[======================================>] completed (937/940, 327s)[======================================>] completed (937/940, 328s)[======================================>] completed (937/940, 328s)[======================================>] completed (937/940, 328s)[======================================>] completed (937/940, 328s)[======================================>] completed (937/940, 328s)[======================================>] completed (937/940, 328s)[======================================>] completed (937/940, 328s)[======================================>] completed (937/940, 328s)[======================================>] completed (937/940, 328s)[======================================>] completed (937/940, 328s)[======================================>] completed (937/940, 329s)[======================================>] completed (937/940, 329s)[======================================>] completed (937/940, 329s)[======================================>] completed (937/940, 329s)[======================================>] completed (937/940, 329s)[======================================>] completed (937/940, 329s)[======================================>] completed (937/940, 329s)[======================================>] completed (937/940, 329s)[======================================>] completed (937/940, 329s)[======================================>] completed (937/940, 329s)[======================================>] completed (937/940, 330s)[======================================>] completed (937/940, 330s)[0m[[0minfo[0m] [0mPassed: Total 12, Failed 0, Errors 0, Passed 12, Pending 1[0m
[0m[[0minfo[0m] [0mPassed: Total 49, Failed 0, Errors 0, Passed 49[0m
[0m[[31merror[0m] [0mError: Total 0, Failed 0, Errors 0, Passed 0[0m
[0m[[31merror[0m] [0mError during tests:[0m
[0m[[31merror[0m] [0m	Running java with options -classpath /mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/target/scala-2.12/test-classes:/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/compiler/target/scala-2.12/classes:/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/interfaces/target/classes:/mnt/d/Documents/projects/dotty-v/gan74-local-opt/dotty/library/target/scala-2.12/classes:/home/gan_/.ivy2/cache/org.scala-lang/scala-library/jars/scala-library-2.12.4.jar:/home/gan_/.ivy2/cache/org.scala-lang.modules/scala-asm/bundles/scala-asm-6.0.0-scala-1.jar:/home/gan_/.ivy2/cache/com.typesafe.sbt/sbt-interface/jars/sbt-interface-0.13.15.jar:/home/gan_/.ivy2/cache/org.scala-lang.modules/scala-xml_2.12/bundles/scala-xml_2.12-1.0.6.jar:/home/gan_/.ivy2/cache/com.novocode/junit-interface/jars/junit-interface-0.11.jar:/home/gan_/.ivy2/cache/junit/junit/jars/junit-4.11.jar:/home/gan_/.ivy2/cache/org.hamcrest/hamcrest-core/jars/hamcrest-core-1.3.jar:/home/gan_/.ivy2/cache/org.scala-sbt/test-interface/jars/test-interface-1.0.jar:/home/gan_/.sbt/boot/scala-2.10.6/org.scala-sbt/sbt/0.13.15/test-agent-0.13.15.jar:/home/gan_/.sbt/boot/scala-2.10.6/org.scala-sbt/sbt/0.13.15/test-interface-1.0.jar sbt.ForkMain 65216 failed with exit code 130[0m
[0m[[31merror[0m] [0m(dotty-compiler/test:[31mtestOnly[0m) sbt.TestsFailedException: Tests unsuccessful[0m
